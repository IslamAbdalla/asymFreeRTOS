
master.elf:     file format elf32-littlenios2
master.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001dc

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00003034 memsz 0x00003034 flags r-x
    LOAD off    0x00004054 vaddr 0x00003054 paddr 0x00003078 align 2**12
         filesz 0x00000024 memsz 0x00000024 flags rw-
    LOAD off    0x0000409c vaddr 0x0000309c paddr 0x0000309c align 2**12
         filesz 0x00000000 memsz 0x00002560 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001bc  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002dbc  000001dc  000001dc  000011dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000bc  00002f98  00002f98  00003f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000024  00003054  00003078  00004054  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00002560  0000309c  0000309c  0000409c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000055fc  000055fc  00004078  2**0
                  CONTENTS
  7 .memory_buff  00000000  00010000  00010000  00004078  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00004078  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000488  00000000  00000000  000040a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00006682  00000000  00000000  00004528  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000022a7  00000000  00000000  0000abaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00002bc1  00000000  00000000  0000ce51  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000ee4  00000000  00000000  0000fa14  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001e37  00000000  00000000  000108f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00002e80  00000000  00000000  0001272f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000155b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000001e0  00000000  00000000  000155f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00017c08  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00017c0b  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00017c17  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00017c18  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  00017c19  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  00017c24  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  00017c2f  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000b  00000000  00000000  00017c3a  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000002b  00000000  00000000  00017c45  2**0
                  CONTENTS, READONLY
 27 .jdi          0000a38c  00000000  00000000  00017c70  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0005f8dc  00000000  00000000  00021ffc  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001dc l    d  .text	00000000 .text
00002f98 l    d  .rodata	00000000 .rodata
00003054 l    d  .rwdata	00000000 .rwdata
0000309c l    d  .bss	00000000 .bss
000055fc l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00010000 l    d  .memory_buff	00000000 .memory_buff
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../master_bsp//obj/HAL/src/crt0.o
00000214 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 obj/default/portable/GCC/NiosII/port_asm.o
00000020 l       .exceptions	00000000 save_context
0000009c l       .exceptions	00000000 save_sp_to_pxCurrentTCB
000000ac l       .exceptions	00000000 hw_irq_test
00000150 l       .exceptions	00000000 soft_exceptions
000000c0 l       .exceptions	00000000 hw_irq_handler
000000d4 l       .exceptions	00000000 restore_context
0000016c l       .exceptions	00000000 call_scheduler
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 asym.c
0000309c l     O .bss	00000004 mutex
00000000 l    df *ABS*	00000000 croutine.c
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 master.c
00000000 l    df *ABS*	00000000 port.c
00000000 l    df *ABS*	00000000 heap_1.c
000030a0 l     O .bss	00000004 pucAlignedHeap.2415
000030f4 l     O .bss	00002340 ucHeap
000030a4 l     O .bss	00000004 xNextFreeByte
00000000 l    df *ABS*	00000000 queue.c
000006fc l     F .text	000000d8 prvCopyDataToQueue
000007d4 l     F .text	00000038 prvCopyDataFromQueue
0000080c l     F .text	000000ac prvUnlockQueue
00000000 l    df *ABS*	00000000 tasks.c
00001144 l     F .text	0000002c prvTaskIsTaskSuspended
00005434 l     O .bss	00000014 xSuspendedTaskList
0000545c l     O .bss	00000014 xPendingReadyList
00001170 l     F .text	0000002c prvResetNextTaskUnblockTime
000030d8 l     O .bss	00000004 pxDelayedTaskList
000030ac l     O .bss	00000004 xNextTaskUnblockTime
0000119c l     F .text	0000005c prvAddCurrentTaskToDelayedList
000030c8 l     O .bss	00000004 xTickCount
000030d4 l     O .bss	00000004 pxOverflowDelayedTaskList
000030a8 l     O .bss	00000004 uxSchedulerSuspended
000030c4 l     O .bss	00000004 uxTopReadyPriority
00005498 l     O .bss	00000064 pxReadyTasksLists
000030c0 l     O .bss	00000004 xSchedulerRunning
000030cc l     O .bss	00000004 uxCurrentNumberOfTasks
000030b4 l     O .bss	00000004 xNumOfOverflows
000030bc l     O .bss	00000004 uxPendedTicks
000030b8 l     O .bss	00000004 xYieldPending
00005484 l     O .bss	00000014 xDelayedTaskList1
00005470 l     O .bss	00000014 xDelayedTaskList2
00005448 l     O .bss	00000014 xTasksWaitingTermination
000030b0 l     O .bss	00000004 uxTaskNumber
000021b4 l     F .text	0000007c prvIdleTask
000030d0 l     O .bss	00000004 uxTasksDeleted
00000000 l    df *ABS*	00000000 timers.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00003054 l     O .rwdata	00000010 mutex_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00002e6c l     F .text	0000006c udivmodsi4
00002918 g     F .text	0000002c alt_main
000054fc g     O .bss	00000100 alt_irq
000000c4 g       .exceptions	00000000 restore_sp_from_pxCurrentTCB
0000157c g     F .text	00000074 vTaskPlaceOnUnorderedEventList
000006ec g     F .text	00000010 xPortGetFreeHeapSize
00003078 g       *ABS*	00000000 __flash_rwdata_start
00001d00 g     F .text	00000038 uxTaskPriorityGet
00000350 g     F .text	00000020 masterTask
000018f4 g     F .text	00000030 vTaskEnterCritical
00000c8c g     F .text	00000090 xQueueGenericSendFromISR
00002c1c g     F .text	00000028 altera_avalon_mutex_trylock
00002af8 g     F .text	00000038 alt_putstr
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000c2c g     F .text	00000060 xQueueGiveMutexRecursive
000030dc g     O .bss	00000004 pxCurrentTCB
00000258 g     F .text	00000014 xAsymReqQueuInit
00002c64 g     F .text	00000028 altera_avalon_mutex_is_mine
00000020 g       *ABS*	00000000 __flash_exceptions_start
000030f0 g     O .bss	00000004 errno
000030e8 g     O .bss	00000004 alt_argv
0000b064 g       *ABS*	00000000 _gp
00002b30 g     F .text	00000004 usleep
00001d38 g     F .text	00000104 vTaskPrioritySet
000005c8 g     F .text	0000008c xPortStartScheduler
000012b0 g     F .text	00000018 vTaskEndScheduler
00002da0 g     F .text	00000074 alt_find_dev
000027d8 g     F .text	00000028 memcpy
00001514 g     F .text	00000068 vTaskPlaceOnEventList
00001960 g     F .text	0000027c xTaskGenericCreate
00001064 g     F .text	00000048 xQueuePeekFromISR
000006e0 g     F .text	00000004 vPortFree
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00002f88 g     F .text	00000008 .hidden __udivsi3
00001740 g     F .text	00000034 uxTaskGetStackHighWaterMark
00000294 g     F .text	00000030 vListInsertEnd
00001208 g     F .text	000000a8 xTaskResumeFromISR
0000028c g     F .text	00000008 vListInitialiseItem
000004bc g     F .text	00000030 vPortSysTickHandler
000011f8 g     F .text	00000010 uxTaskPriorityGetFromISR
00000530 g     F .text	00000098 alt_irq_register
00002c8c g     F .text	00000010 altera_avalon_mutex_first_lock
000055fc g       *ABS*	00000000 __bss_end
00000654 g     F .text	0000008c pvPortMalloc
00001124 g     F .text	00000004 vQueueDelete
0000052c g     F .text	00000004 vPortEndScheduler
0000026c g     F .text	00000020 vListInitialise
000030e0 g     O .bss	00000004 alt_irq_active
0000017c g     F .exceptions	00000060 alt_irq_handler
000012d8 g     F .text	00000008 xTaskGetTickCount
00000a30 g     F .text	0000017c xQueueGenericSend
00002b9c g     F .text	00000058 altera_avalon_mutex_open
00002d24 g     F .text	00000004 alt_dcache_flush_all
00001858 g     F .text	0000009c xTaskPriorityDisinherit
00003078 g       *ABS*	00000000 __ram_rwdata_end
000015f0 g     F .text	000000a4 xTaskRemoveFromEventList
0000306c g     O .rwdata	00000008 alt_mutex_list
00003054 g       *ABS*	00000000 __ram_rodata_end
00003068 g     O .rwdata	00000004 jtag_uart_0
00002f90 g     F .text	00000008 .hidden __umodsi3
00000370 g     F .text	000000d4 waste
000055fc g       *ABS*	00000000 end
00001c50 g     F .text	000000b0 vTaskDelete
000022d4 g     F .text	00000020 pvTaskIncrementMutexHeldCount
00005650 g       *ABS*	00000000 __alt_stack_pointer
00002b68 g     F .text	00000034 altera_avalon_jtag_uart_write
00002230 g     F .text	00000080 xTaskCheckForTimeOut
00002944 g     F .text	0000016c alt_printf
000022f4 g     F .text	000000c8 ulTaskNotifyTake
000001dc g     F .text	0000003c _start
000012c8 g     F .text	00000010 vTaskSuspendAll
000012e0 g     F .text	00000008 xTaskGetTickCountFromISR
00002b54 g     F .text	00000014 alt_sys_init
00000318 g     F .text	00000038 uxListRemove
00002c44 g     F .text	00000020 altera_avalon_mutex_unlock
0000177c g     F .text	000000dc vTaskPriorityInherit
000027b0 g     F .text	00000028 .hidden __mulsi3
00003054 g       *ABS*	00000000 __ram_rwdata_start
00002f98 g       *ABS*	00000000 __ram_rodata_start
00001f18 g     F .text	00000098 vTaskResume
0000144c g     F .text	000000c8 vTaskSwitchContext
00002c9c g     F .text	00000088 alt_busy_sleep
000023bc g     F .text	0000010c xTaskNotifyWait
00002e20 g     F .text	00000030 memcmp
000055fc g       *ABS*	00000000 __alt_stack_base
00001e3c g     F .text	000000dc vTaskSuspend
000012e8 g     F .text	00000008 uxTaskGetNumberOfTasks
00000000         *UND*	00000000 save_context
00002d28 g     F .text	00000078 alt_dev_llist_insert
00000f54 g     F .text	00000084 xQueueTakeMutexRecursive
000024c8 g     F .text	00000110 xTaskGenericNotify
0000309c g       *ABS*	00000000 __bss_start
00002800 g     F .text	00000020 memset
00000444 g     F .text	00000078 main
000030e4 g     O .bss	00000004 alt_envp
000002c4 g     F .text	00000054 vListInsert
00002bf8 g     F .text	00000024 altera_avalon_mutex_lock
00003074 g     O .rwdata	00000004 alt_errno
000020d4 g     F .text	00000088 vTaskDelayUntil
00000fd8 g     F .text	0000008c xQueueReceiveFromISR
00001774 g     F .text	00000008 xTaskGetCurrentTaskHandle
00002ed8 g     F .text	00000054 .hidden __divsi3
00000970 g     F .text	0000008c xQueueGenericCreate
000009fc g     F .text	00000034 xQueueCreateCountingSemaphore
00002f98 g       *ABS*	00000000 __flash_rodata_start
000025d8 g     F .text	00000118 xTaskGenericNotifyFromISR
00002b34 g     F .text	00000020 alt_irq_init
00001694 g     F .text	0000008c xTaskRemoveFromUnorderedEventList
00001fb0 g     F .text	00000124 xTaskResumeAll
000010dc g     F .text	00000040 uxQueueSpacesAvailable
00001bdc g     F .text	00000074 vTaskStartScheduler
00001134 g     F .text	00000010 xQueueIsQueueFullFromISR
000030ec g     O .bss	00000004 alt_argc
00001734 g     F .text	0000000c vTaskMissedYield
000010ac g     F .text	00000030 uxQueueMessagesWaiting
00000dac g     F .text	000001a8 xQueueGenericReceive
000012f0 g     F .text	0000015c xTaskIncrementTick
00000020 g       *ABS*	00000000 __ram_exceptions_start
000008b8 g     F .text	000000b8 xQueueGenericReset
00003078 g       *ABS*	00000000 _edata
000055fc g       *ABS*	00000000 _end
000001dc g       *ABS*	00000000 __ram_exceptions_end
000006e4 g     F .text	00000008 vPortInitialiseBlocks
00002e18 g     F .text	00000008 altera_nios2_qsys_irq_init
00002f2c g     F .text	0000005c .hidden __modsi3
0000215c g     F .text	00000058 vTaskDelay
00005650 g       *ABS*	00000000 __alt_data_end
00010000 g       *ABS*	00000000 __alt_mem_memory_buff
0000000c g       .entry	00000000 _exit
00001924 g     F .text	0000003c vTaskExitCritical
00002e50 g     F .text	0000001c strlen
000004ec g     F .text	00000040 pxPortInitialiseStack
00002ab0 g     F .text	00000048 alt_putchar
00002e14 g     F .text	00000004 alt_icache_flush_all
00001720 g     F .text	00000014 vTaskSetTimeOutState
00003064 g     O .rwdata	00000004 alt_priority_mask
00002bf4 g     F .text	00000004 altera_avalon_mutex_close
0000111c g     F .text	00000008 uxQueueMessagesWaitingFromISR
00001128 g     F .text	0000000c xQueueIsQueueEmptyFromISR
00000218 g     F .text	00000040 xAsymMutexInit
000022b0 g     F .text	00000024 uxTaskResetEventItemValue
00000bac g     F .text	00000080 xQueueCreateMutex
000026f0 g     F .text	000000c0 vTaskNotifyGiveFromISR
00002820 g     F .text	000000f8 alt_load
00000d1c g     F .text	00000090 xQueueGiveFromISR



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08407714 	ori	at,at,476
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .exceptions:

00000020 <save_context>:
# Entry point for exceptions.
.section .exceptions.entry, "xa"

# Save the entire context of a task.
save_context:
	addi	ea, ea, -4			# Point to the next instruction.
  20:	ef7fff04 	addi	ea,ea,-4
	addi	sp,	sp, -116		# Create space on the stack.
  24:	deffe304 	addi	sp,sp,-116
	stw		ra, 0(sp)
  28:	dfc00015 	stw	ra,0(sp)
								# Leave a gap for muldiv 0
	stw		at, 8(sp)
  2c:	d8400215 	stw	at,8(sp)
	stw		r2, 12(sp)
  30:	d8800315 	stw	r2,12(sp)
	stw		r3, 16(sp)
  34:	d8c00415 	stw	r3,16(sp)
	stw		r4, 20(sp)
  38:	d9000515 	stw	r4,20(sp)
	stw		r5, 24(sp)
  3c:	d9400615 	stw	r5,24(sp)
	stw		r6, 28(sp)
  40:	d9800715 	stw	r6,28(sp)
	stw		r7, 32(sp)
  44:	d9c00815 	stw	r7,32(sp)
	stw		r8, 36(sp)
  48:	da000915 	stw	r8,36(sp)
	stw		r9, 40(sp)
  4c:	da400a15 	stw	r9,40(sp)
	stw		r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
	stw		r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
	stw		r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
	stw		r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
	stw		r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
	stw		r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
	rdctl	r5, estatus 		# Save the eStatus
  68:	000b307a 	rdctl	r5,estatus
	stw		r5, 68(sp)
  6c:	d9401115 	stw	r5,68(sp)
	stw		ea, 72(sp)			# Save the PC
  70:	df401215 	stw	ea,72(sp)
	stw		r16, 76(sp)			# Save the remaining registers
  74:	dc001315 	stw	r16,76(sp)
	stw		r17, 80(sp)
  78:	dc401415 	stw	r17,80(sp)
	stw		r18, 84(sp)
  7c:	dc801515 	stw	r18,84(sp)
	stw		r19, 88(sp)
  80:	dcc01615 	stw	r19,88(sp)
	stw		r20, 92(sp)
  84:	dd001715 	stw	r20,92(sp)
	stw		r21, 96(sp)
  88:	dd401815 	stw	r21,96(sp)
	stw		r22, 100(sp)
  8c:	dd801915 	stw	r22,100(sp)
	stw		r23, 104(sp)
  90:	ddc01a15 	stw	r23,104(sp)
	stw		gp, 108(sp)
  94:	de801b15 	stw	gp,108(sp)
	stw		fp, 112(sp)
  98:	df001c15 	stw	fp,112(sp)

0000009c <save_sp_to_pxCurrentTCB>:
  9c:	06000034 	movhi	et,0

save_sp_to_pxCurrentTCB:
	movia	et, pxCurrentTCB	# Load the address of the pxCurrentTCB pointer
  a0:	c60c3704 	addi	et,et,12508
	ldw		et, (et)			# Load the value of the pxCurrentTCB pointer
  a4:	c6000017 	ldw	et,0(et)
	stw		sp, (et)			# Store the stack pointer into the top of the TCB
  a8:	c6c00015 	stw	sp,0(et)

000000ac <hw_irq_test>:
hw_irq_test:
	/*
     * Test to see if the exception was a software exception or caused
     * by an external interrupt, and vector accordingly.
     */
    rdctl	r4, ipending		# Load the Pending Interrupts indication
  ac:	0009313a 	rdctl	r4,ipending
	rdctl	r5, estatus 		# Load the eStatus (enabled interrupts).
  b0:	000b307a 	rdctl	r5,estatus
    andi	r2, r5, 1			# Are interrupts enabled globally.
  b4:	2880004c 	andi	r2,r5,1
    beq		r2, zero, soft_exceptions		# Interrupts are not enabled.
  b8:	10002526 	beq	r2,zero,150 <soft_exceptions>
    beq		r4, zero, soft_exceptions		# There are no interrupts triggered.
  bc:	20002426 	beq	r4,zero,150 <soft_exceptions>

000000c0 <hw_irq_handler>:

	.section .exceptions.irqhandler, "xa"
hw_irq_handler:
	call	alt_irq_handler					# Call the alt_irq_handler to deliver to the registered interrupt handler.
  c0:	000017c0 	call	17c <alt_irq_handler>

000000c4 <restore_sp_from_pxCurrentTCB>:
  c4:	06000034 	movhi	et,0

    .section .exceptions.irqreturn, "xa"
restore_sp_from_pxCurrentTCB:
	movia	et, pxCurrentTCB		# Load the address of the pxCurrentTCB pointer
  c8:	c60c3704 	addi	et,et,12508
	ldw		et, (et)				# Load the value of the pxCurrentTCB pointer
  cc:	c6000017 	ldw	et,0(et)
	ldw		sp, (et)				# Load the stack pointer with the top value of the TCB
  d0:	c6c00017 	ldw	sp,0(et)

000000d4 <restore_context>:

restore_context:
	ldw		ra, 0(sp)		# Restore the registers.
  d4:	dfc00017 	ldw	ra,0(sp)
							# Leave a gap for muldiv 0.
	ldw		at, 8(sp)
  d8:	d8400217 	ldw	at,8(sp)
	ldw		r2, 12(sp)
  dc:	d8800317 	ldw	r2,12(sp)
	ldw		r3, 16(sp)
  e0:	d8c00417 	ldw	r3,16(sp)
	ldw		r4, 20(sp)
  e4:	d9000517 	ldw	r4,20(sp)
	ldw		r5, 24(sp)
  e8:	d9400617 	ldw	r5,24(sp)
	ldw		r6, 28(sp)
  ec:	d9800717 	ldw	r6,28(sp)
	ldw		r7, 32(sp)
  f0:	d9c00817 	ldw	r7,32(sp)
	ldw		r8, 36(sp)
  f4:	da000917 	ldw	r8,36(sp)
	ldw		r9, 40(sp)
  f8:	da400a17 	ldw	r9,40(sp)
	ldw		r10, 44(sp)
  fc:	da800b17 	ldw	r10,44(sp)
	ldw		r11, 48(sp)
 100:	dac00c17 	ldw	r11,48(sp)
	ldw		r12, 52(sp)
 104:	db000d17 	ldw	r12,52(sp)
	ldw		r13, 56(sp)
 108:	db400e17 	ldw	r13,56(sp)
	ldw		r14, 60(sp)
 10c:	db800f17 	ldw	r14,60(sp)
	ldw		r15, 64(sp)
 110:	dbc01017 	ldw	r15,64(sp)
	ldw		et, 68(sp)		# Load the eStatus
 114:	de001117 	ldw	et,68(sp)
	wrctl	estatus, et 	# Write the eStatus
 118:	c001707a 	wrctl	estatus,et
	ldw		ea, 72(sp)		# Load the Program Counter
 11c:	df401217 	ldw	ea,72(sp)
	ldw		r16, 76(sp)
 120:	dc001317 	ldw	r16,76(sp)
	ldw		r17, 80(sp)
 124:	dc401417 	ldw	r17,80(sp)
	ldw		r18, 84(sp)
 128:	dc801517 	ldw	r18,84(sp)
	ldw		r19, 88(sp)
 12c:	dcc01617 	ldw	r19,88(sp)
	ldw		r20, 92(sp)
 130:	dd001717 	ldw	r20,92(sp)
	ldw		r21, 96(sp)
 134:	dd401817 	ldw	r21,96(sp)
	ldw		r22, 100(sp)
 138:	dd801917 	ldw	r22,100(sp)
	ldw		r23, 104(sp)
 13c:	ddc01a17 	ldw	r23,104(sp)
	ldw		gp, 108(sp)
 140:	de801b17 	ldw	gp,108(sp)
	ldw		fp, 112(sp)
 144:	df001c17 	ldw	fp,112(sp)
	addi	sp,	sp, 116		# Release stack space
 148:	dec01d04 	addi	sp,sp,116

    eret					# Return to address ea, loading eStatus into Status.
 14c:	ef80083a 	eret

00000150 <soft_exceptions>:

	.section .exceptions.soft, "xa"
soft_exceptions:
	ldw		et, 0(ea)				# Load the instruction where the interrupt occured.
 150:	ee000017 	ldw	et,0(ea)
	movhi	at, %hi(0x003B683A)		# Load the registers with the trap instruction code
 154:	00400ef4 	movhi	at,59
	ori		at, at, %lo(0x003B683A)
 158:	085a0e94 	ori	at,at,26682
   	cmpne	et, et, at				# Compare the trap instruction code to the last excuted instruction
 15c:	c070c03a 	cmpne	et,et,at
  	beq		et, r0, call_scheduler	# its a trap so switchcontext
 160:	c0000226 	beq	et,zero,16c <call_scheduler>
  	break							# This is an un-implemented instruction or muldiv problem.
 164:	003da03a 	break	0
  	br		restore_context			# its something else
 168:	003fda06 	br	d4 <restore_context>

0000016c <call_scheduler>:

call_scheduler:
	addi	ea, ea, 4						# A trap was called, increment the program counter so it is not called again.
 16c:	ef400104 	addi	ea,ea,4
	stw		ea, 72(sp)						# Save the new program counter to the context.
 170:	df401215 	stw	ea,72(sp)
	call	vTaskSwitchContext				# Pick the next context.
 174:	000144c0 	call	144c <vTaskSwitchContext>
	br		restore_sp_from_pxCurrentTCB	# Switch in the task context and restore.
 178:	003fd206 	br	c4 <restore_sp_from_pxCurrentTCB>

0000017c <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 17c:	defffe04 	addi	sp,sp,-8
 180:	dfc00115 	stw	ra,4(sp)
 184:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 188:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 18c:	04000034 	movhi	r16,0
 190:	84153f04 	addi	r16,r16,21756

  active = alt_irq_pending ();

  do
  {
    i = 0;
 194:	000b883a 	mov	r5,zero
    mask = 1;
 198:	00800044 	movi	r2,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 19c:	10c8703a 	and	r4,r2,r3
 1a0:	20000b26 	beq	r4,zero,1d0 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 1a4:	280490fa 	slli	r2,r5,3
 1a8:	8085883a 	add	r2,r16,r2
 1ac:	10c00017 	ldw	r3,0(r2)
 1b0:	11000117 	ldw	r4,4(r2)
 1b4:	183ee83a 	callr	r3
 1b8:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 1bc:	183ff51e 	bne	r3,zero,194 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	dc000017 	ldw	r16,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1d0:	1085883a 	add	r2,r2,r2
      i++;
 1d4:	29400044 	addi	r5,r5,1

    } while (1);
 1d8:	003ff006 	br	19c <alt_irq_handler+0x20>

Disassembly of section .text:

000001dc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1dc:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
     1e0:	ded59414 	ori	sp,sp,22096
    movhi gp, %hi(_gp)
     1e4:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     1e8:	d6ac1914 	ori	gp,gp,45156
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1ec:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1f0:	108c2714 	ori	r2,r2,12444

    movhi r3, %hi(__bss_end)
     1f4:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1f8:	18d57f14 	ori	r3,r3,22012

    beq r2, r3, 1f
     1fc:	10c00326 	beq	r2,r3,20c <_start+0x30>

0:
    stw zero, (r2)
     200:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     204:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     208:	10fffd36 	bltu	r2,r3,200 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     20c:	00028200 	call	2820 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     210:	00029180 	call	2918 <alt_main>

00000214 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     214:	003fff06 	br	214 <alt_after_alt_main>

00000218 <xAsymMutexInit>:
/**
 * Initiate the Mutex
 */
bool_t xAsymMutexInit(){

	if(!altera_avalon_mutex_open(MUTEX_0_NAME)) {
     218:	01000034 	movhi	r4,0
static alt_mutex_dev * mutex;

/**
 * Initiate the Mutex
 */
bool_t xAsymMutexInit(){
     21c:	deffff04 	addi	sp,sp,-4

	if(!altera_avalon_mutex_open(MUTEX_0_NAME)) {
     220:	210be604 	addi	r4,r4,12184
static alt_mutex_dev * mutex;

/**
 * Initiate the Mutex
 */
bool_t xAsymMutexInit(){
     224:	dfc00015 	stw	ra,0(sp)

	if(!altera_avalon_mutex_open(MUTEX_0_NAME)) {
     228:	0002b9c0 	call	2b9c <altera_avalon_mutex_open>
     22c:	10000626 	beq	r2,zero,248 <xAsymMutexInit+0x30>
		/* Failed to instantiate mutex */
		return xFalse;
	  }

	 mutex = altera_avalon_mutex_open(MUTEX_0_NAME);
     230:	01000034 	movhi	r4,0
     234:	210be604 	addi	r4,r4,12184
     238:	0002b9c0 	call	2b9c <altera_avalon_mutex_open>
     23c:	d0a00e15 	stw	r2,-32712(gp)
	 return xTrue;
     240:	00800044 	movi	r2,1
     244:	00000106 	br	24c <xAsymMutexInit+0x34>
 */
bool_t xAsymMutexInit(){

	if(!altera_avalon_mutex_open(MUTEX_0_NAME)) {
		/* Failed to instantiate mutex */
		return xFalse;
     248:	0005883a 	mov	r2,zero
	  }

	 mutex = altera_avalon_mutex_open(MUTEX_0_NAME);
	 return xTrue;
}
     24c:	dfc00017 	ldw	ra,0(sp)
     250:	dec00104 	addi	sp,sp,4
     254:	f800283a 	ret

00000258 <xAsymReqQueuInit>:

bool_t xAsymReqQueuInit(){
	xReqQueue->uxNumberOfItems = 0;
     258:	00800074 	movhi	r2,1
     25c:	10000015 	stw	zero,0(r2)
	xReqQueue->pxIndex = 0;
     260:	1001f515 	stw	zero,2004(r2)
	return xTrue;
}
     264:	00800044 	movi	r2,1
     268:	f800283a 	ret

0000026c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     26c:	20800204 	addi	r2,r4,8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     270:	00ffffc4 	movi	r3,-1
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     274:	20800115 	stw	r2,4(r4)

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     278:	20c00215 	stw	r3,8(r4)

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     27c:	20800315 	stw	r2,12(r4)
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     280:	20800415 	stw	r2,16(r4)

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     284:	20000015 	stw	zero,0(r4)
     288:	f800283a 	ret

0000028c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     28c:	20000415 	stw	zero,16(r4)
     290:	f800283a 	ret

00000294 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
     294:	20800117 	ldw	r2,4(r4)

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     298:	10c00217 	ldw	r3,8(r2)
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     29c:	28800115 	stw	r2,4(r5)
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     2a0:	28c00215 	stw	r3,8(r5)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     2a4:	10c00217 	ldw	r3,8(r2)
     2a8:	19400115 	stw	r5,4(r3)
	pxIndex->pxPrevious = pxNewListItem;
     2ac:	11400215 	stw	r5,8(r2)

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
     2b0:	20800017 	ldw	r2,0(r4)

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     2b4:	29000415 	stw	r4,16(r5)

	( pxList->uxNumberOfItems )++;
     2b8:	10800044 	addi	r2,r2,1
     2bc:	20800015 	stw	r2,0(r4)
     2c0:	f800283a 	ret

000002c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     2c4:	28c00017 	ldw	r3,0(r5)
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     2c8:	00bfffc4 	movi	r2,-1
     2cc:	1880021e 	bne	r3,r2,2d8 <vListInsert+0x14>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     2d0:	20800417 	ldw	r2,16(r4)
     2d4:	00000606 	br	2f0 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     2d8:	20800204 	addi	r2,r4,8
     2dc:	11800117 	ldw	r6,4(r2)
     2e0:	31c00017 	ldw	r7,0(r6)
     2e4:	19c00236 	bltu	r3,r7,2f0 <vListInsert+0x2c>
     2e8:	3005883a 	mov	r2,r6
     2ec:	003ffb06 	br	2dc <vListInsert+0x18>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     2f0:	10c00117 	ldw	r3,4(r2)
     2f4:	28c00115 	stw	r3,4(r5)
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     2f8:	19400215 	stw	r5,8(r3)
	pxNewListItem->pxPrevious = pxIterator;
     2fc:	28800215 	stw	r2,8(r5)
	pxIterator->pxNext = pxNewListItem;
     300:	11400115 	stw	r5,4(r2)

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
     304:	20800017 	ldw	r2,0(r4)
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     308:	29000415 	stw	r4,16(r5)

	( pxList->uxNumberOfItems )++;
     30c:	10800044 	addi	r2,r2,1
     310:	20800015 	stw	r2,0(r4)
     314:	f800283a 	ret

00000318 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     318:	21400117 	ldw	r5,4(r4)
     31c:	20800217 	ldw	r2,8(r4)

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     320:	20c00417 	ldw	r3,16(r4)

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     324:	28800215 	stw	r2,8(r5)
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     328:	20800217 	ldw	r2,8(r4)
     32c:	11400115 	stw	r5,4(r2)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     330:	19400117 	ldw	r5,4(r3)
     334:	2900011e 	bne	r5,r4,33c <uxListRemove+0x24>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     338:	18800115 	stw	r2,4(r3)
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
     33c:	18800017 	ldw	r2,0(r3)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     340:	20000415 	stw	zero,16(r4)
	( pxList->uxNumberOfItems )--;
     344:	10bfffc4 	addi	r2,r2,-1
     348:	18800015 	stw	r2,0(r3)

	return pxList->uxNumberOfItems;
}
     34c:	f800283a 	ret

00000350 <masterTask>:
#include "task.h"

// Asym
#include "asym.h"

void masterTask( void *p){
     350:	deffff04 	addi	sp,sp,-4
     354:	dfc00015 	stw	ra,0(sp)
	int status = 0;

	while(1){
		alt_putstr("Hello, world!\n");
     358:	01000034 	movhi	r4,0
     35c:	210bea04 	addi	r4,r4,12200
     360:	0002af80 	call	2af8 <alt_putstr>
		vTaskDelay(1000);
     364:	0100fa04 	movi	r4,1000
     368:	000215c0 	call	215c <vTaskDelay>
	}
     36c:	003ffa06 	br	358 <masterTask+0x8>

00000370 <waste>:
	int *message;
	int status = 0;
	alt_mutex_dev* mutex;
	message =(int*) MEMORY_BUFF_BASE;

	if(!altera_avalon_mutex_open(MUTEX_0_NAME)) {
     370:	01000034 	movhi	r4,0


	return 0;
}

int waste(){
     374:	defffc04 	addi	sp,sp,-16
	int *message;
	int status = 0;
	alt_mutex_dev* mutex;
	message =(int*) MEMORY_BUFF_BASE;

	if(!altera_avalon_mutex_open(MUTEX_0_NAME)) {
     378:	210be604 	addi	r4,r4,12184


	return 0;
}

int waste(){
     37c:	dfc00315 	stw	ra,12(sp)
     380:	dc800215 	stw	r18,8(sp)
     384:	dc400115 	stw	r17,4(sp)
     388:	dc000015 	stw	r16,0(sp)
	int *message;
	int status = 0;
	alt_mutex_dev* mutex;
	message =(int*) MEMORY_BUFF_BASE;

	if(!altera_avalon_mutex_open(MUTEX_0_NAME)) {
     38c:	0002b9c0 	call	2b9c <altera_avalon_mutex_open>
     390:	10002226 	beq	r2,zero,41c <waste+0xac>
		alt_putstr("Error: could not open the mutex\n");
		return 0;
	}
	mutex = altera_avalon_mutex_open(MUTEX_0_NAME);
     394:	01000034 	movhi	r4,0
     398:	210be604 	addi	r4,r4,12184
     39c:	0002b9c0 	call	2b9c <altera_avalon_mutex_open>
     3a0:	1023883a 	mov	r17,r2
	return 0;
}

int waste(){
	int *message;
	int status = 0;
     3a4:	0021883a 	mov	r16,zero
	mutex = altera_avalon_mutex_open(MUTEX_0_NAME);


	/* Event loop never exits. */
	while (1){
		alt_printf("TRYING TO AQUIRE\n");
     3a8:	01000034 	movhi	r4,0
     3ac:	210c0604 	addi	r4,r4,12312
     3b0:	00029440 	call	2944 <alt_printf>
		altera_avalon_mutex_lock(mutex, 1);
     3b4:	8809883a 	mov	r4,r17
     3b8:	01400044 	movi	r5,1
     3bc:	0002bf80 	call	2bf8 <altera_avalon_mutex_lock>
		if( altera_avalon_mutex_is_mine(mutex)) {
     3c0:	8809883a 	mov	r4,r17
     3c4:	0002c640 	call	2c64 <altera_avalon_mutex_is_mine>
     3c8:	10000d26 	beq	r2,zero,400 <waste+0x90>
			alt_printf("Got it: %x!\n", status++);
     3cc:	01000034 	movhi	r4,0
     3d0:	800b883a 	mov	r5,r16
     3d4:	210c0b04 	addi	r4,r4,12332
     3d8:	00029440 	call	2944 <alt_printf>
     3dc:	84800044 	addi	r18,r16,1
			*message = status;
     3e0:	00800074 	movhi	r2,1
			usleep(2100000);
     3e4:	01000834 	movhi	r4,32
     3e8:	2102c804 	addi	r4,r4,2848
	while (1){
		alt_printf("TRYING TO AQUIRE\n");
		altera_avalon_mutex_lock(mutex, 1);
		if( altera_avalon_mutex_is_mine(mutex)) {
			alt_printf("Got it: %x!\n", status++);
			*message = status;
     3ec:	14800015 	stw	r18,0(r2)
			usleep(2100000);
     3f0:	0002b300 	call	2b30 <usleep>
			altera_avalon_mutex_unlock(mutex);
     3f4:	8809883a 	mov	r4,r17
     3f8:	0002c440 	call	2c44 <altera_avalon_mutex_unlock>
	/* Event loop never exits. */
	while (1){
		alt_printf("TRYING TO AQUIRE\n");
		altera_avalon_mutex_lock(mutex, 1);
		if( altera_avalon_mutex_is_mine(mutex)) {
			alt_printf("Got it: %x!\n", status++);
     3fc:	9021883a 	mov	r16,r18
			*message = status;
			usleep(2100000);
			altera_avalon_mutex_unlock(mutex);
		}

		alt_printf("Now go ------>\n");
     400:	01000034 	movhi	r4,0
     404:	210c0f04 	addi	r4,r4,12348
     408:	00029440 	call	2944 <alt_printf>
		usleep(2100000);
     40c:	01000834 	movhi	r4,32
     410:	2102c804 	addi	r4,r4,2848
     414:	0002b300 	call	2b30 <usleep>
	}
     418:	003fe306 	br	3a8 <waste+0x38>
	int status = 0;
	alt_mutex_dev* mutex;
	message =(int*) MEMORY_BUFF_BASE;

	if(!altera_avalon_mutex_open(MUTEX_0_NAME)) {
		alt_putstr("Error: could not open the mutex\n");
     41c:	01000034 	movhi	r4,0
     420:	210bfd04 	addi	r4,r4,12276
     424:	0002af80 	call	2af8 <alt_putstr>
		usleep(2100000);
	}


	return 0;
}
     428:	0005883a 	mov	r2,zero
     42c:	dfc00317 	ldw	ra,12(sp)
     430:	dc800217 	ldw	r18,8(sp)
     434:	dc400117 	ldw	r17,4(sp)
     438:	dc000017 	ldw	r16,0(sp)
     43c:	dec00404 	addi	sp,sp,16
     440:	f800283a 	ret

00000444 <main>:
		vTaskDelay(1000);
	}
}

int main()
{
     444:	defffb04 	addi	sp,sp,-20
     448:	dfc00415 	stw	ra,16(sp)

	xAsymMutexInit();
     44c:	00002180 	call	218 <xAsymMutexInit>
	xAsymReqQueuInit();
     450:	00002580 	call	258 <xAsymReqQueuInit>
	alt_putstr("Things initiated!\n");
     454:	01000034 	movhi	r4,0
     458:	210bee04 	addi	r4,r4,12216
     45c:	0002af80 	call	2af8 <alt_putstr>


	 xTaskCreate(masterTask, "masterTask", 512, NULL, 2, NULL);
     460:	00800084 	movi	r2,2
     464:	01000034 	movhi	r4,0
     468:	01400034 	movhi	r5,0
     46c:	294bf304 	addi	r5,r5,12236
     470:	01808004 	movi	r6,512
     474:	000f883a 	mov	r7,zero
     478:	d8800015 	stw	r2,0(sp)
     47c:	d8000115 	stw	zero,4(sp)
     480:	d8000215 	stw	zero,8(sp)
     484:	d8000315 	stw	zero,12(sp)
     488:	2100d404 	addi	r4,r4,848
     48c:	00019600 	call	1960 <xTaskGenericCreate>

	alt_putstr("Starting scheduler\n");
     490:	01000034 	movhi	r4,0
     494:	210bf604 	addi	r4,r4,12248
     498:	0002af80 	call	2af8 <alt_putstr>

	 vTaskStartScheduler();
     49c:	0001bdc0 	call	1bdc <vTaskStartScheduler>
	alt_putstr("OOPs!\n");
     4a0:	01000034 	movhi	r4,0
     4a4:	210bfb04 	addi	r4,r4,12268
     4a8:	0002af80 	call	2af8 <alt_putstr>



	return 0;
}
     4ac:	0005883a 	mov	r2,zero
     4b0:	dfc00417 	ldw	ra,16(sp)
     4b4:	dec00504 	addi	sp,sp,20
     4b8:	f800283a 	ret

000004bc <vPortSysTickHandler>:
	IOWR_ALTERA_AVALON_TIMER_STATUS( TIMER_0_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK );
}
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void * context, alt_u32 id )
{
     4bc:	deffff04 	addi	sp,sp,-4
     4c0:	dfc00015 	stw	ra,0(sp)
	/* Increment the kernel tick. */
	if( xTaskIncrementTick() != pdFALSE )
     4c4:	00012f00 	call	12f0 <xTaskIncrementTick>
     4c8:	10000126 	beq	r2,zero,4d0 <vPortSysTickHandler+0x14>
	{
        vTaskSwitchContext();
     4cc:	000144c0 	call	144c <vTaskSwitchContext>
	}

	/* Clear the interrupt. */
	IOWR_ALTERA_AVALON_TIMER_STATUS( TIMER_0_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK );
     4d0:	00800074 	movhi	r2,1
     4d4:	108c0004 	addi	r2,r2,12288
     4d8:	00ffff84 	movi	r3,-2
     4dc:	10c00035 	stwio	r3,0(r2)
}
     4e0:	dfc00017 	ldw	ra,0(sp)
     4e4:	dec00104 	addi	sp,sp,4
     4e8:	f800283a 	ret

000004ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
     4ec:	deffff04 	addi	sp,sp,-4

/*-----------------------------------------------------------*/

static void prvReadGp( uint32_t *ulValue )
{
	asm( "stw gp, (%0)" :: "r"(ulValue) );
     4f0:	de800015 	stw	gp,0(sp)
StackType_t xGlobalPointer;

    prvReadGp( &xGlobalPointer );

    /* End of stack marker. */
    *pxTopOfStack = 0xdeadbeef;
     4f4:	00b7abb4 	movhi	r2,57006
     4f8:	10afbbc4 	addi	r2,r2,-16657
     4fc:	20800015 	stw	r2,0(r4)
/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
StackType_t *pxFramePointer = pxTopOfStack - 1;
     500:	20bfff04 	addi	r2,r4,-4

    /* End of stack marker. */
    *pxTopOfStack = 0xdeadbeef;
    pxTopOfStack--;

    *pxTopOfStack = ( StackType_t ) pxFramePointer;
     504:	20bfff15 	stw	r2,-4(r4)
    pxTopOfStack--;

    *pxTopOfStack = xGlobalPointer;
     508:	d8800017 	ldw	r2,0(sp)

    /* Space for R23 to R16. */
    pxTopOfStack -= 9;

    *pxTopOfStack = ( StackType_t ) pxCode;
     50c:	217ff515 	stw	r5,-44(r4)
    *pxTopOfStack = portINITIAL_ESTATUS;

    /* Space for R15 to R5. */
    pxTopOfStack -= 12;

    *pxTopOfStack = ( StackType_t ) pvParameters;
     510:	21bfe815 	stw	r6,-96(r4)
    pxTopOfStack--;

    *pxTopOfStack = ( StackType_t ) pxFramePointer;
    pxTopOfStack--;

    *pxTopOfStack = xGlobalPointer;
     514:	20bffe15 	stw	r2,-8(r4)
    pxTopOfStack -= 9;

    *pxTopOfStack = ( StackType_t ) pxCode;
    pxTopOfStack--;

    *pxTopOfStack = portINITIAL_ESTATUS;
     518:	00800044 	movi	r2,1
     51c:	20bff415 	stw	r2,-48(r4)

    /* Space for R3 to R1, muldiv and RA. */
    pxTopOfStack -= 5;

    return pxTopOfStack;
}
     520:	20bfe304 	addi	r2,r4,-116
     524:	dec00104 	addi	sp,sp,4
     528:	f800283a 	ret

0000052c <vPortEndScheduler>:
	return 0;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     52c:	f800283a 	ret

00000530 <alt_irq_register>:
int alt_irq_register( alt_u32 id, void* context, void (*handler)(void*, alt_u32) )
{
	int rc = -EINVAL;
	alt_irq_context status;

	if (id < ALT_NIRQ)
     530:	008007c4 	movi	r2,31
     534:	11002236 	bltu	r2,r4,5c0 <alt_irq_register+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     538:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     53c:	00ffff84 	movi	r3,-2
     540:	10c4703a 	and	r2,r2,r3
     544:	1001703a 	wrctl	status,r2
		 * state.
		 */

		status = alt_irq_disable_all ();

		alt_irq[id].handler = handler;
     548:	200490fa 	slli	r2,r4,3
     54c:	01c00034 	movhi	r7,0
     550:	39d53f04 	addi	r7,r7,21756
     554:	3885883a 	add	r2,r7,r2
		alt_irq[id].context = context;
     558:	11400115 	stw	r5,4(r2)
		 * state.
		 */

		status = alt_irq_disable_all ();

		alt_irq[id].handler = handler;
     55c:	11800015 	stw	r6,0(r2)
     560:	01400034 	movhi	r5,0
     564:	294c3804 	addi	r5,r5,12512
     568:	00800044 	movi	r2,1
		alt_irq[id].context = context;

		rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
     56c:	30000726 	beq	r6,zero,58c <alt_irq_register+0x5c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     570:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     574:	30c6703a 	and	r3,r6,r3
     578:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
     57c:	28c00017 	ldw	r3,0(r5)
     580:	1104983a 	sll	r2,r2,r4
     584:	10c4b03a 	or	r2,r2,r3
     588:	00000706 	br	5a8 <alt_irq_register+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     58c:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     590:	30c6703a 	and	r3,r6,r3
     594:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
     598:	1104983a 	sll	r2,r2,r4
     59c:	28c00017 	ldw	r3,0(r5)
     5a0:	0084303a 	nor	r2,zero,r2
     5a4:	10c4703a 	and	r2,r2,r3
     5a8:	28800015 	stw	r2,0(r5)
  NIOS2_WRITE_IENABLE (alt_irq_active);
     5ac:	28800017 	ldw	r2,0(r5)
     5b0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     5b4:	3001703a 	wrctl	status,r6
     5b8:	0005883a 	mov	r2,zero
     5bc:	f800283a 	ret
 * kernel has its scheduler started so that contexts are saved and switched
 * correctly.
 */
int alt_irq_register( alt_u32 id, void* context, void (*handler)(void*, alt_u32) )
{
	int rc = -EINVAL;
     5c0:	00bffa84 	movi	r2,-22

		/* alt_irq_enable_all(status); This line is removed to prevent the interrupt from being immediately enabled. */
	}

	return rc;
}
     5c4:	f800283a 	ret

000005c8 <xPortStartScheduler>:
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Try to register the interrupt handler. */
	if ( -EINVAL == alt_irq_register( TIMER_0_IRQ, 0x0, vPortSysTickHandler ) )
     5c8:	01800034 	movhi	r6,0

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
     5cc:	deffff04 	addi	sp,sp,-4
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Try to register the interrupt handler. */
	if ( -EINVAL == alt_irq_register( TIMER_0_IRQ, 0x0, vPortSysTickHandler ) )
     5d0:	01000044 	movi	r4,1
     5d4:	000b883a 	mov	r5,zero
     5d8:	31812f04 	addi	r6,r6,1212

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
     5dc:	dfc00015 	stw	ra,0(sp)
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Try to register the interrupt handler. */
	if ( -EINVAL == alt_irq_register( TIMER_0_IRQ, 0x0, vPortSysTickHandler ) )
     5e0:	00005300 	call	530 <alt_irq_register>
     5e4:	00fffa84 	movi	r3,-22
     5e8:	10c0021e 	bne	r2,r3,5f4 <xPortStartScheduler+0x2c>
	{
		/* Failed to install the Interrupt Handler. */
		asm( "break" );
     5ec:	003da03a 	break	0
     5f0:	00000d06 	br	628 <xPortStartScheduler+0x60>
	}
	else
	{
		/* Configure SysTick to interrupt at the requested rate. */
		IOWR_ALTERA_AVALON_TIMER_CONTROL( TIMER_0_BASE, ALTERA_AVALON_TIMER_CONTROL_STOP_MSK );
     5f4:	00800074 	movhi	r2,1
     5f8:	108c0104 	addi	r2,r2,12292
     5fc:	00c00204 	movi	r3,8
     600:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_PERIODL( TIMER_0_BASE, ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) & 0xFFFF );
     604:	00c00074 	movhi	r3,1
     608:	18cc0204 	addi	r3,r3,12296
     60c:	0130d414 	movui	r4,50000
     610:	19000035 	stwio	r4,0(r3)
		IOWR_ALTERA_AVALON_TIMER_PERIODH( TIMER_0_BASE, ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) >> 16 );
     614:	00c00074 	movhi	r3,1
     618:	18cc0304 	addi	r3,r3,12300
     61c:	18000035 	stwio	zero,0(r3)
		IOWR_ALTERA_AVALON_TIMER_CONTROL( TIMER_0_BASE, ALTERA_AVALON_TIMER_CONTROL_CONT_MSK | ALTERA_AVALON_TIMER_CONTROL_START_MSK | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK );
     620:	00c001c4 	movi	r3,7
     624:	10c00035 	stwio	r3,0(r2)
	}

	/* Clear any already pending interrupts generated by the Timer. */
	IOWR_ALTERA_AVALON_TIMER_STATUS( TIMER_0_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK );
     628:	00800074 	movhi	r2,1
     62c:	108c0004 	addi	r2,r2,12288
     630:	00ffff84 	movi	r3,-2
     634:	10c00035 	stwio	r3,0(r2)
     638:	00800034 	movhi	r2,0
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();

	/* Start the first task. */
    asm volatile (  " movia r2, restore_sp_from_pxCurrentTCB        \n"
     63c:	10803104 	addi	r2,r2,196
     640:	1000683a 	jmp	r2
                    " jmp r2                                          " );

	/* Should not get here! */
	return 0;
}
     644:	0005883a 	mov	r2,zero
     648:	dfc00017 	ldw	ra,0(sp)
     64c:	dec00104 	addi	sp,sp,4
     650:	f800283a 	ret

00000654 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     654:	defffd04 	addi	sp,sp,-12
     658:	dc000015 	stw	r16,0(sp)
     65c:	dfc00215 	stw	ra,8(sp)
     660:	dc400115 	stw	r17,4(sp)
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
     664:	208000cc 	andi	r2,r4,3
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     668:	2021883a 	mov	r16,r4
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
     66c:	10000326 	beq	r2,zero,67c <pvPortMalloc+0x28>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
     670:	013fff04 	movi	r4,-4
     674:	8120703a 	and	r16,r16,r4
     678:	84000104 	addi	r16,r16,4
		}
	#endif

	vTaskSuspendAll();
     67c:	00012c80 	call	12c8 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     680:	d0a00f17 	ldw	r2,-32708(gp)
     684:	1000051e 	bne	r2,zero,69c <pvPortMalloc+0x48>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     688:	00c00034 	movhi	r3,0
     68c:	00bfff04 	movi	r2,-4
     690:	18cc3e04 	addi	r3,r3,12536
     694:	1884703a 	and	r2,r3,r2
     698:	d0a00f15 	stw	r2,-32708(gp)
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     69c:	d0a01017 	ldw	r2,-32704(gp)
     6a0:	00c8cec4 	movi	r3,9019
     6a4:	80a1883a 	add	r16,r16,r2
     6a8:	1c000536 	bltu	r3,r16,6c0 <pvPortMalloc+0x6c>
     6ac:	1400042e 	bgeu	r2,r16,6c0 <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     6b0:	d4600f17 	ldw	r17,-32708(gp)
			xNextFreeByte += xWantedSize;
     6b4:	d4201015 	stw	r16,-32704(gp)
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     6b8:	88a3883a 	add	r17,r17,r2
     6bc:	00000106 	br	6c4 <pvPortMalloc+0x70>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
     6c0:	0023883a 	mov	r17,zero
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     6c4:	0001fb00 	call	1fb0 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     6c8:	8805883a 	mov	r2,r17
     6cc:	dfc00217 	ldw	ra,8(sp)
     6d0:	dc400117 	ldw	r17,4(sp)
     6d4:	dc000017 	ldw	r16,0(sp)
     6d8:	dec00304 	addi	sp,sp,12
     6dc:	f800283a 	ret

000006e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     6e0:	f800283a 	ret

000006e4 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
     6e4:	d0201015 	stw	zero,-32704(gp)
     6e8:	f800283a 	ret

000006ec <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
}
     6ec:	d0a01017 	ldw	r2,-32704(gp)
     6f0:	00c8cf04 	movi	r3,9020
     6f4:	1885c83a 	sub	r2,r3,r2
     6f8:	f800283a 	ret

000006fc <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
     6fc:	defffd04 	addi	sp,sp,-12
     700:	dc400115 	stw	r17,4(sp)
     704:	3023883a 	mov	r17,r6
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
     708:	21801017 	ldw	r6,64(r4)

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
     70c:	dc000015 	stw	r16,0(sp)
     710:	dfc00215 	stw	ra,8(sp)
     714:	2021883a 	mov	r16,r4
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
     718:	3000061e 	bne	r6,zero,734 <prvCopyDataToQueue+0x38>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     71c:	20800017 	ldw	r2,0(r4)
     720:	1000231e 	bne	r2,zero,7b0 <prvCopyDataToQueue+0xb4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
     724:	21000117 	ldw	r4,4(r4)
     728:	00018580 	call	1858 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
     72c:	80000115 	stw	zero,4(r16)
     730:	00002006 	br	7b4 <prvCopyDataToQueue+0xb8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
     734:	88000b1e 	bne	r17,zero,764 <prvCopyDataToQueue+0x68>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
     738:	21000217 	ldw	r4,8(r4)
     73c:	00027d80 	call	27d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     740:	80c00217 	ldw	r3,8(r16)
     744:	80801017 	ldw	r2,64(r16)
     748:	1885883a 	add	r2,r3,r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     74c:	80c00117 	ldw	r3,4(r16)
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     750:	80800215 	stw	r2,8(r16)
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     754:	10c01636 	bltu	r2,r3,7b0 <prvCopyDataToQueue+0xb4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
     758:	80800017 	ldw	r2,0(r16)
     75c:	80800215 	stw	r2,8(r16)
     760:	00001306 	br	7b0 <prvCopyDataToQueue+0xb4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     764:	21000317 	ldw	r4,12(r4)
     768:	00027d80 	call	27d8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
     76c:	80801017 	ldw	r2,64(r16)
     770:	80c00317 	ldw	r3,12(r16)
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     774:	81000017 	ldw	r4,0(r16)
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
     778:	0085c83a 	sub	r2,zero,r2
     77c:	1887883a 	add	r3,r3,r2
     780:	80c00315 	stw	r3,12(r16)
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     784:	1900032e 	bgeu	r3,r4,794 <prvCopyDataToQueue+0x98>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
     788:	80c00117 	ldw	r3,4(r16)
     78c:	1885883a 	add	r2,r3,r2
     790:	80800315 	stw	r2,12(r16)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
     794:	00800084 	movi	r2,2
     798:	8880051e 	bne	r17,r2,7b0 <prvCopyDataToQueue+0xb4>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
     79c:	80800e17 	ldw	r2,56(r16)
     7a0:	10000326 	beq	r2,zero,7b0 <prvCopyDataToQueue+0xb4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
     7a4:	80800e17 	ldw	r2,56(r16)
     7a8:	10bfffc4 	addi	r2,r2,-1
     7ac:	80800e15 	stw	r2,56(r16)
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
     7b0:	0005883a 	mov	r2,zero
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
     7b4:	80c00e17 	ldw	r3,56(r16)
     7b8:	18c00044 	addi	r3,r3,1
     7bc:	80c00e15 	stw	r3,56(r16)

	return xReturn;
}
     7c0:	dfc00217 	ldw	ra,8(sp)
     7c4:	dc400117 	ldw	r17,4(sp)
     7c8:	dc000017 	ldw	r16,0(sp)
     7cc:	dec00304 	addi	sp,sp,12
     7d0:	f800283a 	ret

000007d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
     7d4:	2005883a 	mov	r2,r4
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
     7d8:	11801017 	ldw	r6,64(r2)
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
     7dc:	2809883a 	mov	r4,r5
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
     7e0:	30000926 	beq	r6,zero,808 <prvCopyDataFromQueue+0x34>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
     7e4:	10c00317 	ldw	r3,12(r2)
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
     7e8:	11400117 	ldw	r5,4(r2)

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
     7ec:	1987883a 	add	r3,r3,r6
     7f0:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
     7f4:	19400236 	bltu	r3,r5,800 <prvCopyDataFromQueue+0x2c>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
     7f8:	10c00017 	ldw	r3,0(r2)
     7fc:	10c00315 	stw	r3,12(r2)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
     800:	11400317 	ldw	r5,12(r2)
     804:	00027d81 	jmpi	27d8 <memcpy>
     808:	f800283a 	ret

0000080c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
     80c:	defffd04 	addi	sp,sp,-12
     810:	dc000015 	stw	r16,0(sp)
     814:	2021883a 	mov	r16,r4
     818:	dc400115 	stw	r17,4(sp)
     81c:	dfc00215 	stw	ra,8(sp)
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     820:	84400904 	addi	r17,r16,36

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
     824:	00018f40 	call	18f4 <vTaskEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
     828:	80801217 	ldw	r2,72(r16)
     82c:	00800a0e 	bge	zero,r2,858 <prvUnlockQueue+0x4c>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     830:	80800917 	ldw	r2,36(r16)
     834:	10000826 	beq	r2,zero,858 <prvUnlockQueue+0x4c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     838:	8809883a 	mov	r4,r17
     83c:	00015f00 	call	15f0 <xTaskRemoveFromEventList>
     840:	10000126 	beq	r2,zero,848 <prvUnlockQueue+0x3c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
     844:	00017340 	call	1734 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
     848:	80801217 	ldw	r2,72(r16)
     84c:	10bfffc4 	addi	r2,r2,-1
     850:	80801215 	stw	r2,72(r16)
     854:	003ff406 	br	828 <prvUnlockQueue+0x1c>
		}

		pxQueue->xTxLock = queueUNLOCKED;
     858:	00bfffc4 	movi	r2,-1
     85c:	80801215 	stw	r2,72(r16)
	}
	taskEXIT_CRITICAL();
     860:	00019240 	call	1924 <vTaskExitCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     864:	84400404 	addi	r17,r16,16
		pxQueue->xTxLock = queueUNLOCKED;
	}
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
     868:	00018f40 	call	18f4 <vTaskEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
     86c:	80801117 	ldw	r2,68(r16)
     870:	00800a0e 	bge	zero,r2,89c <prvUnlockQueue+0x90>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     874:	80800417 	ldw	r2,16(r16)
     878:	10000826 	beq	r2,zero,89c <prvUnlockQueue+0x90>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     87c:	8809883a 	mov	r4,r17
     880:	00015f00 	call	15f0 <xTaskRemoveFromEventList>
     884:	10000126 	beq	r2,zero,88c <prvUnlockQueue+0x80>
				{
					vTaskMissedYield();
     888:	00017340 	call	1734 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
     88c:	80801117 	ldw	r2,68(r16)
     890:	10bfffc4 	addi	r2,r2,-1
     894:	80801115 	stw	r2,68(r16)
     898:	003ff406 	br	86c <prvUnlockQueue+0x60>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
     89c:	00bfffc4 	movi	r2,-1
     8a0:	80801115 	stw	r2,68(r16)
	}
	taskEXIT_CRITICAL();
}
     8a4:	dfc00217 	ldw	ra,8(sp)
     8a8:	dc400117 	ldw	r17,4(sp)
     8ac:	dc000017 	ldw	r16,0(sp)
     8b0:	dec00304 	addi	sp,sp,12
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
	}
	taskEXIT_CRITICAL();
     8b4:	00019241 	jmpi	1924 <vTaskExitCritical>

000008b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
     8b8:	defffb04 	addi	sp,sp,-20
     8bc:	dc000015 	stw	r16,0(sp)
     8c0:	2021883a 	mov	r16,r4
     8c4:	dfc00415 	stw	ra,16(sp)
     8c8:	dcc00315 	stw	r19,12(sp)
     8cc:	dc800215 	stw	r18,8(sp)
     8d0:	dc400115 	stw	r17,4(sp)
     8d4:	2827883a 	mov	r19,r5
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
     8d8:	00018f40 	call	18f4 <vTaskEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     8dc:	84801017 	ldw	r18,64(r16)
     8e0:	81400f17 	ldw	r5,60(r16)
     8e4:	84400017 	ldw	r17,0(r16)
     8e8:	9009883a 	mov	r4,r18
     8ec:	00027b00 	call	27b0 <__mulsi3>
     8f0:	8887883a 	add	r3,r17,r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
     8f4:	1485c83a 	sub	r2,r2,r18
     8f8:	8885883a 	add	r2,r17,r2
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
     8fc:	80000e15 	stw	zero,56(r16)
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
     900:	80800315 	stw	r2,12(r16)
		pxQueue->xRxLock = queueUNLOCKED;
     904:	00bfffc4 	movi	r2,-1
     908:	80801115 	stw	r2,68(r16)

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     90c:	80c00115 	stw	r3,4(r16)
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
     910:	84400215 	stw	r17,8(r16)
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
		pxQueue->xTxLock = queueUNLOCKED;
     914:	80801215 	stw	r2,72(r16)

		if( xNewQueue == pdFALSE )
     918:	9800081e 	bne	r19,zero,93c <xQueueGenericReset+0x84>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     91c:	80800417 	ldw	r2,16(r16)
     920:	10000a26 	beq	r2,zero,94c <xQueueGenericReset+0x94>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
     924:	81000404 	addi	r4,r16,16
     928:	00015f00 	call	15f0 <xTaskRemoveFromEventList>
     92c:	00c00044 	movi	r3,1
     930:	10c0061e 	bne	r2,r3,94c <xQueueGenericReset+0x94>
				{
					queueYIELD_IF_USING_PREEMPTION();
     934:	003b683a 	trap	0
     938:	00000406 	br	94c <xQueueGenericReset+0x94>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
     93c:	81000404 	addi	r4,r16,16
     940:	000026c0 	call	26c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
     944:	81000904 	addi	r4,r16,36
     948:	000026c0 	call	26c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
     94c:	00019240 	call	1924 <vTaskExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
     950:	00800044 	movi	r2,1
     954:	dfc00417 	ldw	ra,16(sp)
     958:	dcc00317 	ldw	r19,12(sp)
     95c:	dc800217 	ldw	r18,8(sp)
     960:	dc400117 	ldw	r17,4(sp)
     964:	dc000017 	ldw	r16,0(sp)
     968:	dec00504 	addi	sp,sp,20
     96c:	f800283a 	ret

00000970 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
     970:	defffc04 	addi	sp,sp,-16
     974:	dc800215 	stw	r18,8(sp)
     978:	dc400115 	stw	r17,4(sp)
     97c:	dfc00315 	stw	ra,12(sp)
     980:	dc000015 	stw	r16,0(sp)
     984:	2025883a 	mov	r18,r4
     988:	2823883a 	mov	r17,r5
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

	if( uxItemSize == ( UBaseType_t ) 0 )
     98c:	28000526 	beq	r5,zero,9a4 <xQueueGenericCreate+0x34>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     990:	2809883a 	mov	r4,r5
     994:	900b883a 	mov	r5,r18
     998:	00027b00 	call	27b0 <__mulsi3>
     99c:	10800044 	addi	r2,r2,1
     9a0:	00000106 	br	9a8 <xQueueGenericCreate+0x38>
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

	if( uxItemSize == ( UBaseType_t ) 0 )
	{
		/* There is not going to be a queue storage area. */
		xQueueSizeInBytes = ( size_t ) 0;
     9a4:	0005883a 	mov	r2,zero
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
     9a8:	11001304 	addi	r4,r2,76
     9ac:	00006540 	call	654 <pvPortMalloc>
     9b0:	1021883a 	mov	r16,r2

	if( pxNewQueue != NULL )
     9b4:	10000a26 	beq	r2,zero,9e0 <xQueueGenericCreate+0x70>
	{
		if( uxItemSize == ( UBaseType_t ) 0 )
     9b8:	8800021e 	bne	r17,zero,9c4 <xQueueGenericCreate+0x54>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
     9bc:	80800015 	stw	r2,0(r16)
     9c0:	00000206 	br	9cc <xQueueGenericCreate+0x5c>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
     9c4:	10801304 	addi	r2,r2,76
     9c8:	80800015 	stw	r2,0(r16)
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
     9cc:	84800f15 	stw	r18,60(r16)
		pxNewQueue->uxItemSize = uxItemSize;
     9d0:	84401015 	stw	r17,64(r16)
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
     9d4:	8009883a 	mov	r4,r16
     9d8:	01400044 	movi	r5,1
     9dc:	00008b80 	call	8b8 <xQueueGenericReset>
	}

	configASSERT( xReturn );

	return xReturn;
}
     9e0:	8005883a 	mov	r2,r16
     9e4:	dfc00317 	ldw	ra,12(sp)
     9e8:	dc800217 	ldw	r18,8(sp)
     9ec:	dc400117 	ldw	r17,4(sp)
     9f0:	dc000017 	ldw	r16,0(sp)
     9f4:	dec00404 	addi	sp,sp,16
     9f8:	f800283a 	ret

000009fc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if ( configUSE_COUNTING_SEMAPHORES == 1 )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
     9fc:	defffe04 	addi	sp,sp,-8
     a00:	dc000015 	stw	r16,0(sp)
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
     a04:	01800084 	movi	r6,2
/*-----------------------------------------------------------*/

#if ( configUSE_COUNTING_SEMAPHORES == 1 )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
     a08:	2821883a 	mov	r16,r5
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
     a0c:	000b883a 	mov	r5,zero
/*-----------------------------------------------------------*/

#if ( configUSE_COUNTING_SEMAPHORES == 1 )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
     a10:	dfc00115 	stw	ra,4(sp)
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
     a14:	00009700 	call	970 <xQueueGenericCreate>

		if( xHandle != NULL )
     a18:	10000126 	beq	r2,zero,a20 <xQueueCreateCountingSemaphore+0x24>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
     a1c:	14000e15 	stw	r16,56(r2)
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( xHandle );
		return xHandle;
	}
     a20:	dfc00117 	ldw	ra,4(sp)
     a24:	dc000017 	ldw	r16,0(sp)
     a28:	dec00204 	addi	sp,sp,8
     a2c:	f800283a 	ret

00000a30 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
     a30:	defff404 	addi	sp,sp,-48
     a34:	dd800915 	stw	r22,36(sp)
     a38:	dd400815 	stw	r21,32(sp)
     a3c:	dd000715 	stw	r20,28(sp)
     a40:	dcc00615 	stw	r19,24(sp)
     a44:	dc800515 	stw	r18,20(sp)
     a48:	dc400415 	stw	r17,16(sp)
     a4c:	dc000315 	stw	r16,12(sp)
     a50:	dfc00b15 	stw	ra,44(sp)
     a54:	ddc00a15 	stw	r23,40(sp)
     a58:	2021883a 	mov	r16,r4
     a5c:	2829883a 	mov	r20,r5
     a60:	d9800215 	stw	r6,8(sp)
     a64:	3823883a 	mov	r17,r7
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
     a68:	0027883a 	mov	r19,zero
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     a6c:	05400084 	movi	r21,2

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
     a70:	04bfffc4 	movi	r18,-1
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
     a74:	25800404 	addi	r22,r4,16
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
     a78:	00018f40 	call	18f4 <vTaskEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     a7c:	80c00e17 	ldw	r3,56(r16)
     a80:	80800f17 	ldw	r2,60(r16)
     a84:	18800136 	bltu	r3,r2,a8c <xQueueGenericSend+0x5c>
     a88:	8d40101e 	bne	r17,r21,acc <xQueueGenericSend+0x9c>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     a8c:	8009883a 	mov	r4,r16
     a90:	a00b883a 	mov	r5,r20
     a94:	880d883a 	mov	r6,r17
     a98:	00006fc0 	call	6fc <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     a9c:	80c00917 	ldw	r3,36(r16)
     aa0:	18000526 	beq	r3,zero,ab8 <xQueueGenericSend+0x88>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
     aa4:	81000904 	addi	r4,r16,36
     aa8:	00015f00 	call	15f0 <xTaskRemoveFromEventList>
     aac:	00c00044 	movi	r3,1
     ab0:	10c0031e 	bne	r2,r3,ac0 <xQueueGenericSend+0x90>
     ab4:	00000106 	br	abc <xQueueGenericSend+0x8c>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
     ab8:	10000126 	beq	r2,zero,ac0 <xQueueGenericSend+0x90>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
     abc:	003b683a 	trap	0
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
     ac0:	00019240 	call	1924 <vTaskExitCritical>
				return pdPASS;
     ac4:	00800044 	movi	r2,1
     ac8:	00002d06 	br	b80 <xQueueGenericSend+0x150>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
     acc:	d8800217 	ldw	r2,8(sp)
     ad0:	1000021e 	bne	r2,zero,adc <xQueueGenericSend+0xac>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
     ad4:	00019240 	call	1924 <vTaskExitCritical>
     ad8:	00002806 	br	b7c <xQueueGenericSend+0x14c>
					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
				}
				else if( xEntryTimeSet == pdFALSE )
     adc:	9800021e 	bne	r19,zero,ae8 <xQueueGenericSend+0xb8>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
     ae0:	d809883a 	mov	r4,sp
     ae4:	00017200 	call	1720 <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
     ae8:	00019240 	call	1924 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
     aec:	00012c80 	call	12c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
     af0:	00018f40 	call	18f4 <vTaskEnterCritical>
     af4:	80801117 	ldw	r2,68(r16)
     af8:	1480011e 	bne	r2,r18,b00 <xQueueGenericSend+0xd0>
     afc:	80001115 	stw	zero,68(r16)
     b00:	80801217 	ldw	r2,72(r16)
     b04:	1480011e 	bne	r2,r18,b0c <xQueueGenericSend+0xdc>
     b08:	80001215 	stw	zero,72(r16)
     b0c:	00019240 	call	1924 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     b10:	d809883a 	mov	r4,sp
     b14:	d9400204 	addi	r5,sp,8
     b18:	00022300 	call	2230 <xTaskCheckForTimeOut>
     b1c:	1000141e 	bne	r2,zero,b70 <xQueueGenericSend+0x140>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
     b20:	00018f40 	call	18f4 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
     b24:	85c00e17 	ldw	r23,56(r16)
     b28:	84c00f17 	ldw	r19,60(r16)
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
     b2c:	00019240 	call	1924 <vTaskExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
     b30:	bcc00b1e 	bne	r23,r19,b60 <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
     b34:	d9400217 	ldw	r5,8(sp)
     b38:	b009883a 	mov	r4,r22
     b3c:	00015140 	call	1514 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
     b40:	8009883a 	mov	r4,r16
     b44:	000080c0 	call	80c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
     b48:	0001fb00 	call	1fb0 <xTaskResumeAll>
     b4c:	10000226 	beq	r2,zero,b58 <xQueueGenericSend+0x128>
     b50:	04c00044 	movi	r19,1
     b54:	003fc806 	br	a78 <xQueueGenericSend+0x48>
				{
					portYIELD_WITHIN_API();
     b58:	003b683a 	trap	0
     b5c:	003ffc06 	br	b50 <xQueueGenericSend+0x120>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
     b60:	8009883a 	mov	r4,r16
     b64:	000080c0 	call	80c <prvUnlockQueue>
				( void ) xTaskResumeAll();
     b68:	0001fb00 	call	1fb0 <xTaskResumeAll>
     b6c:	003ff806 	br	b50 <xQueueGenericSend+0x120>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
     b70:	8009883a 	mov	r4,r16
     b74:	000080c0 	call	80c <prvUnlockQueue>
			( void ) xTaskResumeAll();
     b78:	0001fb00 	call	1fb0 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
     b7c:	0005883a 	mov	r2,zero
		}
	}
}
     b80:	dfc00b17 	ldw	ra,44(sp)
     b84:	ddc00a17 	ldw	r23,40(sp)
     b88:	dd800917 	ldw	r22,36(sp)
     b8c:	dd400817 	ldw	r21,32(sp)
     b90:	dd000717 	ldw	r20,28(sp)
     b94:	dcc00617 	ldw	r19,24(sp)
     b98:	dc800517 	ldw	r18,20(sp)
     b9c:	dc400417 	ldw	r17,16(sp)
     ba0:	dc000317 	ldw	r16,12(sp)
     ba4:	dec00c04 	addi	sp,sp,48
     ba8:	f800283a 	ret

00000bac <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
     bac:	defffe04 	addi	sp,sp,-8
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
     bb0:	01001304 	movi	r4,76
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
     bb4:	dc000015 	stw	r16,0(sp)
     bb8:	dfc00115 	stw	ra,4(sp)
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
     bbc:	00006540 	call	654 <pvPortMalloc>
     bc0:	1021883a 	mov	r16,r2
		if( pxNewQueue != NULL )
     bc4:	10001426 	beq	r2,zero,c18 <xQueueCreateMutex+0x6c>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
     bc8:	10000115 	stw	zero,4(r2)
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
     bcc:	10000015 	stw	zero,0(r2)

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
     bd0:	10000215 	stw	zero,8(r2)
			pxNewQueue->u.pcReadFrom = NULL;
     bd4:	10000315 	stw	zero,12(r2)

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
     bd8:	10000e15 	stw	zero,56(r2)
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
     bdc:	00800044 	movi	r2,1
     be0:	80800f15 	stw	r2,60(r16)
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
			pxNewQueue->xRxLock = queueUNLOCKED;
     be4:	00bfffc4 	movi	r2,-1
     be8:	80801115 	stw	r2,68(r16)
			pxNewQueue->xTxLock = queueUNLOCKED;
     bec:	80801215 	stw	r2,72(r16)
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
     bf0:	81000404 	addi	r4,r16,16
			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
     bf4:	80001015 	stw	zero,64(r16)
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
     bf8:	000026c0 	call	26c <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
     bfc:	81000904 	addi	r4,r16,36
     c00:	000026c0 	call	26c <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
     c04:	8009883a 	mov	r4,r16
     c08:	000b883a 	mov	r5,zero
     c0c:	000d883a 	mov	r6,zero
     c10:	000f883a 	mov	r7,zero
     c14:	0000a300 	call	a30 <xQueueGenericSend>
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
	}
     c18:	8005883a 	mov	r2,r16
     c1c:	dfc00117 	ldw	ra,4(sp)
     c20:	dc000017 	ldw	r16,0(sp)
     c24:	dec00204 	addi	sp,sp,8
     c28:	f800283a 	ret

00000c2c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
     c2c:	defffd04 	addi	sp,sp,-12
     c30:	dc000115 	stw	r16,4(sp)
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
     c34:	24000117 	ldw	r16,4(r4)
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
     c38:	dfc00215 	stw	ra,8(sp)
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
     c3c:	d9000015 	stw	r4,0(sp)
     c40:	00017740 	call	1774 <xTaskGetCurrentTaskHandle>
     c44:	d9000017 	ldw	r4,0(sp)
     c48:	8080091e 	bne	r16,r2,c70 <xQueueGiveMutexRecursive+0x44>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
     c4c:	20800317 	ldw	r2,12(r4)
     c50:	10bfffc4 	addi	r2,r2,-1
     c54:	20800315 	stw	r2,12(r4)

			/* Have we unwound the call count? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
     c58:	1000071e 	bne	r2,zero,c78 <xQueueGiveMutexRecursive+0x4c>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
     c5c:	000b883a 	mov	r5,zero
     c60:	000d883a 	mov	r6,zero
     c64:	000f883a 	mov	r7,zero
     c68:	0000a300 	call	a30 <xQueueGenericSend>
     c6c:	00000206 	br	c78 <xQueueGiveMutexRecursive+0x4c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
     c70:	0005883a 	mov	r2,zero
     c74:	00000106 	br	c7c <xQueueGiveMutexRecursive+0x50>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
     c78:	00800044 	movi	r2,1

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
	}
     c7c:	dfc00217 	ldw	ra,8(sp)
     c80:	dc000117 	ldw	r16,4(sp)
     c84:	dec00304 	addi	sp,sp,12
     c88:	f800283a 	ret

00000c8c <xQueueGenericSendFromISR>:
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     c8c:	20c00e17 	ldw	r3,56(r4)
     c90:	20800f17 	ldw	r2,60(r4)

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
     c94:	defffd04 	addi	sp,sp,-12
     c98:	dfc00215 	stw	ra,8(sp)
     c9c:	dc400115 	stw	r17,4(sp)
     ca0:	dc000015 	stw	r16,0(sp)
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     ca4:	18800236 	bltu	r3,r2,cb0 <xQueueGenericSendFromISR+0x24>
     ca8:	00800084 	movi	r2,2
     cac:	3880151e 	bne	r7,r2,d04 <xQueueGenericSendFromISR+0x78>
     cb0:	3023883a 	mov	r17,r6
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     cb4:	380d883a 	mov	r6,r7
     cb8:	2021883a 	mov	r16,r4
     cbc:	00006fc0 	call	6fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
     cc0:	80c01217 	ldw	r3,72(r16)
     cc4:	00bfffc4 	movi	r2,-1
     cc8:	1880091e 	bne	r3,r2,cf0 <xQueueGenericSendFromISR+0x64>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     ccc:	80800917 	ldw	r2,36(r16)
     cd0:	10000a26 	beq	r2,zero,cfc <xQueueGenericSendFromISR+0x70>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     cd4:	81000904 	addi	r4,r16,36
     cd8:	00015f00 	call	15f0 <xTaskRemoveFromEventList>
     cdc:	10000726 	beq	r2,zero,cfc <xQueueGenericSendFromISR+0x70>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
     ce0:	88000626 	beq	r17,zero,cfc <xQueueGenericSendFromISR+0x70>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
     ce4:	00800044 	movi	r2,1
     ce8:	88800015 	stw	r2,0(r17)
     cec:	00000606 	br	d08 <xQueueGenericSendFromISR+0x7c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
     cf0:	80801217 	ldw	r2,72(r16)
     cf4:	10800044 	addi	r2,r2,1
     cf8:	80801215 	stw	r2,72(r16)
			}

			xReturn = pdPASS;
     cfc:	00800044 	movi	r2,1
     d00:	00000106 	br	d08 <xQueueGenericSendFromISR+0x7c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
     d04:	0005883a 	mov	r2,zero
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
     d08:	dfc00217 	ldw	ra,8(sp)
     d0c:	dc400117 	ldw	r17,4(sp)
     d10:	dc000017 	ldw	r16,0(sp)
     d14:	dec00304 	addi	sp,sp,12
     d18:	f800283a 	ret

00000d1c <xQueueGiveFromISR>:
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
     d1c:	20c00e17 	ldw	r3,56(r4)
     d20:	20800f17 	ldw	r2,60(r4)
     d24:	1880192e 	bgeu	r3,r2,d8c <xQueueGiveFromISR+0x70>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			++( pxQueue->uxMessagesWaiting );
     d28:	20800e17 	ldw	r2,56(r4)
     d2c:	10800044 	addi	r2,r2,1
     d30:	20800e15 	stw	r2,56(r4)

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
     d34:	20c01217 	ldw	r3,72(r4)
     d38:	00bfffc4 	movi	r2,-1
     d3c:	18800f1e 	bne	r3,r2,d7c <xQueueGiveFromISR+0x60>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     d40:	20800917 	ldw	r2,36(r4)
     d44:	10001726 	beq	r2,zero,da4 <xQueueGiveFromISR+0x88>
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
     d48:	defffe04 	addi	sp,sp,-8
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     d4c:	21000904 	addi	r4,r4,36
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
     d50:	dc000015 	stw	r16,0(sp)
     d54:	dfc00115 	stw	ra,4(sp)
     d58:	2821883a 	mov	r16,r5
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     d5c:	00015f00 	call	15f0 <xTaskRemoveFromEventList>
     d60:	1000021e 	bne	r2,zero,d6c <xQueueGiveFromISR+0x50>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
     d64:	00800044 	movi	r2,1
     d68:	00000a06 	br	d94 <xQueueGiveFromISR+0x78>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
     d6c:	803ffd26 	beq	r16,zero,d64 <xQueueGiveFromISR+0x48>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
     d70:	00800044 	movi	r2,1
     d74:	80800015 	stw	r2,0(r16)
     d78:	00000606 	br	d94 <xQueueGiveFromISR+0x78>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
     d7c:	20801217 	ldw	r2,72(r4)
     d80:	10800044 	addi	r2,r2,1
     d84:	20801215 	stw	r2,72(r4)
     d88:	00000606 	br	da4 <xQueueGiveFromISR+0x88>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
     d8c:	0005883a 	mov	r2,zero
     d90:	f800283a 	ret
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
     d94:	dfc00117 	ldw	ra,4(sp)
     d98:	dc000017 	ldw	r16,0(sp)
     d9c:	dec00204 	addi	sp,sp,8
     da0:	f800283a 	ret
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
     da4:	00800044 	movi	r2,1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
     da8:	f800283a 	ret

00000dac <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
     dac:	defff604 	addi	sp,sp,-40
     db0:	dd400815 	stw	r21,32(sp)
     db4:	dd000715 	stw	r20,28(sp)
     db8:	dcc00615 	stw	r19,24(sp)
     dbc:	dc800515 	stw	r18,20(sp)
     dc0:	dc400415 	stw	r17,16(sp)
     dc4:	dc000315 	stw	r16,12(sp)
     dc8:	dfc00915 	stw	ra,36(sp)
     dcc:	2021883a 	mov	r16,r4
     dd0:	2827883a 	mov	r19,r5
     dd4:	d9800215 	stw	r6,8(sp)
     dd8:	3829883a 	mov	r20,r7
BaseType_t xEntryTimeSet = pdFALSE;
     ddc:	0025883a 	mov	r18,zero

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
     de0:	047fffc4 	movi	r17,-1
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     de4:	25400904 	addi	r21,r4,36
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
     de8:	00018f40 	call	18f4 <vTaskEnterCritical>
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
     dec:	80800e17 	ldw	r2,56(r16)
     df0:	10001d26 	beq	r2,zero,e68 <xQueueGenericReceive+0xbc>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );
     df4:	8009883a 	mov	r4,r16
     df8:	980b883a 	mov	r5,r19
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
     dfc:	84400317 	ldw	r17,12(r16)

				prvCopyDataFromQueue( pxQueue, pvBuffer );
     e00:	00007d40 	call	7d4 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
     e04:	a0000e1e 	bne	r20,zero,e40 <xQueueGenericReceive+0x94>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
     e08:	80800e17 	ldw	r2,56(r16)
     e0c:	10bfffc4 	addi	r2,r2,-1
     e10:	80800e15 	stw	r2,56(r16)

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     e14:	80800017 	ldw	r2,0(r16)
     e18:	1000021e 	bne	r2,zero,e24 <xQueueGenericReceive+0x78>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
     e1c:	00022d40 	call	22d4 <pvTaskIncrementMutexHeldCount>
     e20:	80800115 	stw	r2,4(r16)
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     e24:	80800417 	ldw	r2,16(r16)
     e28:	10000c26 	beq	r2,zero,e5c <xQueueGenericReceive+0xb0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
     e2c:	81000404 	addi	r4,r16,16
     e30:	00015f00 	call	15f0 <xTaskRemoveFromEventList>
     e34:	00c00044 	movi	r3,1
     e38:	10c0081e 	bne	r2,r3,e5c <xQueueGenericReceive+0xb0>
     e3c:	00000606 	br	e58 <xQueueGenericReceive+0xac>
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     e40:	80800917 	ldw	r2,36(r16)
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
     e44:	84400315 	stw	r17,12(r16)

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     e48:	10000426 	beq	r2,zero,e5c <xQueueGenericReceive+0xb0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     e4c:	81000904 	addi	r4,r16,36
     e50:	00015f00 	call	15f0 <xTaskRemoveFromEventList>
     e54:	10000126 	beq	r2,zero,e5c <xQueueGenericReceive+0xb0>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
     e58:	003b683a 	trap	0
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
     e5c:	00019240 	call	1924 <vTaskExitCritical>
				return pdPASS;
     e60:	00800044 	movi	r2,1
     e64:	00003206 	br	f30 <xQueueGenericReceive+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
     e68:	d8800217 	ldw	r2,8(sp)
     e6c:	1000021e 	bne	r2,zero,e78 <xQueueGenericReceive+0xcc>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
     e70:	00019240 	call	1924 <vTaskExitCritical>
     e74:	00002d06 	br	f2c <xQueueGenericReceive+0x180>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
     e78:	9000021e 	bne	r18,zero,e84 <xQueueGenericReceive+0xd8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
     e7c:	d809883a 	mov	r4,sp
     e80:	00017200 	call	1720 <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
     e84:	00019240 	call	1924 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
     e88:	00012c80 	call	12c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
     e8c:	00018f40 	call	18f4 <vTaskEnterCritical>
     e90:	80801117 	ldw	r2,68(r16)
     e94:	1440011e 	bne	r2,r17,e9c <xQueueGenericReceive+0xf0>
     e98:	80001115 	stw	zero,68(r16)
     e9c:	80801217 	ldw	r2,72(r16)
     ea0:	1440011e 	bne	r2,r17,ea8 <xQueueGenericReceive+0xfc>
     ea4:	80001215 	stw	zero,72(r16)
     ea8:	00019240 	call	1924 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     eac:	d809883a 	mov	r4,sp
     eb0:	d9400204 	addi	r5,sp,8
     eb4:	00022300 	call	2230 <xTaskCheckForTimeOut>
     eb8:	1000191e 	bne	r2,zero,f20 <xQueueGenericReceive+0x174>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
     ebc:	00018f40 	call	18f4 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
     ec0:	84800e17 	ldw	r18,56(r16)
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
     ec4:	00019240 	call	1924 <vTaskExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     ec8:	9000111e 	bne	r18,zero,f10 <xQueueGenericReceive+0x164>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     ecc:	80800017 	ldw	r2,0(r16)
     ed0:	1000041e 	bne	r2,zero,ee4 <xQueueGenericReceive+0x138>
					{
						taskENTER_CRITICAL();
     ed4:	00018f40 	call	18f4 <vTaskEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
     ed8:	81000117 	ldw	r4,4(r16)
     edc:	000177c0 	call	177c <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
     ee0:	00019240 	call	1924 <vTaskExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     ee4:	d9400217 	ldw	r5,8(sp)
     ee8:	a809883a 	mov	r4,r21
     eec:	00015140 	call	1514 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
     ef0:	8009883a 	mov	r4,r16
     ef4:	000080c0 	call	80c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
     ef8:	0001fb00 	call	1fb0 <xTaskResumeAll>
     efc:	10000226 	beq	r2,zero,f08 <xQueueGenericReceive+0x15c>
     f00:	04800044 	movi	r18,1
     f04:	003fb806 	br	de8 <xQueueGenericReceive+0x3c>
				{
					portYIELD_WITHIN_API();
     f08:	003b683a 	trap	0
     f0c:	003ffc06 	br	f00 <xQueueGenericReceive+0x154>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
     f10:	8009883a 	mov	r4,r16
     f14:	000080c0 	call	80c <prvUnlockQueue>
				( void ) xTaskResumeAll();
     f18:	0001fb00 	call	1fb0 <xTaskResumeAll>
     f1c:	003ff806 	br	f00 <xQueueGenericReceive+0x154>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
     f20:	8009883a 	mov	r4,r16
     f24:	000080c0 	call	80c <prvUnlockQueue>
			( void ) xTaskResumeAll();
     f28:	0001fb00 	call	1fb0 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
     f2c:	0005883a 	mov	r2,zero
		}
	}
}
     f30:	dfc00917 	ldw	ra,36(sp)
     f34:	dd400817 	ldw	r21,32(sp)
     f38:	dd000717 	ldw	r20,28(sp)
     f3c:	dcc00617 	ldw	r19,24(sp)
     f40:	dc800517 	ldw	r18,20(sp)
     f44:	dc400417 	ldw	r17,16(sp)
     f48:	dc000317 	ldw	r16,12(sp)
     f4c:	dec00a04 	addi	sp,sp,40
     f50:	f800283a 	ret

00000f54 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
     f54:	defffb04 	addi	sp,sp,-20
     f58:	dcc00315 	stw	r19,12(sp)
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
     f5c:	24c00117 	ldw	r19,4(r4)
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
     f60:	dc800215 	stw	r18,8(sp)
     f64:	dc400115 	stw	r17,4(sp)
     f68:	dc000015 	stw	r16,0(sp)
     f6c:	dfc00415 	stw	ra,16(sp)
     f70:	2021883a 	mov	r16,r4
     f74:	2825883a 	mov	r18,r5
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
     f78:	00017740 	call	1774 <xTaskGetCurrentTaskHandle>
     f7c:	04400044 	movi	r17,1
     f80:	9880051e 	bne	r19,r2,f98 <xQueueTakeMutexRecursive+0x44>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
     f84:	80800317 	ldw	r2,12(r16)
     f88:	1445883a 	add	r2,r2,r17
     f8c:	80800315 	stw	r2,12(r16)
			xReturn = pdPASS;
     f90:	8805883a 	mov	r2,r17
     f94:	00000906 	br	fbc <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
     f98:	8009883a 	mov	r4,r16
     f9c:	000b883a 	mov	r5,zero
     fa0:	900d883a 	mov	r6,r18
     fa4:	000f883a 	mov	r7,zero
     fa8:	0000dac0 	call	dac <xQueueGenericReceive>

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn == pdPASS )
     fac:	1440031e 	bne	r2,r17,fbc <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
     fb0:	80c00317 	ldw	r3,12(r16)
     fb4:	18c00044 	addi	r3,r3,1
     fb8:	80c00315 	stw	r3,12(r16)
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
	}
     fbc:	dfc00417 	ldw	ra,16(sp)
     fc0:	dcc00317 	ldw	r19,12(sp)
     fc4:	dc800217 	ldw	r18,8(sp)
     fc8:	dc400117 	ldw	r17,4(sp)
     fcc:	dc000017 	ldw	r16,0(sp)
     fd0:	dec00504 	addi	sp,sp,20
     fd4:	f800283a 	ret

00000fd8 <xQueueReceiveFromISR>:
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
     fd8:	20800e17 	ldw	r2,56(r4)
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
     fdc:	defffd04 	addi	sp,sp,-12
     fe0:	dc000015 	stw	r16,0(sp)
     fe4:	dfc00215 	stw	ra,8(sp)
     fe8:	dc400115 	stw	r17,4(sp)
     fec:	2021883a 	mov	r16,r4
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
     ff0:	10001626 	beq	r2,zero,104c <xQueueReceiveFromISR+0x74>
     ff4:	3023883a 	mov	r17,r6
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
     ff8:	00007d40 	call	7d4 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
     ffc:	80800e17 	ldw	r2,56(r16)
    1000:	10bfffc4 	addi	r2,r2,-1
    1004:	80800e15 	stw	r2,56(r16)

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    1008:	80c01117 	ldw	r3,68(r16)
    100c:	00bfffc4 	movi	r2,-1
    1010:	1880091e 	bne	r3,r2,1038 <xQueueReceiveFromISR+0x60>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1014:	80800417 	ldw	r2,16(r16)
    1018:	10000a26 	beq	r2,zero,1044 <xQueueReceiveFromISR+0x6c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    101c:	81000404 	addi	r4,r16,16
    1020:	00015f00 	call	15f0 <xTaskRemoveFromEventList>
    1024:	10000726 	beq	r2,zero,1044 <xQueueReceiveFromISR+0x6c>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    1028:	88000626 	beq	r17,zero,1044 <xQueueReceiveFromISR+0x6c>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    102c:	00800044 	movi	r2,1
    1030:	88800015 	stw	r2,0(r17)
    1034:	00000606 	br	1050 <xQueueReceiveFromISR+0x78>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    1038:	80801117 	ldw	r2,68(r16)
    103c:	10800044 	addi	r2,r2,1
    1040:	80801115 	stw	r2,68(r16)
			}

			xReturn = pdPASS;
    1044:	00800044 	movi	r2,1
    1048:	00000106 	br	1050 <xQueueReceiveFromISR+0x78>
		}
		else
		{
			xReturn = pdFAIL;
    104c:	0005883a 	mov	r2,zero
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1050:	dfc00217 	ldw	ra,8(sp)
    1054:	dc400117 	ldw	r17,4(sp)
    1058:	dc000017 	ldw	r16,0(sp)
    105c:	dec00304 	addi	sp,sp,12
    1060:	f800283a 	ret

00001064 <xQueuePeekFromISR>:
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    1064:	20800e17 	ldw	r2,56(r4)
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    1068:	defffd04 	addi	sp,sp,-12
    106c:	dc000015 	stw	r16,0(sp)
    1070:	dfc00215 	stw	ra,8(sp)
    1074:	dc400115 	stw	r17,4(sp)
    1078:	2021883a 	mov	r16,r4
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    107c:	10000526 	beq	r2,zero,1094 <xQueuePeekFromISR+0x30>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    1080:	24400317 	ldw	r17,12(r4)
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    1084:	00007d40 	call	7d4 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;

			xReturn = pdPASS;
    1088:	00800044 	movi	r2,1

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
			prvCopyDataFromQueue( pxQueue, pvBuffer );
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    108c:	84400315 	stw	r17,12(r16)
    1090:	00000106 	br	1098 <xQueuePeekFromISR+0x34>

			xReturn = pdPASS;
		}
		else
		{
			xReturn = pdFAIL;
    1094:	0005883a 	mov	r2,zero
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1098:	dfc00217 	ldw	ra,8(sp)
    109c:	dc400117 	ldw	r17,4(sp)
    10a0:	dc000017 	ldw	r16,0(sp)
    10a4:	dec00304 	addi	sp,sp,12
    10a8:	f800283a 	ret

000010ac <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
    10ac:	defffe04 	addi	sp,sp,-8
    10b0:	dc000015 	stw	r16,0(sp)
    10b4:	2021883a 	mov	r16,r4
    10b8:	dfc00115 	stw	ra,4(sp)
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    10bc:	00018f40 	call	18f4 <vTaskEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    10c0:	84000e17 	ldw	r16,56(r16)
	}
	taskEXIT_CRITICAL();
    10c4:	00019240 	call	1924 <vTaskExitCritical>

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    10c8:	8005883a 	mov	r2,r16
    10cc:	dfc00117 	ldw	ra,4(sp)
    10d0:	dc000017 	ldw	r16,0(sp)
    10d4:	dec00204 	addi	sp,sp,8
    10d8:	f800283a 	ret

000010dc <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
    10dc:	defffd04 	addi	sp,sp,-12
    10e0:	dfc00215 	stw	ra,8(sp)
    10e4:	dc400115 	stw	r17,4(sp)
    10e8:	dc000015 	stw	r16,0(sp)
    10ec:	2023883a 	mov	r17,r4
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    10f0:	00018f40 	call	18f4 <vTaskEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    10f4:	88800f17 	ldw	r2,60(r17)
    10f8:	8c000e17 	ldw	r16,56(r17)
    10fc:	1421c83a 	sub	r16,r2,r16
	}
	taskEXIT_CRITICAL();
    1100:	00019240 	call	1924 <vTaskExitCritical>

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    1104:	8005883a 	mov	r2,r16
    1108:	dfc00217 	ldw	ra,8(sp)
    110c:	dc400117 	ldw	r17,4(sp)
    1110:	dc000017 	ldw	r16,0(sp)
    1114:	dec00304 	addi	sp,sp,12
    1118:	f800283a 	ret

0000111c <uxQueueMessagesWaitingFromISR>:
{
UBaseType_t uxReturn;

	configASSERT( xQueue );

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    111c:	20800e17 	ldw	r2,56(r4)

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    1120:	f800283a 	ret

00001124 <vQueueDelete>:
	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
	}
	#endif
	vPortFree( pxQueue );
    1124:	00006e01 	jmpi	6e0 <vPortFree>

00001128 <xQueueIsQueueEmptyFromISR>:
BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
    1128:	20800e17 	ldw	r2,56(r4)
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    112c:	1005003a 	cmpeq	r2,r2,zero
    1130:	f800283a 	ret

00001134 <xQueueIsQueueFullFromISR>:
BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
    1134:	20c00e17 	ldw	r3,56(r4)
    1138:	20800f17 	ldw	r2,60(r4)
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    113c:	1885003a 	cmpeq	r2,r3,r2
    1140:	f800283a 	ret

00001144 <prvTaskIsTaskSuspended>:

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    1144:	20c00517 	ldw	r3,20(r4)
    1148:	00800034 	movhi	r2,0
    114c:	10950d04 	addi	r2,r2,21556
    1150:	1880051e 	bne	r3,r2,1168 <prvTaskIsTaskSuspended+0x24>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    1154:	20c00a17 	ldw	r3,40(r4)
    1158:	01000034 	movhi	r4,0
    115c:	21151704 	addi	r4,r4,21596
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
    1160:	1805003a 	cmpeq	r2,r3,zero

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    1164:	1900011e 	bne	r3,r4,116c <prvTaskIsTaskSuspended+0x28>

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
	BaseType_t xReturn = pdFALSE;
    1168:	0005883a 	mov	r2,zero
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    116c:	f800283a 	ret

00001170 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1170:	d0a01d17 	ldw	r2,-32652(gp)
    1174:	10800017 	ldw	r2,0(r2)
    1178:	1000021e 	bne	r2,zero,1184 <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    117c:	00bfffc4 	movi	r2,-1
    1180:	00000406 	br	1194 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1184:	d0a01d17 	ldw	r2,-32652(gp)
    1188:	10800317 	ldw	r2,12(r2)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
    118c:	10800317 	ldw	r2,12(r2)
    1190:	10800117 	ldw	r2,4(r2)
    1194:	d0a01215 	stw	r2,-32696(gp)
    1198:	f800283a 	ret

0000119c <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    119c:	d0a01e17 	ldw	r2,-32648(gp)
    11a0:	11000115 	stw	r4,4(r2)

	if( xTimeToWake < xTickCount )
    11a4:	d0a01917 	ldw	r2,-32668(gp)
    11a8:	2080042e 	bgeu	r4,r2,11bc <prvAddCurrentTaskToDelayedList+0x20>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    11ac:	d1201c17 	ldw	r4,-32656(gp)
    11b0:	d1601e17 	ldw	r5,-32648(gp)
    11b4:	29400104 	addi	r5,r5,4
    11b8:	00002c41 	jmpi	2c4 <vListInsert>
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
    11bc:	defffe04 	addi	sp,sp,-8
    11c0:	dc000015 	stw	r16,0(sp)
    11c4:	2021883a 	mov	r16,r4
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    11c8:	d1201d17 	ldw	r4,-32652(gp)
    11cc:	d1601e17 	ldw	r5,-32648(gp)
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
    11d0:	dfc00115 	stw	ra,4(sp)
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    11d4:	29400104 	addi	r5,r5,4
    11d8:	00002c40 	call	2c4 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    11dc:	d0a01217 	ldw	r2,-32696(gp)
    11e0:	8080012e 	bgeu	r16,r2,11e8 <prvAddCurrentTaskToDelayedList+0x4c>
		{
			xNextTaskUnblockTime = xTimeToWake;
    11e4:	d4201215 	stw	r16,-32696(gp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    11e8:	dfc00117 	ldw	ra,4(sp)
    11ec:	dc000017 	ldw	r16,0(sp)
    11f0:	dec00204 	addi	sp,sp,8
    11f4:	f800283a 	ret

000011f8 <uxTaskPriorityGetFromISR>:

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
    11f8:	2000011e 	bne	r4,zero,1200 <uxTaskPriorityGetFromISR+0x8>
    11fc:	d1201e17 	ldw	r4,-32648(gp)
			uxReturn = pxTCB->uxPriority;
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
	}
    1200:	20800b17 	ldw	r2,44(r4)
    1204:	f800283a 	ret

00001208 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
    1208:	defffc04 	addi	sp,sp,-16
    120c:	dc400115 	stw	r17,4(sp)
    1210:	dfc00315 	stw	ra,12(sp)
    1214:	dc800215 	stw	r18,8(sp)
    1218:	dc000015 	stw	r16,0(sp)
    121c:	2023883a 	mov	r17,r4
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    1220:	00011440 	call	1144 <prvTaskIsTaskSuspended>
    1224:	00c00044 	movi	r3,1
    1228:	10c0191e 	bne	r2,r3,1290 <xTaskResumeFromISR+0x88>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    122c:	d0a01117 	ldw	r2,-32700(gp)
    1230:	1000131e 	bne	r2,zero,1280 <xTaskResumeFromISR+0x78>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1234:	d0e01e17 	ldw	r3,-32648(gp)
    1238:	88800b17 	ldw	r2,44(r17)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
    123c:	8c800104 	addi	r18,r17,4
				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1240:	1c000b17 	ldw	r16,44(r3)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
    1244:	9009883a 	mov	r4,r18
				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1248:	1421403a 	cmpgeu	r16,r2,r16
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
    124c:	00003180 	call	318 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    1250:	89000b17 	ldw	r4,44(r17)
    1254:	d0a01817 	ldw	r2,-32672(gp)
    1258:	1100012e 	bgeu	r2,r4,1260 <xTaskResumeFromISR+0x58>
    125c:	d1201815 	stw	r4,-32672(gp)
    1260:	01400504 	movi	r5,20
    1264:	00027b00 	call	27b0 <__mulsi3>
    1268:	01000034 	movhi	r4,0
    126c:	21152604 	addi	r4,r4,21656
    1270:	2089883a 	add	r4,r4,r2
    1274:	900b883a 	mov	r5,r18
    1278:	00002940 	call	294 <vListInsertEnd>
    127c:	00000506 	br	1294 <xTaskResumeFromISR+0x8c>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    1280:	01000034 	movhi	r4,0
    1284:	21151704 	addi	r4,r4,21596
    1288:	89400604 	addi	r5,r17,24
    128c:	00002940 	call	294 <vListInsertEnd>

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
	BaseType_t xYieldRequired = pdFALSE;
    1290:	0021883a 	mov	r16,zero
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
	}
    1294:	8005883a 	mov	r2,r16
    1298:	dfc00317 	ldw	ra,12(sp)
    129c:	dc800217 	ldw	r18,8(sp)
    12a0:	dc400117 	ldw	r17,4(sp)
    12a4:	dc000017 	ldw	r16,0(sp)
    12a8:	dec00404 	addi	sp,sp,16
    12ac:	f800283a 	ret

000012b0 <vTaskEndScheduler>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    12b0:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    12b4:	00bfff84 	movi	r2,-2
    12b8:	1884703a 	and	r2,r3,r2
    12bc:	1001703a 	wrctl	status,r2
{
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
    12c0:	d0201715 	stw	zero,-32676(gp)
	vPortEndScheduler();
    12c4:	000052c1 	jmpi	52c <vPortEndScheduler>

000012c8 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    12c8:	d0a01117 	ldw	r2,-32700(gp)
    12cc:	10800044 	addi	r2,r2,1
    12d0:	d0a01115 	stw	r2,-32700(gp)
    12d4:	f800283a 	ret

000012d8 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    12d8:	d0a01917 	ldw	r2,-32668(gp)
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
    12dc:	f800283a 	ret

000012e0 <xTaskGetTickCountFromISR>:
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
	{
		xReturn = xTickCount;
    12e0:	d0a01917 	ldw	r2,-32668(gp)
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    12e4:	f800283a 	ret

000012e8 <uxTaskGetNumberOfTasks>:

UBaseType_t uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
    12e8:	d0a01a17 	ldw	r2,-32664(gp)
}
    12ec:	f800283a 	ret

000012f0 <xTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    12f0:	d0a01117 	ldw	r2,-32700(gp)

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    12f4:	defffa04 	addi	sp,sp,-24
    12f8:	dfc00515 	stw	ra,20(sp)
    12fc:	dd000415 	stw	r20,16(sp)
    1300:	dcc00315 	stw	r19,12(sp)
    1304:	dc800215 	stw	r18,8(sp)
    1308:	dc400115 	stw	r17,4(sp)
    130c:	dc000015 	stw	r16,0(sp)

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1310:	1000271e 	bne	r2,zero,13b0 <xTaskIncrementTick+0xc0>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
    1314:	d0a01917 	ldw	r2,-32668(gp)
    1318:	10800044 	addi	r2,r2,1
    131c:	d0a01915 	stw	r2,-32668(gp)

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    1320:	d4e01917 	ldw	r19,-32668(gp)

			if( xConstTickCount == ( TickType_t ) 0U )
    1324:	9800081e 	bne	r19,zero,1348 <xTaskIncrementTick+0x58>
			{
				taskSWITCH_DELAYED_LISTS();
    1328:	d0a01d17 	ldw	r2,-32652(gp)
    132c:	d0e01c17 	ldw	r3,-32656(gp)
    1330:	d0e01d15 	stw	r3,-32652(gp)
    1334:	d0a01c15 	stw	r2,-32656(gp)
    1338:	d0a01417 	ldw	r2,-32688(gp)
    133c:	10800044 	addi	r2,r2,1
    1340:	d0a01415 	stw	r2,-32688(gp)
    1344:	00011700 	call	1170 <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    1348:	d0a01217 	ldw	r2,-32696(gp)
    134c:	04800034 	movhi	r18,0
    1350:	94952604 	addi	r18,r18,21656
    1354:	0021883a 	mov	r16,zero
    1358:	98800b36 	bltu	r19,r2,1388 <xTaskIncrementTick+0x98>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    135c:	d0a01d17 	ldw	r2,-32652(gp)
    1360:	10800017 	ldw	r2,0(r2)
    1364:	1000021e 	bne	r2,zero,1370 <xTaskIncrementTick+0x80>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
    1368:	00bfffc4 	movi	r2,-1
    136c:	00000506 	br	1384 <xTaskIncrementTick+0x94>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1370:	d0a01d17 	ldw	r2,-32652(gp)
    1374:	10800317 	ldw	r2,12(r2)
    1378:	14400317 	ldw	r17,12(r2)
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    137c:	88800117 	ldw	r2,4(r17)

						if( xConstTickCount < xItemValue )
    1380:	9880132e 	bgeu	r19,r2,13d0 <xTaskIncrementTick+0xe0>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
    1384:	d0a01215 	stw	r2,-32696(gp)
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    1388:	d0a01e17 	ldw	r2,-32648(gp)
    138c:	01400504 	movi	r5,20
    1390:	11000b17 	ldw	r4,44(r2)
    1394:	00027b00 	call	27b0 <__mulsi3>
    1398:	9085883a 	add	r2,r18,r2
    139c:	10800017 	ldw	r2,0(r2)
    13a0:	00c00044 	movi	r3,1
    13a4:	1880062e 	bgeu	r3,r2,13c0 <xTaskIncrementTick+0xd0>
			{
				xSwitchRequired = pdTRUE;
    13a8:	1821883a 	mov	r16,r3
    13ac:	00000406 	br	13c0 <xTaskIncrementTick+0xd0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    13b0:	d0a01617 	ldw	r2,-32680(gp)

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    13b4:	0021883a 	mov	r16,zero
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    13b8:	10800044 	addi	r2,r2,1
    13bc:	d0a01615 	stw	r2,-32680(gp)
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    13c0:	d0a01517 	ldw	r2,-32684(gp)
    13c4:	10001826 	beq	r2,zero,1428 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
    13c8:	04000044 	movi	r16,1
    13cc:	00001606 	br	1428 <xTaskIncrementTick+0x138>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    13d0:	8d000104 	addi	r20,r17,4
    13d4:	a009883a 	mov	r4,r20
    13d8:	00003180 	call	318 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    13dc:	88800a17 	ldw	r2,40(r17)
    13e0:	10000226 	beq	r2,zero,13ec <xTaskIncrementTick+0xfc>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    13e4:	89000604 	addi	r4,r17,24
    13e8:	00003180 	call	318 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
    13ec:	89000b17 	ldw	r4,44(r17)
    13f0:	d0a01817 	ldw	r2,-32672(gp)
    13f4:	1100012e 	bgeu	r2,r4,13fc <xTaskIncrementTick+0x10c>
    13f8:	d1201815 	stw	r4,-32672(gp)
    13fc:	01400504 	movi	r5,20
    1400:	00027b00 	call	27b0 <__mulsi3>
    1404:	9089883a 	add	r4,r18,r2
    1408:	a00b883a 	mov	r5,r20
    140c:	00002940 	call	294 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1410:	d0a01e17 	ldw	r2,-32648(gp)
    1414:	88c00b17 	ldw	r3,44(r17)
    1418:	10800b17 	ldw	r2,44(r2)
    141c:	18bfcf36 	bltu	r3,r2,135c <xTaskIncrementTick+0x6c>
							{
								xSwitchRequired = pdTRUE;
    1420:	04000044 	movi	r16,1
    1424:	003fcd06 	br	135c <xTaskIncrementTick+0x6c>
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
    1428:	8005883a 	mov	r2,r16
    142c:	dfc00517 	ldw	ra,20(sp)
    1430:	dd000417 	ldw	r20,16(sp)
    1434:	dcc00317 	ldw	r19,12(sp)
    1438:	dc800217 	ldw	r18,8(sp)
    143c:	dc400117 	ldw	r17,4(sp)
    1440:	dc000017 	ldw	r16,0(sp)
    1444:	dec00604 	addi	sp,sp,24
    1448:	f800283a 	ret

0000144c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    144c:	d0a01117 	ldw	r2,-32700(gp)
    1450:	10000326 	beq	r2,zero,1460 <vTaskSwitchContext+0x14>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    1454:	00800044 	movi	r2,1
    1458:	d0a01515 	stw	r2,-32684(gp)
    145c:	f800283a 	ret

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    1460:	defffd04 	addi	sp,sp,-12
    1464:	dc400115 	stw	r17,4(sp)
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    1468:	04400034 	movhi	r17,0

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    146c:	dfc00215 	stw	ra,8(sp)
    1470:	dc000015 	stw	r16,0(sp)
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
    1474:	d0201515 	stw	zero,-32684(gp)
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    1478:	8c552604 	addi	r17,r17,21656
    147c:	d1201817 	ldw	r4,-32672(gp)
    1480:	01400504 	movi	r5,20
    1484:	04000034 	movhi	r16,0
    1488:	00027b00 	call	27b0 <__mulsi3>
    148c:	8885883a 	add	r2,r17,r2
    1490:	10800017 	ldw	r2,0(r2)
    1494:	84152604 	addi	r16,r16,21656
    1498:	1000041e 	bne	r2,zero,14ac <vTaskSwitchContext+0x60>
    149c:	d0a01817 	ldw	r2,-32672(gp)
    14a0:	10bfffc4 	addi	r2,r2,-1
    14a4:	d0a01815 	stw	r2,-32672(gp)
    14a8:	003ff406 	br	147c <vTaskSwitchContext+0x30>
    14ac:	d4601817 	ldw	r17,-32672(gp)
    14b0:	01400504 	movi	r5,20
    14b4:	8809883a 	mov	r4,r17
    14b8:	00027b00 	call	27b0 <__mulsi3>
    14bc:	8087883a 	add	r3,r16,r2
    14c0:	18c00104 	addi	r3,r3,4
    14c4:	19000017 	ldw	r4,0(r3)
    14c8:	10800204 	addi	r2,r2,8
    14cc:	1405883a 	add	r2,r2,r16
    14d0:	21400117 	ldw	r5,4(r4)
    14d4:	19400015 	stw	r5,0(r3)
    14d8:	2880021e 	bne	r5,r2,14e4 <vTaskSwitchContext+0x98>
    14dc:	28800117 	ldw	r2,4(r5)
    14e0:	18800015 	stw	r2,0(r3)
    14e4:	8809883a 	mov	r4,r17
    14e8:	01400504 	movi	r5,20
    14ec:	00027b00 	call	27b0 <__mulsi3>
    14f0:	8085883a 	add	r2,r16,r2
    14f4:	10800117 	ldw	r2,4(r2)
    14f8:	10800317 	ldw	r2,12(r2)
    14fc:	d0a01e15 	stw	r2,-32648(gp)
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    1500:	dfc00217 	ldw	ra,8(sp)
    1504:	dc400117 	ldw	r17,4(sp)
    1508:	dc000017 	ldw	r16,0(sp)
    150c:	dec00304 	addi	sp,sp,12
    1510:	f800283a 	ret

00001514 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    1514:	defffe04 	addi	sp,sp,-8
    1518:	dc000015 	stw	r16,0(sp)
    151c:	2821883a 	mov	r16,r5

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1520:	d1601e17 	ldw	r5,-32648(gp)
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    1524:	dfc00115 	stw	ra,4(sp)

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1528:	29400604 	addi	r5,r5,24
    152c:	00002c40 	call	2c4 <vListInsert>

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1530:	d1201e17 	ldw	r4,-32648(gp)
    1534:	21000104 	addi	r4,r4,4
    1538:	00003180 	call	318 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    153c:	00bfffc4 	movi	r2,-1
    1540:	8080081e 	bne	r16,r2,1564 <vTaskPlaceOnEventList+0x50>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    1544:	d1601e17 	ldw	r5,-32648(gp)
    1548:	01000034 	movhi	r4,0
    154c:	21150d04 	addi	r4,r4,21556
    1550:	29400104 	addi	r5,r5,4
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    1554:	dfc00117 	ldw	ra,4(sp)
    1558:	dc000017 	ldw	r16,0(sp)
    155c:	dec00204 	addi	sp,sp,8
		if( xTicksToWait == portMAX_DELAY )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    1560:	00002941 	jmpi	294 <vListInsertEnd>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
    1564:	d1201917 	ldw	r4,-32668(gp)
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    1568:	8109883a 	add	r4,r16,r4
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    156c:	dfc00117 	ldw	ra,4(sp)
    1570:	dc000017 	ldw	r16,0(sp)
    1574:	dec00204 	addi	sp,sp,8
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    1578:	000119c1 	jmpi	119c <prvAddCurrentTaskToDelayedList>

0000157c <vTaskPlaceOnUnorderedEventList>:
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    157c:	d0a01e17 	ldw	r2,-32648(gp)
	#endif /* INCLUDE_vTaskSuspend */
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    1580:	defffe04 	addi	sp,sp,-8
    1584:	dfc00115 	stw	ra,4(sp)
    1588:	dc000015 	stw	r16,0(sp)
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    158c:	29600034 	orhi	r5,r5,32768
    1590:	11400615 	stw	r5,24(r2)
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1594:	d1601e17 	ldw	r5,-32648(gp)
	#endif /* INCLUDE_vTaskSuspend */
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    1598:	3021883a 	mov	r16,r6
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    159c:	29400604 	addi	r5,r5,24
    15a0:	00002940 	call	294 <vListInsertEnd>

	/* The task must be removed from the ready list before it is added to the
	blocked list.  Exclusive access can be assured to the ready list as the
	scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    15a4:	d1201e17 	ldw	r4,-32648(gp)
    15a8:	21000104 	addi	r4,r4,4
    15ac:	00003180 	call	318 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    15b0:	00bfffc4 	movi	r2,-1
    15b4:	8080081e 	bne	r16,r2,15d8 <vTaskPlaceOnUnorderedEventList+0x5c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    15b8:	d1601e17 	ldw	r5,-32648(gp)
    15bc:	01000034 	movhi	r4,0
    15c0:	21150d04 	addi	r4,r4,21556
    15c4:	29400104 	addi	r5,r5,4
			will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    15c8:	dfc00117 	ldw	ra,4(sp)
    15cc:	dc000017 	ldw	r16,0(sp)
    15d0:	dec00204 	addi	sp,sp,8
		if( xTicksToWait == portMAX_DELAY )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    15d4:	00002941 	jmpi	294 <vListInsertEnd>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
    15d8:	d1201917 	ldw	r4,-32668(gp)
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    15dc:	8109883a 	add	r4,r16,r4
			will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    15e0:	dfc00117 	ldw	ra,4(sp)
    15e4:	dc000017 	ldw	r16,0(sp)
    15e8:	dec00204 	addi	sp,sp,8
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    15ec:	000119c1 	jmpi	119c <prvAddCurrentTaskToDelayedList>

000015f0 <xTaskRemoveFromEventList>:
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    15f0:	20800317 	ldw	r2,12(r4)

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    15f4:	defffd04 	addi	sp,sp,-12
    15f8:	dc000015 	stw	r16,0(sp)
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    15fc:	14000317 	ldw	r16,12(r2)

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    1600:	dc400115 	stw	r17,4(sp)
    1604:	dfc00215 	stw	ra,8(sp)

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    1608:	84400604 	addi	r17,r16,24
    160c:	8809883a 	mov	r4,r17
    1610:	00003180 	call	318 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1614:	d0a01117 	ldw	r2,-32700(gp)
    1618:	10000d1e 	bne	r2,zero,1650 <xTaskRemoveFromEventList+0x60>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    161c:	84400104 	addi	r17,r16,4
    1620:	8809883a 	mov	r4,r17
    1624:	00003180 	call	318 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    1628:	81000b17 	ldw	r4,44(r16)
    162c:	d0a01817 	ldw	r2,-32672(gp)
    1630:	1100012e 	bgeu	r2,r4,1638 <xTaskRemoveFromEventList+0x48>
    1634:	d1201815 	stw	r4,-32672(gp)
    1638:	01400504 	movi	r5,20
    163c:	00027b00 	call	27b0 <__mulsi3>
    1640:	01000034 	movhi	r4,0
    1644:	21152604 	addi	r4,r4,21656
    1648:	2089883a 	add	r4,r4,r2
    164c:	00000206 	br	1658 <xTaskRemoveFromEventList+0x68>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    1650:	01000034 	movhi	r4,0
    1654:	21151704 	addi	r4,r4,21596
    1658:	880b883a 	mov	r5,r17
    165c:	00002940 	call	294 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    1660:	d0e01e17 	ldw	r3,-32648(gp)
    1664:	80800b17 	ldw	r2,44(r16)
    1668:	18c00b17 	ldw	r3,44(r3)
    166c:	1880032e 	bgeu	r3,r2,167c <xTaskRemoveFromEventList+0x8c>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    1670:	00800044 	movi	r2,1
    1674:	d0a01515 	stw	r2,-32684(gp)
    1678:	00000106 	br	1680 <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		xReturn = pdFALSE;
    167c:	0005883a 	mov	r2,zero
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
    1680:	dfc00217 	ldw	ra,8(sp)
    1684:	dc400117 	ldw	r17,4(sp)
    1688:	dc000017 	ldw	r16,0(sp)
    168c:	dec00304 	addi	sp,sp,12
    1690:	f800283a 	ret

00001694 <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    1694:	defffd04 	addi	sp,sp,-12
    1698:	dc000015 	stw	r16,0(sp)
	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
    169c:	24000317 	ldw	r16,12(r4)
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    16a0:	dfc00215 	stw	ra,8(sp)
    16a4:	dc400115 	stw	r17,4(sp)
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    16a8:	29600034 	orhi	r5,r5,32768
    16ac:	21400015 	stw	r5,0(r4)

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
    16b0:	00003180 	call	318 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    16b4:	84400104 	addi	r17,r16,4
    16b8:	8809883a 	mov	r4,r17
    16bc:	00003180 	call	318 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    16c0:	81000b17 	ldw	r4,44(r16)
    16c4:	d0a01817 	ldw	r2,-32672(gp)
    16c8:	1100012e 	bgeu	r2,r4,16d0 <xTaskRemoveFromUnorderedEventList+0x3c>
    16cc:	d1201815 	stw	r4,-32672(gp)
    16d0:	01400504 	movi	r5,20
    16d4:	00027b00 	call	27b0 <__mulsi3>
    16d8:	01000034 	movhi	r4,0
    16dc:	21152604 	addi	r4,r4,21656
    16e0:	2089883a 	add	r4,r4,r2
    16e4:	880b883a 	mov	r5,r17
    16e8:	00002940 	call	294 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    16ec:	d0e01e17 	ldw	r3,-32648(gp)
    16f0:	80800b17 	ldw	r2,44(r16)
    16f4:	18c00b17 	ldw	r3,44(r3)
    16f8:	1880032e 	bgeu	r3,r2,1708 <xTaskRemoveFromUnorderedEventList+0x74>
		switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    16fc:	00800044 	movi	r2,1
    1700:	d0a01515 	stw	r2,-32684(gp)
    1704:	00000106 	br	170c <xTaskRemoveFromUnorderedEventList+0x78>
	}
	else
	{
		xReturn = pdFALSE;
    1708:	0005883a 	mov	r2,zero
	}

	return xReturn;
}
    170c:	dfc00217 	ldw	ra,8(sp)
    1710:	dc400117 	ldw	r17,4(sp)
    1714:	dc000017 	ldw	r16,0(sp)
    1718:	dec00304 	addi	sp,sp,12
    171c:	f800283a 	ret

00001720 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    1720:	d0a01417 	ldw	r2,-32688(gp)
    1724:	20800015 	stw	r2,0(r4)
	pxTimeOut->xTimeOnEntering = xTickCount;
    1728:	d0a01917 	ldw	r2,-32668(gp)
    172c:	20800115 	stw	r2,4(r4)
    1730:	f800283a 	ret

00001734 <vTaskMissedYield>:
}
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
    1734:	00800044 	movi	r2,1
    1738:	d0a01515 	stw	r2,-32684(gp)
    173c:	f800283a 	ret

00001740 <uxTaskGetStackHighWaterMark>:
	{
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    1740:	2000011e 	bne	r4,zero,1748 <uxTaskGetStackHighWaterMark+0x8>
    1744:	d1201e17 	ldw	r4,-32648(gp)

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
    1748:	21000c17 	ldw	r4,48(r4)

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
    174c:	01402944 	movi	r5,165

		pxTCB = prvGetTCBFromHandle( xTask );

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
    1750:	2007883a 	mov	r3,r4

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
    1754:	19800003 	ldbu	r6,0(r3)
    1758:	1905c83a 	sub	r2,r3,r4
    175c:	3140021e 	bne	r6,r5,1768 <uxTaskGetStackHighWaterMark+0x28>
		{
			pucStackByte -= portSTACK_GROWTH;
    1760:	18c00044 	addi	r3,r3,1
    1764:	003ffb06 	br	1754 <uxTaskGetStackHighWaterMark+0x14>
			ulCount++;
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
    1768:	1004d0ba 	srli	r2,r2,2
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );

		return uxReturn;
	}
    176c:	10bfffcc 	andi	r2,r2,65535
    1770:	f800283a 	ret

00001774 <xTaskGetCurrentTaskHandle>:
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    1774:	d0a01e17 	ldw	r2,-32648(gp)

		return xReturn;
	}
    1778:	f800283a 	ret

0000177c <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    177c:	20003526 	beq	r4,zero,1854 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    1780:	d0a01e17 	ldw	r2,-32648(gp)
    1784:	20c00b17 	ldw	r3,44(r4)
    1788:	10800b17 	ldw	r2,44(r2)
    178c:	1880312e 	bgeu	r3,r2,1854 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    1790:	20800617 	ldw	r2,24(r4)
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    1794:	defffc04 	addi	sp,sp,-16
    1798:	dfc00315 	stw	ra,12(sp)
    179c:	dc800215 	stw	r18,8(sp)
    17a0:	dc400115 	stw	r17,4(sp)
    17a4:	dc000015 	stw	r16,0(sp)
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    17a8:	10000516 	blt	r2,zero,17c0 <vTaskPriorityInherit+0x44>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    17ac:	d0a01e17 	ldw	r2,-32648(gp)
    17b0:	11400b17 	ldw	r5,44(r2)
    17b4:	00800144 	movi	r2,5
    17b8:	1145c83a 	sub	r2,r2,r5
    17bc:	20800615 	stw	r2,24(r4)
    17c0:	2021883a 	mov	r16,r4
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    17c4:	01400504 	movi	r5,20
    17c8:	1809883a 	mov	r4,r3
    17cc:	00027b00 	call	27b0 <__mulsi3>
    17d0:	01000034 	movhi	r4,0
    17d4:	80c00517 	ldw	r3,20(r16)
    17d8:	21152604 	addi	r4,r4,21656
    17dc:	2085883a 	add	r2,r4,r2
    17e0:	2023883a 	mov	r17,r4
    17e4:	1880131e 	bne	r3,r2,1834 <vTaskPriorityInherit+0xb8>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    17e8:	84800104 	addi	r18,r16,4
    17ec:	9009883a 	mov	r4,r18
    17f0:	00003180 	call	318 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    17f4:	d0a01e17 	ldw	r2,-32648(gp)
    17f8:	11000b17 	ldw	r4,44(r2)
					prvAddTaskToReadyList( pxTCB );
    17fc:	d0a01817 	ldw	r2,-32672(gp)
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1800:	81000b15 	stw	r4,44(r16)
					prvAddTaskToReadyList( pxTCB );
    1804:	1100012e 	bgeu	r2,r4,180c <vTaskPriorityInherit+0x90>
    1808:	d1201815 	stw	r4,-32672(gp)
    180c:	01400504 	movi	r5,20
    1810:	00027b00 	call	27b0 <__mulsi3>
    1814:	8889883a 	add	r4,r17,r2
    1818:	900b883a 	mov	r5,r18
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    181c:	dfc00317 	ldw	ra,12(sp)
    1820:	dc800217 	ldw	r18,8(sp)
    1824:	dc400117 	ldw	r17,4(sp)
    1828:	dc000017 	ldw	r16,0(sp)
    182c:	dec00404 	addi	sp,sp,16
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
					prvAddTaskToReadyList( pxTCB );
    1830:	00002941 	jmpi	294 <vListInsertEnd>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1834:	d0a01e17 	ldw	r2,-32648(gp)
    1838:	10800b17 	ldw	r2,44(r2)
    183c:	80800b15 	stw	r2,44(r16)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1840:	dfc00317 	ldw	ra,12(sp)
    1844:	dc800217 	ldw	r18,8(sp)
    1848:	dc400117 	ldw	r17,4(sp)
    184c:	dc000017 	ldw	r16,0(sp)
    1850:	dec00404 	addi	sp,sp,16
    1854:	f800283a 	ret

00001858 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
    1858:	2000021e 	bne	r4,zero,1864 <xTaskPriorityDisinherit+0xc>
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
    185c:	0005883a 	mov	r2,zero
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    1860:	f800283a 	ret
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
    1864:	20801117 	ldw	r2,68(r4)

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1868:	21400b17 	ldw	r5,44(r4)
    186c:	20c01017 	ldw	r3,64(r4)
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
    1870:	10bfffc4 	addi	r2,r2,-1
    1874:	20801115 	stw	r2,68(r4)

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1878:	28fff826 	beq	r5,r3,185c <xTaskPriorityDisinherit+0x4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    187c:	103ff71e 	bne	r2,zero,185c <xTaskPriorityDisinherit+0x4>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    1880:	defffd04 	addi	sp,sp,-12
    1884:	dc400115 	stw	r17,4(sp)
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1888:	24400104 	addi	r17,r4,4
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    188c:	dc000015 	stw	r16,0(sp)
    1890:	2021883a 	mov	r16,r4
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1894:	8809883a 	mov	r4,r17
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    1898:	dfc00215 	stw	ra,8(sp)
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    189c:	00003180 	call	318 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    18a0:	81001017 	ldw	r4,64(r16)

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    18a4:	00800144 	movi	r2,5
    18a8:	1105c83a 	sub	r2,r2,r4
    18ac:	80800615 	stw	r2,24(r16)
					prvAddTaskToReadyList( pxTCB );
    18b0:	d0a01817 	ldw	r2,-32672(gp)
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    18b4:	81000b15 	stw	r4,44(r16)

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
					prvAddTaskToReadyList( pxTCB );
    18b8:	1100012e 	bgeu	r2,r4,18c0 <xTaskPriorityDisinherit+0x68>
    18bc:	d1201815 	stw	r4,-32672(gp)
    18c0:	01400504 	movi	r5,20
    18c4:	00027b00 	call	27b0 <__mulsi3>
    18c8:	01000034 	movhi	r4,0
    18cc:	21152604 	addi	r4,r4,21656
    18d0:	2089883a 	add	r4,r4,r2
    18d4:	880b883a 	mov	r5,r17
    18d8:	00002940 	call	294 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    18dc:	00800044 	movi	r2,1
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    18e0:	dfc00217 	ldw	ra,8(sp)
    18e4:	dc400117 	ldw	r17,4(sp)
    18e8:	dc000017 	ldw	r16,0(sp)
    18ec:	dec00304 	addi	sp,sp,12
    18f0:	f800283a 	ret

000018f4 <vTaskEnterCritical>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    18f4:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    18f8:	00bfff84 	movi	r2,-2
    18fc:	1884703a 	and	r2,r3,r2
    1900:	1001703a 	wrctl	status,r2

	void vTaskEnterCritical( void )
	{
		portDISABLE_INTERRUPTS();

		if( xSchedulerRunning != pdFALSE )
    1904:	d0a01717 	ldw	r2,-32676(gp)
    1908:	10000526 	beq	r2,zero,1920 <vTaskEnterCritical+0x2c>
		{
			( pxCurrentTCB->uxCriticalNesting )++;
    190c:	d0e01e17 	ldw	r3,-32648(gp)
    1910:	18800f17 	ldw	r2,60(r3)
    1914:	10800044 	addi	r2,r2,1
    1918:	18800f15 	stw	r2,60(r3)
			function so	assert() if it is being called from an interrupt
			context.  Only API functions that end in "FromISR" can be used in an
			interrupt.  Only assert if the critical nesting count is 1 to
			protect against recursive calls if the assert function also uses a
			critical section. */
			if( pxCurrentTCB->uxCriticalNesting == 1 )
    191c:	d0a01e17 	ldw	r2,-32648(gp)
    1920:	f800283a 	ret

00001924 <vTaskExitCritical>:

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskExitCritical( void )
	{
		if( xSchedulerRunning != pdFALSE )
    1924:	d0a01717 	ldw	r2,-32676(gp)
    1928:	10000c26 	beq	r2,zero,195c <vTaskExitCritical+0x38>
		{
			if( pxCurrentTCB->uxCriticalNesting > 0U )
    192c:	d0a01e17 	ldw	r2,-32648(gp)
    1930:	10800f17 	ldw	r2,60(r2)
    1934:	10000926 	beq	r2,zero,195c <vTaskExitCritical+0x38>
			{
				( pxCurrentTCB->uxCriticalNesting )--;
    1938:	d0e01e17 	ldw	r3,-32648(gp)
    193c:	18800f17 	ldw	r2,60(r3)
    1940:	10bfffc4 	addi	r2,r2,-1
    1944:	18800f15 	stw	r2,60(r3)

				if( pxCurrentTCB->uxCriticalNesting == 0U )
    1948:	d0a01e17 	ldw	r2,-32648(gp)
    194c:	10800f17 	ldw	r2,60(r2)
    1950:	1000021e 	bne	r2,zero,195c <vTaskExitCritical+0x38>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1954:	00800044 	movi	r2,1
    1958:	1001703a 	wrctl	status,r2
    195c:	f800283a 	ret

00001960 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    1960:	defff704 	addi	sp,sp,-36
    1964:	ddc00715 	stw	r23,28(sp)
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1968:	ddc00b17 	ldw	r23,44(sp)

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    196c:	dd800615 	stw	r22,24(sp)
    1970:	dd400515 	stw	r21,20(sp)
    1974:	dd000415 	stw	r20,16(sp)
    1978:	dcc00315 	stw	r19,12(sp)
    197c:	dc800215 	stw	r18,8(sp)
    1980:	dc400115 	stw	r17,4(sp)
    1984:	dfc00815 	stw	ra,32(sp)
    1988:	dc000015 	stw	r16,0(sp)
    198c:	202d883a 	mov	r22,r4
    1990:	2825883a 	mov	r18,r5
    1994:	3023883a 	mov	r17,r6
    1998:	382b883a 	mov	r21,r7
    199c:	dcc00917 	ldw	r19,36(sp)
    19a0:	dd000a17 	ldw	r20,40(sp)
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    19a4:	b800061e 	bne	r23,zero,19c0 <xTaskGenericCreate+0x60>
    19a8:	313fffcc 	andi	r4,r6,65535
    19ac:	2109883a 	add	r4,r4,r4
    19b0:	2109883a 	add	r4,r4,r4
    19b4:	00006540 	call	654 <pvPortMalloc>
    19b8:	102f883a 	mov	r23,r2

		if( pxStack != NULL )
    19bc:	10007b26 	beq	r2,zero,1bac <xTaskGenericCreate+0x24c>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
    19c0:	01001404 	movi	r4,80
    19c4:	00006540 	call	654 <pvPortMalloc>
    19c8:	1021883a 	mov	r16,r2

			if( pxNewTCB != NULL )
    19cc:	10001026 	beq	r2,zero,1a10 <xTaskGenericCreate+0xb0>
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
    19d0:	8c7fffcc 	andi	r17,r17,65535
    19d4:	8c63883a 	add	r17,r17,r17
    19d8:	8c63883a 	add	r17,r17,r17
    19dc:	880d883a 	mov	r6,r17
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );

			if( pxNewTCB != NULL )
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
    19e0:	15c00c15 	stw	r23,48(r2)
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
    19e4:	b809883a 	mov	r4,r23
    19e8:	01402944 	movi	r5,165
    19ec:	00028000 	call	2800 <memset>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
    19f0:	80800c17 	ldw	r2,48(r16)
    19f4:	8c7fff04 	addi	r17,r17,-4
    19f8:	80c00f04 	addi	r3,r16,60
    19fc:	1463883a 	add	r17,r2,r17
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    1a00:	00bfff04 	movi	r2,-4
    1a04:	88a2703a 	and	r17,r17,r2
    1a08:	80800d04 	addi	r2,r16,52
    1a0c:	00000606 	br	1a28 <xTaskGenericCreate+0xc8>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
    1a10:	b809883a 	mov	r4,r23
    1a14:	00006e00 	call	6e0 <vPortFree>
    1a18:	00006406 	br	1bac <xTaskGenericCreate+0x24c>
    1a1c:	10800044 	addi	r2,r2,1
    1a20:	94800044 	addi	r18,r18,1
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    1a24:	10c00426 	beq	r2,r3,1a38 <xTaskGenericCreate+0xd8>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    1a28:	91000003 	ldbu	r4,0(r18)
    1a2c:	11000005 	stb	r4,0(r2)

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    1a30:	91000007 	ldb	r4,0(r18)
    1a34:	203ff91e 	bne	r4,zero,1a1c <xTaskGenericCreate+0xbc>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    1a38:	80000ec5 	stb	zero,59(r16)
    1a3c:	00800104 	movi	r2,4
    1a40:	9825883a 	mov	r18,r19
    1a44:	14c0012e 	bgeu	r2,r19,1a4c <xTaskGenericCreate+0xec>
    1a48:	1025883a 	mov	r18,r2
		pxTCB->uxBasePriority = uxPriority;
		pxTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    1a4c:	85c00104 	addi	r23,r16,4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
    1a50:	84800b15 	stw	r18,44(r16)
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    1a54:	84801015 	stw	r18,64(r16)
		pxTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    1a58:	b809883a 	mov	r4,r23

	pxTCB->uxPriority = uxPriority;
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
		pxTCB->uxMutexesHeld = 0;
    1a5c:	80001115 	stw	zero,68(r16)
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    1a60:	000028c0 	call	28c <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    1a64:	81000604 	addi	r4,r16,24
    1a68:	000028c0 	call	28c <vListInitialiseItem>
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1a6c:	00800144 	movi	r2,5
    1a70:	14a5c83a 	sub	r18,r2,r18
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
    1a74:	80001215 	stw	zero,72(r16)
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
	vListInitialiseItem( &( pxTCB->xEventListItem ) );

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    1a78:	84000415 	stw	r16,16(r16)

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1a7c:	84800615 	stw	r18,24(r16)
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    1a80:	84000915 	stw	r16,36(r16)

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
    1a84:	80000f15 	stw	zero,60(r16)
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
		pxTCB->eNotifyState = eNotWaitingNotification;
    1a88:	80001315 	stw	zero,76(r16)
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    1a8c:	8809883a 	mov	r4,r17
    1a90:	b00b883a 	mov	r5,r22
    1a94:	a80d883a 	mov	r6,r21
    1a98:	00004ec0 	call	4ec <pxPortInitialiseStack>
    1a9c:	80800015 	stw	r2,0(r16)
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
    1aa0:	a0000126 	beq	r20,zero,1aa8 <xTaskGenericCreate+0x148>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    1aa4:	a4000015 	stw	r16,0(r20)
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
    1aa8:	00018f40 	call	18f4 <vTaskEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    1aac:	d0a01a17 	ldw	r2,-32664(gp)
    1ab0:	04800034 	movhi	r18,0
    1ab4:	94952604 	addi	r18,r18,21656
    1ab8:	10800044 	addi	r2,r2,1
    1abc:	d0a01a15 	stw	r2,-32664(gp)
			if( pxCurrentTCB == NULL )
    1ac0:	d0a01e17 	ldw	r2,-32648(gp)
    1ac4:	10001e1e 	bne	r2,zero,1b40 <xTaskGenericCreate+0x1e0>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    1ac8:	d4201e15 	stw	r16,-32648(gp)

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    1acc:	d0e01a17 	ldw	r3,-32664(gp)
    1ad0:	00800044 	movi	r2,1
    1ad4:	1880201e 	bne	r3,r2,1b58 <xTaskGenericCreate+0x1f8>
    1ad8:	0023883a 	mov	r17,zero

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    1adc:	05001904 	movi	r20,100
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    1ae0:	9449883a 	add	r4,r18,r17
    1ae4:	8c400504 	addi	r17,r17,20
    1ae8:	000026c0 	call	26c <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    1aec:	8d3ffc1e 	bne	r17,r20,1ae0 <xTaskGenericCreate+0x180>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    1af0:	05000034 	movhi	r20,0
    1af4:	a5152104 	addi	r20,r20,21636
    1af8:	a009883a 	mov	r4,r20
	vListInitialise( &xDelayedTaskList2 );
    1afc:	04400034 	movhi	r17,0
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    1b00:	000026c0 	call	26c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    1b04:	8c551c04 	addi	r17,r17,21616
    1b08:	8809883a 	mov	r4,r17
    1b0c:	000026c0 	call	26c <vListInitialise>
	vListInitialise( &xPendingReadyList );
    1b10:	01000034 	movhi	r4,0
    1b14:	21151704 	addi	r4,r4,21596
    1b18:	000026c0 	call	26c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    1b1c:	01000034 	movhi	r4,0
    1b20:	21151204 	addi	r4,r4,21576
    1b24:	000026c0 	call	26c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    1b28:	01000034 	movhi	r4,0
    1b2c:	21150d04 	addi	r4,r4,21556
    1b30:	000026c0 	call	26c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    1b34:	d5201d15 	stw	r20,-32652(gp)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    1b38:	d4601c15 	stw	r17,-32656(gp)
    1b3c:	00000606 	br	1b58 <xTaskGenericCreate+0x1f8>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    1b40:	d0a01717 	ldw	r2,-32676(gp)
    1b44:	1000041e 	bne	r2,zero,1b58 <xTaskGenericCreate+0x1f8>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    1b48:	d0a01e17 	ldw	r2,-32648(gp)
    1b4c:	10800b17 	ldw	r2,44(r2)
    1b50:	98800136 	bltu	r19,r2,1b58 <xTaskGenericCreate+0x1f8>
					{
						pxCurrentTCB = pxNewTCB;
    1b54:	d4201e15 	stw	r16,-32648(gp)
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
    1b58:	d0a01317 	ldw	r2,-32692(gp)
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
    1b5c:	81000b17 	ldw	r4,44(r16)
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
    1b60:	10800044 	addi	r2,r2,1
    1b64:	d0a01315 	stw	r2,-32692(gp)
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
    1b68:	d0a01817 	ldw	r2,-32672(gp)
    1b6c:	1100012e 	bgeu	r2,r4,1b74 <xTaskGenericCreate+0x214>
    1b70:	d1201815 	stw	r4,-32672(gp)
    1b74:	01400504 	movi	r5,20
    1b78:	00027b00 	call	27b0 <__mulsi3>
    1b7c:	9089883a 	add	r4,r18,r2
    1b80:	b80b883a 	mov	r5,r23
    1b84:	00002940 	call	294 <vListInsertEnd>

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    1b88:	00019240 	call	1924 <vTaskExitCritical>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    1b8c:	d0a01717 	ldw	r2,-32676(gp)
    1b90:	10000426 	beq	r2,zero,1ba4 <xTaskGenericCreate+0x244>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    1b94:	d0a01e17 	ldw	r2,-32648(gp)
    1b98:	10800b17 	ldw	r2,44(r2)
    1b9c:	14c0012e 	bgeu	r2,r19,1ba4 <xTaskGenericCreate+0x244>
			{
				taskYIELD_IF_USING_PREEMPTION();
    1ba0:	003b683a 	trap	0
    1ba4:	00800044 	movi	r2,1
    1ba8:	00000106 	br	1bb0 <xTaskGenericCreate+0x250>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    1bac:	00bfffc4 	movi	r2,-1
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
    1bb0:	dfc00817 	ldw	ra,32(sp)
    1bb4:	ddc00717 	ldw	r23,28(sp)
    1bb8:	dd800617 	ldw	r22,24(sp)
    1bbc:	dd400517 	ldw	r21,20(sp)
    1bc0:	dd000417 	ldw	r20,16(sp)
    1bc4:	dcc00317 	ldw	r19,12(sp)
    1bc8:	dc800217 	ldw	r18,8(sp)
    1bcc:	dc400117 	ldw	r17,4(sp)
    1bd0:	dc000017 	ldw	r16,0(sp)
    1bd4:	dec00904 	addi	sp,sp,36
    1bd8:	f800283a 	ret

00001bdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    1bdc:	defffb04 	addi	sp,sp,-20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
    1be0:	01000034 	movhi	r4,0
    1be4:	01400034 	movhi	r5,0
    1be8:	d8000015 	stw	zero,0(sp)
    1bec:	d8000115 	stw	zero,4(sp)
    1bf0:	d8000215 	stw	zero,8(sp)
    1bf4:	d8000315 	stw	zero,12(sp)
    1bf8:	21086d04 	addi	r4,r4,8628
    1bfc:	294c1304 	addi	r5,r5,12364
    1c00:	01810004 	movi	r6,1024
    1c04:	000f883a 	mov	r7,zero

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    1c08:	dfc00415 	stw	ra,16(sp)
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
    1c0c:	00019600 	call	1960 <xTaskGenericCreate>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    1c10:	00c00044 	movi	r3,1
    1c14:	10c00b1e 	bne	r2,r3,1c44 <vTaskStartScheduler+0x68>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1c18:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1c1c:	00ffff84 	movi	r3,-2
    1c20:	20c6703a 	and	r3,r4,r3
    1c24:	1801703a 	wrctl	status,r3
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    1c28:	00ffffc4 	movi	r3,-1
    1c2c:	d0e01215 	stw	r3,-32696(gp)
		xSchedulerRunning = pdTRUE;
    1c30:	d0a01715 	stw	r2,-32676(gp)
		xTickCount = ( TickType_t ) 0U;
    1c34:	d0201915 	stw	zero,-32668(gp)
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
    1c38:	dfc00417 	ldw	ra,16(sp)
    1c3c:	dec00504 	addi	sp,sp,20
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    1c40:	00005c81 	jmpi	5c8 <xPortStartScheduler>
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
    1c44:	dfc00417 	ldw	ra,16(sp)
    1c48:	dec00504 	addi	sp,sp,20
    1c4c:	f800283a 	ret

00001c50 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    1c50:	defffd04 	addi	sp,sp,-12
    1c54:	dc000015 	stw	r16,0(sp)
    1c58:	2021883a 	mov	r16,r4
    1c5c:	dfc00215 	stw	ra,8(sp)
    1c60:	dc400115 	stw	r17,4(sp)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    1c64:	00018f40 	call	18f4 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    1c68:	8000011e 	bne	r16,zero,1c70 <vTaskDelete+0x20>
    1c6c:	d4201e17 	ldw	r16,-32648(gp)

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1c70:	84400104 	addi	r17,r16,4
    1c74:	8809883a 	mov	r4,r17
    1c78:	00003180 	call	318 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1c7c:	80800a17 	ldw	r2,40(r16)
    1c80:	10000226 	beq	r2,zero,1c8c <vTaskDelete+0x3c>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1c84:	81000604 	addi	r4,r16,24
    1c88:	00003180 	call	318 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    1c8c:	01000034 	movhi	r4,0
    1c90:	21151204 	addi	r4,r4,21576
    1c94:	880b883a 	mov	r5,r17
    1c98:	00002940 	call	294 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    1c9c:	d0a01b17 	ldw	r2,-32660(gp)
    1ca0:	10800044 	addi	r2,r2,1
    1ca4:	d0a01b15 	stw	r2,-32660(gp)

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    1ca8:	d0a01317 	ldw	r2,-32692(gp)
    1cac:	10800044 	addi	r2,r2,1
    1cb0:	d0a01315 	stw	r2,-32692(gp)

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    1cb4:	00019240 	call	1924 <vTaskExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    1cb8:	d0a01717 	ldw	r2,-32676(gp)
    1cbc:	10000b26 	beq	r2,zero,1cec <vTaskDelete+0x9c>
		{
			if( pxTCB == pxCurrentTCB )
    1cc0:	d0a01e17 	ldw	r2,-32648(gp)
    1cc4:	8080021e 	bne	r16,r2,1cd0 <vTaskDelete+0x80>
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
    1cc8:	003b683a 	trap	0
    1ccc:	00000706 	br	1cec <vTaskDelete+0x9c>
			}
			else
			{
				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				taskENTER_CRITICAL();
    1cd0:	00018f40 	call	18f4 <vTaskEnterCritical>
				{
					prvResetNextTaskUnblockTime();
    1cd4:	00011700 	call	1170 <prvResetNextTaskUnblockTime>
				}
				taskEXIT_CRITICAL();
			}
		}
	}
    1cd8:	dfc00217 	ldw	ra,8(sp)
    1cdc:	dc400117 	ldw	r17,4(sp)
    1ce0:	dc000017 	ldw	r16,0(sp)
    1ce4:	dec00304 	addi	sp,sp,12
				the task that has just been deleted. */
				taskENTER_CRITICAL();
				{
					prvResetNextTaskUnblockTime();
				}
				taskEXIT_CRITICAL();
    1ce8:	00019241 	jmpi	1924 <vTaskExitCritical>
			}
		}
	}
    1cec:	dfc00217 	ldw	ra,8(sp)
    1cf0:	dc400117 	ldw	r17,4(sp)
    1cf4:	dc000017 	ldw	r16,0(sp)
    1cf8:	dec00304 	addi	sp,sp,12
    1cfc:	f800283a 	ret

00001d00 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
    1d00:	defffe04 	addi	sp,sp,-8
    1d04:	dc000015 	stw	r16,0(sp)
    1d08:	2021883a 	mov	r16,r4
    1d0c:	dfc00115 	stw	ra,4(sp)
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
    1d10:	00018f40 	call	18f4 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
    1d14:	8000011e 	bne	r16,zero,1d1c <uxTaskPriorityGet+0x1c>
    1d18:	d4201e17 	ldw	r16,-32648(gp)
			uxReturn = pxTCB->uxPriority;
    1d1c:	84000b17 	ldw	r16,44(r16)
		}
		taskEXIT_CRITICAL();
    1d20:	00019240 	call	1924 <vTaskExitCritical>

		return uxReturn;
	}
    1d24:	8005883a 	mov	r2,r16
    1d28:	dfc00117 	ldw	ra,4(sp)
    1d2c:	dc000017 	ldw	r16,0(sp)
    1d30:	dec00204 	addi	sp,sp,8
    1d34:	f800283a 	ret

00001d38 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
    1d38:	defffb04 	addi	sp,sp,-20
    1d3c:	dc400115 	stw	r17,4(sp)
    1d40:	dc000015 	stw	r16,0(sp)
    1d44:	dfc00415 	stw	ra,16(sp)
    1d48:	dcc00315 	stw	r19,12(sp)
    1d4c:	dc800215 	stw	r18,8(sp)
    1d50:	00800104 	movi	r2,4
    1d54:	2021883a 	mov	r16,r4
    1d58:	2823883a 	mov	r17,r5
    1d5c:	1140012e 	bgeu	r2,r5,1d64 <vTaskPrioritySet+0x2c>
    1d60:	1023883a 	mov	r17,r2
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
    1d64:	00018f40 	call	18f4 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
    1d68:	8000011e 	bne	r16,zero,1d70 <vTaskPrioritySet+0x38>
    1d6c:	d4201e17 	ldw	r16,-32648(gp)

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
    1d70:	80801017 	ldw	r2,64(r16)
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
    1d74:	14402a26 	beq	r2,r17,1e20 <vTaskPrioritySet+0xe8>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
    1d78:	1440062e 	bgeu	r2,r17,1d94 <vTaskPrioritySet+0x5c>
				{
					if( pxTCB != pxCurrentTCB )
    1d7c:	d0e01e17 	ldw	r3,-32648(gp)
    1d80:	80c00726 	beq	r16,r3,1da0 <vTaskPrioritySet+0x68>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
    1d84:	d0e01e17 	ldw	r3,-32648(gp)
    1d88:	1c800b17 	ldw	r18,44(r3)
    1d8c:	8ca5403a 	cmpgeu	r18,r17,r18
    1d90:	00000406 	br	1da4 <vTaskPrioritySet+0x6c>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
    1d94:	d4a01e17 	ldw	r18,-32648(gp)
    1d98:	84a5003a 	cmpeq	r18,r16,r18
    1d9c:	00000106 	br	1da4 <vTaskPrioritySet+0x6c>

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
    1da0:	0025883a 	mov	r18,zero
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
    1da4:	81000b17 	ldw	r4,44(r16)

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    1da8:	1100011e 	bne	r2,r4,1db0 <vTaskPrioritySet+0x78>
					{
						pxTCB->uxPriority = uxNewPriority;
    1dac:	84400b15 	stw	r17,44(r16)
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    1db0:	80800617 	ldw	r2,24(r16)
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    1db4:	84401015 	stw	r17,64(r16)
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    1db8:	10000316 	blt	r2,zero,1dc8 <vTaskPrioritySet+0x90>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1dbc:	01400144 	movi	r5,5
    1dc0:	2c63c83a 	sub	r17,r5,r17
    1dc4:	84400615 	stw	r17,24(r16)

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    1dc8:	01400504 	movi	r5,20
    1dcc:	00027b00 	call	27b0 <__mulsi3>
    1dd0:	01000034 	movhi	r4,0
    1dd4:	80c00517 	ldw	r3,20(r16)
    1dd8:	21152604 	addi	r4,r4,21656
    1ddc:	2085883a 	add	r2,r4,r2
    1de0:	2023883a 	mov	r17,r4
    1de4:	18800c1e 	bne	r3,r2,1e18 <vTaskPrioritySet+0xe0>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1de8:	84c00104 	addi	r19,r16,4
    1dec:	9809883a 	mov	r4,r19
    1df0:	00003180 	call	318 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
    1df4:	81000b17 	ldw	r4,44(r16)
    1df8:	d0a01817 	ldw	r2,-32672(gp)
    1dfc:	1100012e 	bgeu	r2,r4,1e04 <vTaskPrioritySet+0xcc>
    1e00:	d1201815 	stw	r4,-32672(gp)
    1e04:	01400504 	movi	r5,20
    1e08:	00027b00 	call	27b0 <__mulsi3>
    1e0c:	8889883a 	add	r4,r17,r2
    1e10:	980b883a 	mov	r5,r19
    1e14:	00002940 	call	294 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired == pdTRUE )
    1e18:	90000126 	beq	r18,zero,1e20 <vTaskPrioritySet+0xe8>
				{
					taskYIELD_IF_USING_PREEMPTION();
    1e1c:	003b683a 	trap	0
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
	}
    1e20:	dfc00417 	ldw	ra,16(sp)
    1e24:	dcc00317 	ldw	r19,12(sp)
    1e28:	dc800217 	ldw	r18,8(sp)
    1e2c:	dc400117 	ldw	r17,4(sp)
    1e30:	dc000017 	ldw	r16,0(sp)
    1e34:	dec00504 	addi	sp,sp,20
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
    1e38:	00019241 	jmpi	1924 <vTaskExitCritical>

00001e3c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    1e3c:	defffc04 	addi	sp,sp,-16
    1e40:	dc000015 	stw	r16,0(sp)
    1e44:	2021883a 	mov	r16,r4
    1e48:	dfc00315 	stw	ra,12(sp)
    1e4c:	dc800215 	stw	r18,8(sp)
    1e50:	dc400115 	stw	r17,4(sp)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    1e54:	00018f40 	call	18f4 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    1e58:	8000011e 	bne	r16,zero,1e60 <vTaskSuspend+0x24>
    1e5c:	d4201e17 	ldw	r16,-32648(gp)

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1e60:	84800104 	addi	r18,r16,4
    1e64:	9009883a 	mov	r4,r18
    1e68:	00003180 	call	318 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1e6c:	80800a17 	ldw	r2,40(r16)
    1e70:	10000226 	beq	r2,zero,1e7c <vTaskSuspend+0x40>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1e74:	81000604 	addi	r4,r16,24
    1e78:	00003180 	call	318 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    1e7c:	04400034 	movhi	r17,0
    1e80:	8c550d04 	addi	r17,r17,21556
    1e84:	8809883a 	mov	r4,r17
    1e88:	900b883a 	mov	r5,r18
    1e8c:	00002940 	call	294 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    1e90:	00019240 	call	1924 <vTaskExitCritical>

		if( pxTCB == pxCurrentTCB )
    1e94:	d0a01e17 	ldw	r2,-32648(gp)
    1e98:	80800f1e 	bne	r16,r2,1ed8 <vTaskSuspend+0x9c>
		{
			if( xSchedulerRunning != pdFALSE )
    1e9c:	d0a01717 	ldw	r2,-32676(gp)
    1ea0:	10000226 	beq	r2,zero,1eac <vTaskSuspend+0x70>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    1ea4:	003b683a 	trap	0
    1ea8:	00001506 	br	1f00 <vTaskSuspend+0xc4>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    1eac:	d0a01a17 	ldw	r2,-32664(gp)
    1eb0:	88c00017 	ldw	r3,0(r17)
    1eb4:	1880021e 	bne	r3,r2,1ec0 <vTaskSuspend+0x84>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    1eb8:	d0201e15 	stw	zero,-32648(gp)
    1ebc:	00001006 	br	1f00 <vTaskSuspend+0xc4>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    1ec0:	dfc00317 	ldw	ra,12(sp)
    1ec4:	dc800217 	ldw	r18,8(sp)
    1ec8:	dc400117 	ldw	r17,4(sp)
    1ecc:	dc000017 	ldw	r16,0(sp)
    1ed0:	dec00404 	addi	sp,sp,16
					is. */
					pxCurrentTCB = NULL;
				}
				else
				{
					vTaskSwitchContext();
    1ed4:	000144c1 	jmpi	144c <vTaskSwitchContext>
				}
			}
		}
		else
		{
			if( xSchedulerRunning != pdFALSE )
    1ed8:	d0a01717 	ldw	r2,-32676(gp)
    1edc:	10000826 	beq	r2,zero,1f00 <vTaskSuspend+0xc4>
			{
				/* A task other than the currently running task was suspended,
				reset the next expected unblock time in case it referred to the
				task that is now in the Suspended state. */
				taskENTER_CRITICAL();
    1ee0:	00018f40 	call	18f4 <vTaskEnterCritical>
				{
					prvResetNextTaskUnblockTime();
    1ee4:	00011700 	call	1170 <prvResetNextTaskUnblockTime>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    1ee8:	dfc00317 	ldw	ra,12(sp)
    1eec:	dc800217 	ldw	r18,8(sp)
    1ef0:	dc400117 	ldw	r17,4(sp)
    1ef4:	dc000017 	ldw	r16,0(sp)
    1ef8:	dec00404 	addi	sp,sp,16
				task that is now in the Suspended state. */
				taskENTER_CRITICAL();
				{
					prvResetNextTaskUnblockTime();
				}
				taskEXIT_CRITICAL();
    1efc:	00019241 	jmpi	1924 <vTaskExitCritical>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    1f00:	dfc00317 	ldw	ra,12(sp)
    1f04:	dc800217 	ldw	r18,8(sp)
    1f08:	dc400117 	ldw	r17,4(sp)
    1f0c:	dc000017 	ldw	r16,0(sp)
    1f10:	dec00404 	addi	sp,sp,16
    1f14:	f800283a 	ret

00001f18 <vTaskResume>:
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    1f18:	20002426 	beq	r4,zero,1fac <vTaskResume+0x94>
    1f1c:	d0a01e17 	ldw	r2,-32648(gp)
    1f20:	20802226 	beq	r4,r2,1fac <vTaskResume+0x94>
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
    1f24:	defffd04 	addi	sp,sp,-12
    1f28:	dfc00215 	stw	ra,8(sp)
    1f2c:	dc000015 	stw	r16,0(sp)
    1f30:	dc400115 	stw	r17,4(sp)
    1f34:	2021883a 	mov	r16,r4

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
		{
			taskENTER_CRITICAL();
    1f38:	00018f40 	call	18f4 <vTaskEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    1f3c:	8009883a 	mov	r4,r16
    1f40:	00011440 	call	1144 <prvTaskIsTaskSuspended>
    1f44:	00c00044 	movi	r3,1
    1f48:	10c0131e 	bne	r2,r3,1f98 <vTaskResume+0x80>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
    1f4c:	84400104 	addi	r17,r16,4
    1f50:	8809883a 	mov	r4,r17
    1f54:	00003180 	call	318 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    1f58:	81000b17 	ldw	r4,44(r16)
    1f5c:	d0a01817 	ldw	r2,-32672(gp)
    1f60:	1100012e 	bgeu	r2,r4,1f68 <vTaskResume+0x50>
    1f64:	d1201815 	stw	r4,-32672(gp)
    1f68:	01400504 	movi	r5,20
    1f6c:	00027b00 	call	27b0 <__mulsi3>
    1f70:	01000034 	movhi	r4,0
    1f74:	21152604 	addi	r4,r4,21656
    1f78:	2089883a 	add	r4,r4,r2
    1f7c:	880b883a 	mov	r5,r17
    1f80:	00002940 	call	294 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1f84:	d0a01e17 	ldw	r2,-32648(gp)
    1f88:	80c00b17 	ldw	r3,44(r16)
    1f8c:	10800b17 	ldw	r2,44(r2)
    1f90:	18800136 	bltu	r3,r2,1f98 <vTaskResume+0x80>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
    1f94:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1f98:	dfc00217 	ldw	ra,8(sp)
    1f9c:	dc400117 	ldw	r17,4(sp)
    1fa0:	dc000017 	ldw	r16,0(sp)
    1fa4:	dec00304 	addi	sp,sp,12
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    1fa8:	00019241 	jmpi	1924 <vTaskExitCritical>
    1fac:	f800283a 	ret

00001fb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    1fb0:	defffa04 	addi	sp,sp,-24
    1fb4:	dfc00515 	stw	ra,20(sp)
    1fb8:	dd000415 	stw	r20,16(sp)
    1fbc:	dcc00315 	stw	r19,12(sp)
    1fc0:	dc800215 	stw	r18,8(sp)
    1fc4:	dc400115 	stw	r17,4(sp)
    1fc8:	dc000015 	stw	r16,0(sp)
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    1fcc:	00018f40 	call	18f4 <vTaskEnterCritical>
	{
		--uxSchedulerSuspended;
    1fd0:	d0a01117 	ldw	r2,-32700(gp)
    1fd4:	10bfffc4 	addi	r2,r2,-1
    1fd8:	d0a01115 	stw	r2,-32700(gp)

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1fdc:	d0a01117 	ldw	r2,-32700(gp)
    1fe0:	10000226 	beq	r2,zero,1fec <xTaskResumeAll+0x3c>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    1fe4:	0021883a 	mov	r16,zero
    1fe8:	00003006 	br	20ac <xTaskResumeAll+0xfc>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    1fec:	d0a01a17 	ldw	r2,-32664(gp)
    1ff0:	103ffc26 	beq	r2,zero,1fe4 <xTaskResumeAll+0x34>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    1ff4:	04400034 	movhi	r17,0
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
    1ff8:	04c00034 	movhi	r19,0
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    1ffc:	8c551704 	addi	r17,r17,21596
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
    2000:	9cd52604 	addi	r19,r19,21656

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
					{
						xYieldPending = pdTRUE;
    2004:	05000044 	movi	r20,1
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    2008:	88800017 	ldw	r2,0(r17)
    200c:	10001626 	beq	r2,zero,2068 <xTaskResumeAll+0xb8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    2010:	88800317 	ldw	r2,12(r17)
    2014:	14000317 	ldw	r16,12(r2)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    2018:	81000604 	addi	r4,r16,24
    201c:	00003180 	call	318 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    2020:	84800104 	addi	r18,r16,4
    2024:	9009883a 	mov	r4,r18
    2028:	00003180 	call	318 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    202c:	81000b17 	ldw	r4,44(r16)
    2030:	d0a01817 	ldw	r2,-32672(gp)
    2034:	1100012e 	bgeu	r2,r4,203c <xTaskResumeAll+0x8c>
    2038:	d1201815 	stw	r4,-32672(gp)
    203c:	01400504 	movi	r5,20
    2040:	00027b00 	call	27b0 <__mulsi3>
    2044:	9889883a 	add	r4,r19,r2
    2048:	900b883a 	mov	r5,r18
    204c:	00002940 	call	294 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2050:	d0a01e17 	ldw	r2,-32648(gp)
    2054:	80c00b17 	ldw	r3,44(r16)
    2058:	10800b17 	ldw	r2,44(r2)
    205c:	18bfea36 	bltu	r3,r2,2008 <xTaskResumeAll+0x58>
					{
						xYieldPending = pdTRUE;
    2060:	d5201515 	stw	r20,-32684(gp)
    2064:	003fe806 	br	2008 <xTaskResumeAll+0x58>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
    2068:	d0a01617 	ldw	r2,-32680(gp)
    206c:	1000051e 	bne	r2,zero,2084 <xTaskResumeAll+0xd4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    2070:	d4201517 	ldw	r16,-32684(gp)
    2074:	00800044 	movi	r2,1
    2078:	80bfda1e 	bne	r16,r2,1fe4 <xTaskResumeAll+0x34>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    207c:	003b683a 	trap	0
    2080:	00000a06 	br	20ac <xTaskResumeAll+0xfc>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
						{
							xYieldPending = pdTRUE;
    2084:	04000044 	movi	r16,1
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    2088:	d0a01617 	ldw	r2,-32680(gp)
    208c:	103ff826 	beq	r2,zero,2070 <xTaskResumeAll+0xc0>
					{
						if( xTaskIncrementTick() != pdFALSE )
    2090:	00012f00 	call	12f0 <xTaskIncrementTick>
    2094:	10000126 	beq	r2,zero,209c <xTaskResumeAll+0xec>
						{
							xYieldPending = pdTRUE;
    2098:	d4201515 	stw	r16,-32684(gp)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    209c:	d0a01617 	ldw	r2,-32680(gp)
    20a0:	10bfffc4 	addi	r2,r2,-1
    20a4:	d0a01615 	stw	r2,-32680(gp)
    20a8:	003ff706 	br	2088 <xTaskResumeAll+0xd8>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    20ac:	00019240 	call	1924 <vTaskExitCritical>

	return xAlreadyYielded;
}
    20b0:	8005883a 	mov	r2,r16
    20b4:	dfc00517 	ldw	ra,20(sp)
    20b8:	dd000417 	ldw	r20,16(sp)
    20bc:	dcc00317 	ldw	r19,12(sp)
    20c0:	dc800217 	ldw	r18,8(sp)
    20c4:	dc400117 	ldw	r17,4(sp)
    20c8:	dc000017 	ldw	r16,0(sp)
    20cc:	dec00604 	addi	sp,sp,24
    20d0:	f800283a 	ret

000020d4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    20d4:	defffd04 	addi	sp,sp,-12
    20d8:	dc400115 	stw	r17,4(sp)
    20dc:	dc000015 	stw	r16,0(sp)
    20e0:	2023883a 	mov	r17,r4
    20e4:	2821883a 	mov	r16,r5
    20e8:	dfc00215 	stw	ra,8(sp)

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
    20ec:	00012c80 	call	12c8 <vTaskSuspendAll>
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    20f0:	88c00017 	ldw	r3,0(r17)

		vTaskSuspendAll();
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    20f4:	d0a01917 	ldw	r2,-32668(gp)

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    20f8:	1c21883a 	add	r16,r3,r16

			if( xConstTickCount < *pxPreviousWakeTime )
    20fc:	10c0022e 	bgeu	r2,r3,2108 <vTaskDelayUntil+0x34>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    2100:	80c0042e 	bgeu	r16,r3,2114 <vTaskDelayUntil+0x40>
    2104:	00000106 	br	210c <vTaskDelayUntil+0x38>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    2108:	80c00436 	bltu	r16,r3,211c <vTaskDelayUntil+0x48>
    210c:	1405803a 	cmpltu	r2,r2,r16
    2110:	00000306 	br	2120 <vTaskDelayUntil+0x4c>
#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    2114:	0005883a 	mov	r2,zero
    2118:	00000106 	br	2120 <vTaskDelayUntil+0x4c>
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
				{
					xShouldDelay = pdTRUE;
    211c:	00800044 	movi	r2,1
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    2120:	8c000015 	stw	r16,0(r17)

			if( xShouldDelay != pdFALSE )
    2124:	10000526 	beq	r2,zero,213c <vTaskDelayUntil+0x68>
			{
				traceTASK_DELAY_UNTIL();

				/* Remove the task from the ready list before adding it to the
				blocked list as the same list item is used for both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2128:	d1201e17 	ldw	r4,-32648(gp)
    212c:	21000104 	addi	r4,r4,4
    2130:	00003180 	call	318 <uxListRemove>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
    2134:	8009883a 	mov	r4,r16
    2138:	000119c0 	call	119c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    213c:	0001fb00 	call	1fb0 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    2140:	1000011e 	bne	r2,zero,2148 <vTaskDelayUntil+0x74>
		{
			portYIELD_WITHIN_API();
    2144:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2148:	dfc00217 	ldw	ra,8(sp)
    214c:	dc400117 	ldw	r17,4(sp)
    2150:	dc000017 	ldw	r16,0(sp)
    2154:	dec00304 	addi	sp,sp,12
    2158:	f800283a 	ret

0000215c <vTaskDelay>:
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    215c:	20001326 	beq	r4,zero,21ac <vTaskDelay+0x50>
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    2160:	defffe04 	addi	sp,sp,-8
    2164:	dfc00115 	stw	ra,4(sp)
    2168:	dc000015 	stw	r16,0(sp)
    216c:	2021883a 	mov	r16,r4

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    2170:	00012c80 	call	12c8 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    2174:	d1201917 	ldw	r4,-32668(gp)
    2178:	8121883a 	add	r16,r16,r4

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    217c:	d1201e17 	ldw	r4,-32648(gp)
    2180:	21000104 	addi	r4,r4,4
    2184:	00003180 	call	318 <uxListRemove>
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    2188:	8009883a 	mov	r4,r16
    218c:	000119c0 	call	119c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    2190:	0001fb00 	call	1fb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    2194:	1000011e 	bne	r2,zero,219c <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
    2198:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    219c:	dfc00117 	ldw	ra,4(sp)
    21a0:	dc000017 	ldw	r16,0(sp)
    21a4:	dec00204 	addi	sp,sp,8
    21a8:	f800283a 	ret

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
    21ac:	003b683a 	trap	0
    21b0:	f800283a 	ret

000021b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    21b4:	defffd04 	addi	sp,sp,-12
    21b8:	dc400115 	stw	r17,4(sp)
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    21bc:	04400034 	movhi	r17,0
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    21c0:	dfc00215 	stw	ra,8(sp)
    21c4:	dc000015 	stw	r16,0(sp)
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    21c8:	8c551204 	addi	r17,r17,21576
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    21cc:	d0a01b17 	ldw	r2,-32660(gp)
    21d0:	103ffe26 	beq	r2,zero,21cc <prvIdleTask+0x18>
		{
			vTaskSuspendAll();
    21d4:	00012c80 	call	12c8 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    21d8:	8c000017 	ldw	r16,0(r17)
			}
			( void ) xTaskResumeAll();
    21dc:	0001fb00 	call	1fb0 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    21e0:	803ffa26 	beq	r16,zero,21cc <prvIdleTask+0x18>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    21e4:	00018f40 	call	18f4 <vTaskEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    21e8:	00800034 	movhi	r2,0
    21ec:	10951204 	addi	r2,r2,21576
    21f0:	10800317 	ldw	r2,12(r2)
    21f4:	14000317 	ldw	r16,12(r2)
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    21f8:	81000104 	addi	r4,r16,4
    21fc:	00003180 	call	318 <uxListRemove>
					--uxCurrentNumberOfTasks;
    2200:	d0a01a17 	ldw	r2,-32664(gp)
    2204:	10bfffc4 	addi	r2,r2,-1
    2208:	d0a01a15 	stw	r2,-32664(gp)
					--uxTasksDeleted;
    220c:	d0a01b17 	ldw	r2,-32660(gp)
    2210:	10bfffc4 	addi	r2,r2,-1
    2214:	d0a01b15 	stw	r2,-32660(gp)
				}
				taskEXIT_CRITICAL();
    2218:	00019240 	call	1924 <vTaskExitCritical>
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
    221c:	81000c17 	ldw	r4,48(r16)
    2220:	00006e00 	call	6e0 <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
    2224:	8009883a 	mov	r4,r16
    2228:	00006e00 	call	6e0 <vPortFree>
    222c:	003fe706 	br	21cc <prvIdleTask+0x18>

00002230 <xTaskCheckForTimeOut>:
	pxTimeOut->xTimeOnEntering = xTickCount;
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    2230:	defffd04 	addi	sp,sp,-12
    2234:	dc000115 	stw	r16,4(sp)
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    2238:	d9000015 	stw	r4,0(sp)
	pxTimeOut->xTimeOnEntering = xTickCount;
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    223c:	2821883a 	mov	r16,r5
    2240:	dfc00215 	stw	ra,8(sp)
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    2244:	00018f40 	call	18f4 <vTaskEnterCritical>

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    2248:	80800017 	ldw	r2,0(r16)
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    224c:	d1a01917 	ldw	r6,-32668(gp)

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    2250:	00ffffc4 	movi	r3,-1
    2254:	d9000017 	ldw	r4,0(sp)
    2258:	10c00c26 	beq	r2,r3,228c <xTaskCheckForTimeOut+0x5c>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    225c:	d1601417 	ldw	r5,-32688(gp)
    2260:	20c00017 	ldw	r3,0(r4)
    2264:	28c00226 	beq	r5,r3,2270 <xTaskCheckForTimeOut+0x40>
    2268:	20c00117 	ldw	r3,4(r4)
    226c:	30c0092e 	bgeu	r6,r3,2294 <xTaskCheckForTimeOut+0x64>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    2270:	20c00117 	ldw	r3,4(r4)
    2274:	30cbc83a 	sub	r5,r6,r3
    2278:	2880062e 	bgeu	r5,r2,2294 <xTaskCheckForTimeOut+0x64>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    227c:	1987c83a 	sub	r3,r3,r6
    2280:	1885883a 	add	r2,r3,r2
    2284:	80800015 	stw	r2,0(r16)
			vTaskSetTimeOutState( pxTimeOut );
    2288:	00017200 	call	1720 <vTaskSetTimeOutState>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
    228c:	0021883a 	mov	r16,zero
    2290:	00000106 	br	2298 <xTaskCheckForTimeOut+0x68>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    2294:	04000044 	movi	r16,1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
    2298:	00019240 	call	1924 <vTaskExitCritical>

	return xReturn;
}
    229c:	8005883a 	mov	r2,r16
    22a0:	dfc00217 	ldw	ra,8(sp)
    22a4:	dc000117 	ldw	r16,4(sp)
    22a8:	dec00304 	addi	sp,sp,12
    22ac:	f800283a 	ret

000022b0 <uxTaskResetEventItemValue>:

TickType_t uxTaskResetEventItemValue( void )
{
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    22b0:	d0a01e17 	ldw	r2,-32648(gp)

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    22b4:	d1201e17 	ldw	r4,-32648(gp)
    22b8:	d0e01e17 	ldw	r3,-32648(gp)

TickType_t uxTaskResetEventItemValue( void )
{
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    22bc:	10800617 	ldw	r2,24(r2)

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    22c0:	19400b17 	ldw	r5,44(r3)
    22c4:	00c00144 	movi	r3,5
    22c8:	1947c83a 	sub	r3,r3,r5
    22cc:	20c00615 	stw	r3,24(r4)

	return uxReturn;
}
    22d0:	f800283a 	ret

000022d4 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    22d4:	d0a01e17 	ldw	r2,-32648(gp)
    22d8:	10000426 	beq	r2,zero,22ec <pvTaskIncrementMutexHeldCount+0x18>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    22dc:	d0e01e17 	ldw	r3,-32648(gp)
    22e0:	18801117 	ldw	r2,68(r3)
    22e4:	10800044 	addi	r2,r2,1
    22e8:	18801115 	stw	r2,68(r3)
		}

		return pxCurrentTCB;
    22ec:	d0a01e17 	ldw	r2,-32648(gp)
	}
    22f0:	f800283a 	ret

000022f4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    22f4:	defffd04 	addi	sp,sp,-12
    22f8:	dc400115 	stw	r17,4(sp)
    22fc:	dc000015 	stw	r16,0(sp)
    2300:	dfc00215 	stw	ra,8(sp)
    2304:	2023883a 	mov	r17,r4
    2308:	2821883a 	mov	r16,r5
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    230c:	00018f40 	call	18f4 <vTaskEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    2310:	d0a01e17 	ldw	r2,-32648(gp)
    2314:	10801217 	ldw	r2,72(r2)
    2318:	1000131e 	bne	r2,zero,2368 <ulTaskNotifyTake+0x74>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
    231c:	d0a01e17 	ldw	r2,-32648(gp)
    2320:	00c00044 	movi	r3,1
    2324:	10c01315 	stw	r3,76(r2)

				if( xTicksToWait > ( TickType_t ) 0 )
    2328:	80000f26 	beq	r16,zero,2368 <ulTaskNotifyTake+0x74>
				{
					/* The task is going to block.  First it must be removed
					from the ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    232c:	d1201e17 	ldw	r4,-32648(gp)
    2330:	21000104 	addi	r4,r4,4
    2334:	00003180 	call	318 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					#if ( INCLUDE_vTaskSuspend == 1 )
					{
						if( xTicksToWait == portMAX_DELAY )
    2338:	00bfffc4 	movi	r2,-1
    233c:	8080061e 	bne	r16,r2,2358 <ulTaskNotifyTake+0x64>
						{
							/* Add the task to the suspended task list instead
							of a delayed task list to ensure the task is not
							woken by a timing event.  It will block
							indefinitely. */
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    2340:	d1601e17 	ldw	r5,-32648(gp)
    2344:	01000034 	movhi	r4,0
    2348:	21150d04 	addi	r4,r4,21556
    234c:	29400104 	addi	r5,r5,4
    2350:	00002940 	call	294 <vListInsertEnd>
    2354:	00000306 	br	2364 <ulTaskNotifyTake+0x70>
						{
							/* Calculate the time at which the task should be
							woken if no notification events occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
    2358:	d1201917 	ldw	r4,-32668(gp)
							prvAddCurrentTaskToDelayedList( xTimeToWake );
    235c:	8109883a 	add	r4,r16,r4
    2360:	000119c0 	call	119c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    2364:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    2368:	00019240 	call	1924 <vTaskExitCritical>

		taskENTER_CRITICAL();
    236c:	00018f40 	call	18f4 <vTaskEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    2370:	d0a01e17 	ldw	r2,-32648(gp)
    2374:	14001217 	ldw	r16,72(r2)

			if( ulReturn != 0UL )
    2378:	80000726 	beq	r16,zero,2398 <ulTaskNotifyTake+0xa4>
			{
				if( xClearCountOnExit != pdFALSE )
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    237c:	d0a01e17 	ldw	r2,-32648(gp)
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;

			if( ulReturn != 0UL )
			{
				if( xClearCountOnExit != pdFALSE )
    2380:	88000226 	beq	r17,zero,238c <ulTaskNotifyTake+0x98>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    2384:	10001215 	stw	zero,72(r2)
    2388:	00000306 	br	2398 <ulTaskNotifyTake+0xa4>
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
    238c:	10c01217 	ldw	r3,72(r2)
    2390:	18ffffc4 	addi	r3,r3,-1
    2394:	10c01215 	stw	r3,72(r2)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
    2398:	d0a01e17 	ldw	r2,-32648(gp)
    239c:	10001315 	stw	zero,76(r2)
		}
		taskEXIT_CRITICAL();
    23a0:	00019240 	call	1924 <vTaskExitCritical>

		return ulReturn;
	}
    23a4:	8005883a 	mov	r2,r16
    23a8:	dfc00217 	ldw	ra,8(sp)
    23ac:	dc400117 	ldw	r17,4(sp)
    23b0:	dc000017 	ldw	r16,0(sp)
    23b4:	dec00304 	addi	sp,sp,12
    23b8:	f800283a 	ret

000023bc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    23bc:	defffb04 	addi	sp,sp,-20
    23c0:	dcc00315 	stw	r19,12(sp)
    23c4:	dc800215 	stw	r18,8(sp)
    23c8:	dc400115 	stw	r17,4(sp)
    23cc:	dc000015 	stw	r16,0(sp)
    23d0:	dfc00415 	stw	ra,16(sp)
    23d4:	2025883a 	mov	r18,r4
    23d8:	2823883a 	mov	r17,r5
    23dc:	3027883a 	mov	r19,r6
    23e0:	3821883a 	mov	r16,r7
	TickType_t xTimeToWake;
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    23e4:	00018f40 	call	18f4 <vTaskEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->eNotifyState != eNotified )
    23e8:	d0a01e17 	ldw	r2,-32648(gp)
    23ec:	10c01317 	ldw	r3,76(r2)
    23f0:	00800084 	movi	r2,2
    23f4:	18801826 	beq	r3,r2,2458 <xTaskNotifyWait+0x9c>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    23f8:	d0e01e17 	ldw	r3,-32648(gp)
    23fc:	0488303a 	nor	r4,zero,r18
    2400:	18801217 	ldw	r2,72(r3)
    2404:	2088703a 	and	r4,r4,r2
    2408:	19001215 	stw	r4,72(r3)

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
    240c:	d0a01e17 	ldw	r2,-32648(gp)
    2410:	00c00044 	movi	r3,1
    2414:	10c01315 	stw	r3,76(r2)

				if( xTicksToWait > ( TickType_t ) 0 )
    2418:	80000f26 	beq	r16,zero,2458 <xTaskNotifyWait+0x9c>
				{
					/* The task is going to block.  First it must be removed
					from the	ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    241c:	d1201e17 	ldw	r4,-32648(gp)
    2420:	21000104 	addi	r4,r4,4
    2424:	00003180 	call	318 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					#if ( INCLUDE_vTaskSuspend == 1 )
					{
						if( xTicksToWait == portMAX_DELAY )
    2428:	00bfffc4 	movi	r2,-1
    242c:	8080061e 	bne	r16,r2,2448 <xTaskNotifyWait+0x8c>
						{
							/* Add the task to the suspended task list instead
							of a delayed task list to ensure the task is not
							woken by a timing event.  It will block
							indefinitely. */
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    2430:	d1601e17 	ldw	r5,-32648(gp)
    2434:	01000034 	movhi	r4,0
    2438:	21150d04 	addi	r4,r4,21556
    243c:	29400104 	addi	r5,r5,4
    2440:	00002940 	call	294 <vListInsertEnd>
    2444:	00000306 	br	2454 <xTaskNotifyWait+0x98>
						{
							/* Calculate the time at which the task should be
							woken if no notification events occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
    2448:	d1201917 	ldw	r4,-32668(gp)
							prvAddCurrentTaskToDelayedList( xTimeToWake );
    244c:	8109883a 	add	r4,r16,r4
    2450:	000119c0 	call	119c <prvAddCurrentTaskToDelayedList>
					
					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    2454:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    2458:	00019240 	call	1924 <vTaskExitCritical>

		taskENTER_CRITICAL();
    245c:	00018f40 	call	18f4 <vTaskEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();
			
			if( pulNotificationValue != NULL )
    2460:	98000326 	beq	r19,zero,2470 <xTaskNotifyWait+0xb4>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    2464:	d0a01e17 	ldw	r2,-32648(gp)
    2468:	10801217 	ldw	r2,72(r2)
    246c:	98800015 	stw	r2,0(r19)

			/* If eNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
    2470:	d0a01e17 	ldw	r2,-32648(gp)
    2474:	04000044 	movi	r16,1
    2478:	10801317 	ldw	r2,76(r2)
    247c:	14000626 	beq	r2,r16,2498 <xTaskNotifyWait+0xdc>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    2480:	d0e01e17 	ldw	r3,-32648(gp)
    2484:	044a303a 	nor	r5,zero,r17
    2488:	18801217 	ldw	r2,72(r3)
    248c:	288a703a 	and	r5,r5,r2
    2490:	19401215 	stw	r5,72(r3)
    2494:	00000106 	br	249c <xTaskNotifyWait+0xe0>
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
    2498:	0021883a 	mov	r16,zero
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
				xReturn = pdTRUE;
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
    249c:	d0a01e17 	ldw	r2,-32648(gp)
    24a0:	10001315 	stw	zero,76(r2)
		}
		taskEXIT_CRITICAL();
    24a4:	00019240 	call	1924 <vTaskExitCritical>

		return xReturn;
	}
    24a8:	8005883a 	mov	r2,r16
    24ac:	dfc00417 	ldw	ra,16(sp)
    24b0:	dcc00317 	ldw	r19,12(sp)
    24b4:	dc800217 	ldw	r18,8(sp)
    24b8:	dc400117 	ldw	r17,4(sp)
    24bc:	dc000017 	ldw	r16,0(sp)
    24c0:	dec00504 	addi	sp,sp,20
    24c4:	f800283a 	ret

000024c8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
    24c8:	defffb04 	addi	sp,sp,-20
    24cc:	dcc00315 	stw	r19,12(sp)
    24d0:	3827883a 	mov	r19,r7
    24d4:	dc800215 	stw	r18,8(sp)
    24d8:	dc400115 	stw	r17,4(sp)
    24dc:	dc000015 	stw	r16,0(sp)
    24e0:	dfc00415 	stw	ra,16(sp)
    24e4:	2021883a 	mov	r16,r4
    24e8:	2825883a 	mov	r18,r5
    24ec:	3023883a 	mov	r17,r6
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
    24f0:	00018f40 	call	18f4 <vTaskEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
    24f4:	98000226 	beq	r19,zero,2500 <xTaskGenericNotify+0x38>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    24f8:	80801217 	ldw	r2,72(r16)
    24fc:	98800015 	stw	r2,0(r19)
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
    2500:	80c01317 	ldw	r3,76(r16)

			pxTCB->eNotifyState = eNotified;
    2504:	00800084 	movi	r2,2
    2508:	80801315 	stw	r2,76(r16)

			switch( eAction )
    250c:	88800b26 	beq	r17,r2,253c <xTaskGenericNotify+0x74>
    2510:	14400536 	bltu	r2,r17,2528 <xTaskGenericNotify+0x60>
    2514:	00800044 	movi	r2,1
    2518:	88800e1e 	bne	r17,r2,2554 <xTaskGenericNotify+0x8c>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    251c:	81401217 	ldw	r5,72(r16)
    2520:	9164b03a 	or	r18,r18,r5
    2524:	00000a06 	br	2550 <xTaskGenericNotify+0x88>

			eOriginalNotifyState = pxTCB->eNotifyState;

			pxTCB->eNotifyState = eNotified;

			switch( eAction )
    2528:	010000c4 	movi	r4,3
    252c:	89000826 	beq	r17,r4,2550 <xTaskGenericNotify+0x88>
    2530:	01000104 	movi	r4,4
    2534:	89000526 	beq	r17,r4,254c <xTaskGenericNotify+0x84>
    2538:	00000606 	br	2554 <xTaskGenericNotify+0x8c>
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    253c:	80801217 	ldw	r2,72(r16)
    2540:	10800044 	addi	r2,r2,1
    2544:	80801215 	stw	r2,72(r16)
					break;
    2548:	00000206 	br	2554 <xTaskGenericNotify+0x8c>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
    254c:	18801826 	beq	r3,r2,25b0 <xTaskGenericNotify+0xe8>
					{
						pxTCB->ulNotifiedValue = ulValue;
    2550:	84801215 	stw	r18,72(r16)

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
    2554:	00800044 	movi	r2,1
    2558:	1880131e 	bne	r3,r2,25a8 <xTaskGenericNotify+0xe0>
			{
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    255c:	84400104 	addi	r17,r16,4
    2560:	8809883a 	mov	r4,r17
    2564:	00003180 	call	318 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    2568:	81000b17 	ldw	r4,44(r16)
    256c:	d0a01817 	ldw	r2,-32672(gp)
    2570:	1100012e 	bgeu	r2,r4,2578 <xTaskGenericNotify+0xb0>
    2574:	d1201815 	stw	r4,-32672(gp)
    2578:	01400504 	movi	r5,20
    257c:	00027b00 	call	27b0 <__mulsi3>
    2580:	01000034 	movhi	r4,0
    2584:	21152604 	addi	r4,r4,21656
    2588:	2089883a 	add	r4,r4,r2
    258c:	880b883a 	mov	r5,r17
    2590:	00002940 	call	294 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    2594:	d0e01e17 	ldw	r3,-32648(gp)
    2598:	80800b17 	ldw	r2,44(r16)
    259c:	18c00b17 	ldw	r3,44(r3)
    25a0:	1880012e 	bgeu	r3,r2,25a8 <xTaskGenericNotify+0xe0>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
    25a4:	003b683a 	trap	0
    25a8:	04000044 	movi	r16,1
    25ac:	00000106 	br	25b4 <xTaskGenericNotify+0xec>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    25b0:	0021883a 	mov	r16,zero
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    25b4:	00019240 	call	1924 <vTaskExitCritical>

		return xReturn;
	}
    25b8:	8005883a 	mov	r2,r16
    25bc:	dfc00417 	ldw	ra,16(sp)
    25c0:	dcc00317 	ldw	r19,12(sp)
    25c4:	dc800217 	ldw	r18,8(sp)
    25c8:	dc400117 	ldw	r17,4(sp)
    25cc:	dc000017 	ldw	r16,0(sp)
    25d0:	dec00504 	addi	sp,sp,20
    25d4:	f800283a 	ret

000025d8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
    25d8:	defffc04 	addi	sp,sp,-16
    25dc:	dc400115 	stw	r17,4(sp)
    25e0:	dfc00315 	stw	ra,12(sp)
    25e4:	dc800215 	stw	r18,8(sp)
    25e8:	dc000015 	stw	r16,0(sp)
    25ec:	dc400417 	ldw	r17,16(sp)

		pxTCB = ( TCB_t * ) xTaskToNotify;

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( pulPreviousNotificationValue != NULL )
    25f0:	38000226 	beq	r7,zero,25fc <xTaskGenericNotifyFromISR+0x24>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    25f4:	20801217 	ldw	r2,72(r4)
    25f8:	38800015 	stw	r2,0(r7)
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
    25fc:	20c01317 	ldw	r3,76(r4)
			pxTCB->eNotifyState = eNotified;
    2600:	00800084 	movi	r2,2
    2604:	20801315 	stw	r2,76(r4)

			switch( eAction )
    2608:	30800b26 	beq	r6,r2,2638 <xTaskGenericNotifyFromISR+0x60>
    260c:	11800536 	bltu	r2,r6,2624 <xTaskGenericNotifyFromISR+0x4c>
    2610:	00800044 	movi	r2,1
    2614:	30800e1e 	bne	r6,r2,2650 <xTaskGenericNotifyFromISR+0x78>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    2618:	20801217 	ldw	r2,72(r4)
    261c:	288ab03a 	or	r5,r5,r2
    2620:	00000a06 	br	264c <xTaskGenericNotifyFromISR+0x74>
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
			pxTCB->eNotifyState = eNotified;

			switch( eAction )
    2624:	01c000c4 	movi	r7,3
    2628:	31c00826 	beq	r6,r7,264c <xTaskGenericNotifyFromISR+0x74>
    262c:	01c00104 	movi	r7,4
    2630:	31c00526 	beq	r6,r7,2648 <xTaskGenericNotifyFromISR+0x70>
    2634:	00000606 	br	2650 <xTaskGenericNotifyFromISR+0x78>
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    2638:	20801217 	ldw	r2,72(r4)
    263c:	10800044 	addi	r2,r2,1
    2640:	20801215 	stw	r2,72(r4)
					break;
    2644:	00000206 	br	2650 <xTaskGenericNotifyFromISR+0x78>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
    2648:	18802226 	beq	r3,r2,26d4 <xTaskGenericNotifyFromISR+0xfc>
					{
						pxTCB->ulNotifiedValue = ulValue;
    264c:	21401215 	stw	r5,72(r4)

			traceTASK_NOTIFY_FROM_ISR();
			
			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
    2650:	00800044 	movi	r2,1
    2654:	18800226 	beq	r3,r2,2660 <xTaskGenericNotifyFromISR+0x88>
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
    2658:	00800044 	movi	r2,1
    265c:	00001e06 	br	26d8 <xTaskGenericNotifyFromISR+0x100>
			if( eOriginalNotifyState == eWaitingNotification )
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2660:	d0a01117 	ldw	r2,-32700(gp)
    2664:	2021883a 	mov	r16,r4
    2668:	10000e1e 	bne	r2,zero,26a4 <xTaskGenericNotifyFromISR+0xcc>
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    266c:	24800104 	addi	r18,r4,4
    2670:	9009883a 	mov	r4,r18
    2674:	00003180 	call	318 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    2678:	81000b17 	ldw	r4,44(r16)
    267c:	d0a01817 	ldw	r2,-32672(gp)
    2680:	1100012e 	bgeu	r2,r4,2688 <xTaskGenericNotifyFromISR+0xb0>
    2684:	d1201815 	stw	r4,-32672(gp)
    2688:	01400504 	movi	r5,20
    268c:	00027b00 	call	27b0 <__mulsi3>
    2690:	01000034 	movhi	r4,0
    2694:	21152604 	addi	r4,r4,21656
    2698:	2089883a 	add	r4,r4,r2
    269c:	900b883a 	mov	r5,r18
    26a0:	00000306 	br	26b0 <xTaskGenericNotifyFromISR+0xd8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    26a4:	01000034 	movhi	r4,0
    26a8:	21151704 	addi	r4,r4,21596
    26ac:	81400604 	addi	r5,r16,24
    26b0:	00002940 	call	294 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    26b4:	d0e01e17 	ldw	r3,-32648(gp)
    26b8:	80800b17 	ldw	r2,44(r16)
    26bc:	18c00b17 	ldw	r3,44(r3)
    26c0:	18bfe52e 	bgeu	r3,r2,2658 <xTaskGenericNotifyFromISR+0x80>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    26c4:	883fe426 	beq	r17,zero,2658 <xTaskGenericNotifyFromISR+0x80>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    26c8:	00800044 	movi	r2,1
    26cc:	88800015 	stw	r2,0(r17)
    26d0:	00000106 	br	26d8 <xTaskGenericNotifyFromISR+0x100>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    26d4:	0005883a 	mov	r2,zero
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
	}
    26d8:	dfc00317 	ldw	ra,12(sp)
    26dc:	dc800217 	ldw	r18,8(sp)
    26e0:	dc400117 	ldw	r17,4(sp)
    26e4:	dc000017 	ldw	r16,0(sp)
    26e8:	dec00404 	addi	sp,sp,16
    26ec:	f800283a 	ret

000026f0 <vTaskNotifyGiveFromISR>:
		pxTCB = ( TCB_t * ) xTaskToNotify;

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
			pxTCB->eNotifyState = eNotified;
    26f0:	00800084 	movi	r2,2

		pxTCB = ( TCB_t * ) xTaskToNotify;

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
    26f4:	20c01317 	ldw	r3,76(r4)
			pxTCB->eNotifyState = eNotified;
    26f8:	20801315 	stw	r2,76(r4)

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
    26fc:	20801217 	ldw	r2,72(r4)
    2700:	10800044 	addi	r2,r2,1
    2704:	20801215 	stw	r2,72(r4)
			
			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
    2708:	00800044 	movi	r2,1
    270c:	1880271e 	bne	r3,r2,27ac <vTaskNotifyGiveFromISR+0xbc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2710:	d0a01117 	ldw	r2,-32700(gp)
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
    2714:	defffc04 	addi	sp,sp,-16
    2718:	dc400115 	stw	r17,4(sp)
    271c:	dc000015 	stw	r16,0(sp)
    2720:	dfc00315 	stw	ra,12(sp)
    2724:	dc800215 	stw	r18,8(sp)
    2728:	2823883a 	mov	r17,r5
    272c:	2021883a 	mov	r16,r4
			if( eOriginalNotifyState == eWaitingNotification )
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2730:	10000e1e 	bne	r2,zero,276c <vTaskNotifyGiveFromISR+0x7c>
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    2734:	24800104 	addi	r18,r4,4
    2738:	9009883a 	mov	r4,r18
    273c:	00003180 	call	318 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    2740:	81000b17 	ldw	r4,44(r16)
    2744:	d0a01817 	ldw	r2,-32672(gp)
    2748:	1100012e 	bgeu	r2,r4,2750 <vTaskNotifyGiveFromISR+0x60>
    274c:	d1201815 	stw	r4,-32672(gp)
    2750:	01400504 	movi	r5,20
    2754:	00027b00 	call	27b0 <__mulsi3>
    2758:	01000034 	movhi	r4,0
    275c:	21152604 	addi	r4,r4,21656
    2760:	2089883a 	add	r4,r4,r2
    2764:	900b883a 	mov	r5,r18
    2768:	00000306 	br	2778 <vTaskNotifyGiveFromISR+0x88>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    276c:	01000034 	movhi	r4,0
    2770:	21151704 	addi	r4,r4,21596
    2774:	81400604 	addi	r5,r16,24
    2778:	00002940 	call	294 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    277c:	d0e01e17 	ldw	r3,-32648(gp)
    2780:	80800b17 	ldw	r2,44(r16)
    2784:	18c00b17 	ldw	r3,44(r3)
    2788:	1880032e 	bgeu	r3,r2,2798 <vTaskNotifyGiveFromISR+0xa8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    278c:	88000226 	beq	r17,zero,2798 <vTaskNotifyGiveFromISR+0xa8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    2790:	00800044 	movi	r2,1
    2794:	88800015 	stw	r2,0(r17)
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
    2798:	dfc00317 	ldw	ra,12(sp)
    279c:	dc800217 	ldw	r18,8(sp)
    27a0:	dc400117 	ldw	r17,4(sp)
    27a4:	dc000017 	ldw	r16,0(sp)
    27a8:	dec00404 	addi	sp,sp,16
    27ac:	f800283a 	ret

000027b0 <__mulsi3>:
    27b0:	0005883a 	mov	r2,zero
    27b4:	20000726 	beq	r4,zero,27d4 <__mulsi3+0x24>
    27b8:	20c0004c 	andi	r3,r4,1
    27bc:	2008d07a 	srli	r4,r4,1
    27c0:	18000126 	beq	r3,zero,27c8 <__mulsi3+0x18>
    27c4:	1145883a 	add	r2,r2,r5
    27c8:	294b883a 	add	r5,r5,r5
    27cc:	203ffa1e 	bne	r4,zero,27b8 <__mulsi3+0x8>
    27d0:	f800283a 	ret
    27d4:	f800283a 	ret

000027d8 <memcpy>:
    27d8:	2005883a 	mov	r2,r4
    27dc:	0007883a 	mov	r3,zero
    27e0:	19800626 	beq	r3,r6,27fc <memcpy+0x24>
    27e4:	28c9883a 	add	r4,r5,r3
    27e8:	21c00003 	ldbu	r7,0(r4)
    27ec:	10c9883a 	add	r4,r2,r3
    27f0:	18c00044 	addi	r3,r3,1
    27f4:	21c00005 	stb	r7,0(r4)
    27f8:	003ff906 	br	27e0 <memcpy+0x8>
    27fc:	f800283a 	ret

00002800 <memset>:
    2800:	2005883a 	mov	r2,r4
    2804:	2007883a 	mov	r3,r4
    2808:	218d883a 	add	r6,r4,r6
    280c:	19800326 	beq	r3,r6,281c <memset+0x1c>
    2810:	19400005 	stb	r5,0(r3)
    2814:	18c00044 	addi	r3,r3,1
    2818:	003ffc06 	br	280c <memset+0xc>
    281c:	f800283a 	ret

00002820 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    2820:	deffff04 	addi	sp,sp,-4
    2824:	01000034 	movhi	r4,0
    2828:	01400034 	movhi	r5,0
    282c:	dfc00015 	stw	ra,0(sp)
    2830:	210c1504 	addi	r4,r4,12372
    2834:	294c1e04 	addi	r5,r5,12408

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2838:	2140061e 	bne	r4,r5,2854 <alt_load+0x34>
    283c:	01000034 	movhi	r4,0
    2840:	01400034 	movhi	r5,0
    2844:	21000804 	addi	r4,r4,32
    2848:	29400804 	addi	r5,r5,32
    284c:	2140141e 	bne	r4,r5,28a0 <alt_load+0x80>
    2850:	00000d06 	br	2888 <alt_load+0x68>
    2854:	00c00034 	movhi	r3,0
    2858:	18cc1e04 	addi	r3,r3,12408
    285c:	00bfff04 	movi	r2,-4
    2860:	1907c83a 	sub	r3,r3,r4
    2864:	1886703a 	and	r3,r3,r2
    2868:	0005883a 	mov	r2,zero
  {
    while( to != end )
    286c:	10fff326 	beq	r2,r3,283c <alt_load+0x1c>
    2870:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    2874:	39c00017 	ldw	r7,0(r7)
    2878:	110d883a 	add	r6,r2,r4
    287c:	10800104 	addi	r2,r2,4
    2880:	31c00015 	stw	r7,0(r6)
    2884:	003ff906 	br	286c <alt_load+0x4c>
    2888:	01000034 	movhi	r4,0
    288c:	01400034 	movhi	r5,0
    2890:	210be604 	addi	r4,r4,12184
    2894:	294be604 	addi	r5,r5,12184

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2898:	2140121e 	bne	r4,r5,28e4 <alt_load+0xc4>
    289c:	00000d06 	br	28d4 <alt_load+0xb4>
    28a0:	00c00034 	movhi	r3,0
    28a4:	18c07704 	addi	r3,r3,476
    28a8:	00bfff04 	movi	r2,-4
    28ac:	1907c83a 	sub	r3,r3,r4
    28b0:	1886703a 	and	r3,r3,r2
    28b4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    28b8:	10fff326 	beq	r2,r3,2888 <alt_load+0x68>
    28bc:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    28c0:	39c00017 	ldw	r7,0(r7)
    28c4:	110d883a 	add	r6,r2,r4
    28c8:	10800104 	addi	r2,r2,4
    28cc:	31c00015 	stw	r7,0(r6)
    28d0:	003ff906 	br	28b8 <alt_load+0x98>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    28d4:	0002d240 	call	2d24 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    28d8:	dfc00017 	ldw	ra,0(sp)
    28dc:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    28e0:	0002e141 	jmpi	2e14 <alt_icache_flush_all>
    28e4:	00c00034 	movhi	r3,0
    28e8:	18cc1504 	addi	r3,r3,12372
    28ec:	00bfff04 	movi	r2,-4
    28f0:	1907c83a 	sub	r3,r3,r4
    28f4:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    28f8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    28fc:	10fff526 	beq	r2,r3,28d4 <alt_load+0xb4>
    2900:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    2904:	39c00017 	ldw	r7,0(r7)
    2908:	110d883a 	add	r6,r2,r4
    290c:	10800104 	addi	r2,r2,4
    2910:	31c00015 	stw	r7,0(r6)
    2914:	003ff906 	br	28fc <alt_load+0xdc>

00002918 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2918:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    291c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2920:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2924:	0002b340 	call	2b34 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    2928:	0002b540 	call	2b54 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    292c:	d1202217 	ldw	r4,-32632(gp)
    2930:	d1602117 	ldw	r5,-32636(gp)
    2934:	d1a02017 	ldw	r6,-32640(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    2938:	dfc00017 	ldw	ra,0(sp)
    293c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    2940:	00004441 	jmpi	444 <main>

00002944 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    2944:	defff204 	addi	sp,sp,-56
    2948:	dfc00a15 	stw	ra,40(sp)
    294c:	df000915 	stw	fp,36(sp)
    2950:	ddc00815 	stw	r23,32(sp)
    2954:	dd800715 	stw	r22,28(sp)
    2958:	dd400615 	stw	r21,24(sp)
    295c:	dd000515 	stw	r20,20(sp)
    2960:	dcc00415 	stw	r19,16(sp)
    2964:	dc800315 	stw	r18,12(sp)
    2968:	dc400215 	stw	r17,8(sp)
    296c:	dc000115 	stw	r16,4(sp)
    2970:	d9400b15 	stw	r5,44(sp)
    2974:	d9800c15 	stw	r6,48(sp)
    2978:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    297c:	04000944 	movi	r16,37
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    2980:	2005883a 	mov	r2,r4
	va_list args;
	va_start(args, fmt);
    2984:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
    2988:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
    298c:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    2990:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    2994:	11000007 	ldb	r4,0(r2)
    2998:	20003926 	beq	r4,zero,2a80 <alt_printf+0x13c>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    299c:	24000226 	beq	r4,r16,29a8 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    29a0:	14400044 	addi	r17,r2,1
    29a4:	00001106 	br	29ec <alt_printf+0xa8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    29a8:	14400084 	addi	r17,r2,2
    29ac:	10800047 	ldb	r2,1(r2)
    29b0:	10003326 	beq	r2,zero,2a80 <alt_printf+0x13c>
            {
                if (c == '%')
    29b4:	1400021e 	bne	r2,r16,29c0 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    29b8:	8009883a 	mov	r4,r16
    29bc:	00000b06 	br	29ec <alt_printf+0xa8>
                } 
                else if (c == 'c')
    29c0:	1480051e 	bne	r2,r18,29d8 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
    29c4:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    29c8:	ad800104 	addi	r22,r21,4
    29cc:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
    29d0:	0002ab00 	call	2ab0 <alt_putchar>
    29d4:	00002806 	br	2a78 <alt_printf+0x134>
                }
                else if (c == 'x')
    29d8:	14c01f1e 	bne	r2,r19,2a58 <alt_printf+0x114>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    29dc:	adc00017 	ldw	r23,0(r21)
    29e0:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    29e4:	b800031e 	bne	r23,zero,29f4 <alt_printf+0xb0>
                    {
                        alt_putchar('0');
    29e8:	01000c04 	movi	r4,48
    29ec:	0002ab00 	call	2ab0 <alt_putchar>
                        continue;
    29f0:	00002106 	br	2a78 <alt_printf+0x134>
    29f4:	05800704 	movi	r22,28
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    29f8:	00c003c4 	movi	r3,15
    29fc:	1d84983a 	sll	r2,r3,r22
    2a00:	15c4703a 	and	r2,r2,r23
    2a04:	1000021e 	bne	r2,zero,2a10 <alt_printf+0xcc>
                        digit_shift -= 4;
    2a08:	b5bfff04 	addi	r22,r22,-4
    2a0c:	003ffb06 	br	29fc <alt_printf+0xb8>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    2a10:	070003c4 	movi	fp,15
                        if (digit <= 9)
    2a14:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    2a18:	b0001716 	blt	r22,zero,2a78 <alt_printf+0x134>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    2a1c:	e584983a 	sll	r2,fp,r22
    2a20:	15c4703a 	and	r2,r2,r23
    2a24:	1584d83a 	srl	r2,r2,r22
                        if (digit <= 9)
    2a28:	18800236 	bltu	r3,r2,2a34 <alt_printf+0xf0>
                            c = '0' + digit;
    2a2c:	11000c04 	addi	r4,r2,48
    2a30:	00000106 	br	2a38 <alt_printf+0xf4>
                        else
                            c = 'a' + digit - 10;
    2a34:	110015c4 	addi	r4,r2,87
                        alt_putchar(c);
    2a38:	21003fcc 	andi	r4,r4,255
    2a3c:	2100201c 	xori	r4,r4,128
    2a40:	213fe004 	addi	r4,r4,-128
    2a44:	d8c00015 	stw	r3,0(sp)
    2a48:	0002ab00 	call	2ab0 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    2a4c:	b5bfff04 	addi	r22,r22,-4
    2a50:	d8c00017 	ldw	r3,0(sp)
    2a54:	003ff006 	br	2a18 <alt_printf+0xd4>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    2a58:	1500071e 	bne	r2,r20,2a78 <alt_printf+0x134>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    2a5c:	ad800017 	ldw	r22,0(r21)
    2a60:	ad400104 	addi	r21,r21,4

                    while(*s)
    2a64:	b1000007 	ldb	r4,0(r22)
    2a68:	20000326 	beq	r4,zero,2a78 <alt_printf+0x134>
                      alt_putchar(*s++);
    2a6c:	b5800044 	addi	r22,r22,1
    2a70:	0002ab00 	call	2ab0 <alt_putchar>
    2a74:	003ffb06 	br	2a64 <alt_printf+0x120>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    2a78:	8805883a 	mov	r2,r17
    2a7c:	003fc506 	br	2994 <alt_printf+0x50>
            {
                break;
            }
        }
    }
}
    2a80:	dfc00a17 	ldw	ra,40(sp)
    2a84:	df000917 	ldw	fp,36(sp)
    2a88:	ddc00817 	ldw	r23,32(sp)
    2a8c:	dd800717 	ldw	r22,28(sp)
    2a90:	dd400617 	ldw	r21,24(sp)
    2a94:	dd000517 	ldw	r20,20(sp)
    2a98:	dcc00417 	ldw	r19,16(sp)
    2a9c:	dc800317 	ldw	r18,12(sp)
    2aa0:	dc400217 	ldw	r17,8(sp)
    2aa4:	dc000117 	ldw	r16,4(sp)
    2aa8:	dec00e04 	addi	sp,sp,56
    2aac:	f800283a 	ret

00002ab0 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    2ab0:	defffd04 	addi	sp,sp,-12
    2ab4:	dc000115 	stw	r16,4(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    2ab8:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    2abc:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    2ac0:	01000034 	movhi	r4,0
    2ac4:	210c1a04 	addi	r4,r4,12392
    2ac8:	d80b883a 	mov	r5,sp
    2acc:	01800044 	movi	r6,1
    2ad0:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    2ad4:	dfc00215 	stw	ra,8(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    2ad8:	0002b680 	call	2b68 <altera_avalon_jtag_uart_write>
    2adc:	00ffffc4 	movi	r3,-1
    2ae0:	10c00126 	beq	r2,r3,2ae8 <alt_putchar+0x38>
        return -1;
    }
    return c;
    2ae4:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
}
    2ae8:	dfc00217 	ldw	ra,8(sp)
    2aec:	dc000117 	ldw	r16,4(sp)
    2af0:	dec00304 	addi	sp,sp,12
    2af4:	f800283a 	ret

00002af8 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    2af8:	defffe04 	addi	sp,sp,-8
    2afc:	dc000015 	stw	r16,0(sp)
    2b00:	dfc00115 	stw	ra,4(sp)
    2b04:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    2b08:	0002e500 	call	2e50 <strlen>
    2b0c:	01000034 	movhi	r4,0
    2b10:	210c1a04 	addi	r4,r4,12392
    2b14:	800b883a 	mov	r5,r16
    2b18:	100d883a 	mov	r6,r2
    2b1c:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
    2b20:	dfc00117 	ldw	ra,4(sp)
    2b24:	dc000017 	ldw	r16,0(sp)
    2b28:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    2b2c:	0002b681 	jmpi	2b68 <altera_avalon_jtag_uart_write>

00002b30 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    2b30:	0002c9c1 	jmpi	2c9c <alt_busy_sleep>

00002b34 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    2b34:	deffff04 	addi	sp,sp,-4
    2b38:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    2b3c:	0002e180 	call	2e18 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    2b40:	00800044 	movi	r2,1
    2b44:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    2b48:	dfc00017 	ldw	ra,0(sp)
    2b4c:	dec00104 	addi	sp,sp,4
    2b50:	f800283a 	ret

00002b54 <alt_sys_init>:
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
  if (!ret_code)
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
    2b54:	01000034 	movhi	r4,0
    2b58:	01400034 	movhi	r5,0
    2b5c:	210c1504 	addi	r4,r4,12372
    2b60:	294c1b04 	addi	r5,r5,12396
    2b64:	0002d281 	jmpi	2d28 <alt_dev_llist_insert>

00002b68 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    2b68:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    2b6c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    2b70:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    2b74:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    2b78:	2980072e 	bgeu	r5,r6,2b98 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    2b7c:	38c00037 	ldwio	r3,0(r7)
    2b80:	18ffffec 	andhi	r3,r3,65535
    2b84:	183ffc26 	beq	r3,zero,2b78 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    2b88:	28c00007 	ldb	r3,0(r5)
    2b8c:	20c00035 	stwio	r3,0(r4)
    2b90:	29400044 	addi	r5,r5,1
    2b94:	003ff806 	br	2b78 <altera_avalon_jtag_uart_write+0x10>

  return count;
}
    2b98:	f800283a 	ret

00002b9c <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
    2b9c:	defffe04 	addi	sp,sp,-8
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
    2ba0:	d1600204 	addi	r5,gp,-32760
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
    2ba4:	dc000015 	stw	r16,0(sp)
    2ba8:	dfc00115 	stw	ra,4(sp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
    2bac:	0002da00 	call	2da0 <alt_find_dev>
    2bb0:	1021883a 	mov	r16,r2

  if (NULL == dev)
    2bb4:	10000a1e 	bne	r2,zero,2be0 <altera_avalon_mutex_open+0x44>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    2bb8:	00800034 	movhi	r2,0
    2bbc:	108c1d04 	addi	r2,r2,12404
    2bc0:	10800017 	ldw	r2,0(r2)
    2bc4:	10000226 	beq	r2,zero,2bd0 <altera_avalon_mutex_open+0x34>
    2bc8:	103ee83a 	callr	r2
    2bcc:	00000206 	br	2bd8 <altera_avalon_mutex_open+0x3c>
    2bd0:	00800034 	movhi	r2,0
    2bd4:	108c3c04 	addi	r2,r2,12528
  {
    ALT_ERRNO = ENODEV;
    2bd8:	00c004c4 	movi	r3,19
    2bdc:	10c00015 	stw	r3,0(r2)
  }

  return dev;
}
    2be0:	8005883a 	mov	r2,r16
    2be4:	dfc00117 	ldw	ra,4(sp)
    2be8:	dc000017 	ldw	r16,0(sp)
    2bec:	dec00204 	addi	sp,sp,8
    2bf0:	f800283a 	ret

00002bf4 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
    2bf4:	f800283a 	ret

00002bf8 <altera_avalon_mutex_lock>:
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  alt_u32 id, data, check;
  int ret_code = -1;

  NIOS2_READ_CPUID(id);
    2bf8:	0005317a 	rdctl	r2,cpuid

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
    2bfc:	1004943a 	slli	r2,r2,16

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
    2c00:	20c00317 	ldw	r3,12(r4)
  int ret_code = -1;

  NIOS2_READ_CPUID(id);

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
    2c04:	1144b03a 	or	r2,r2,r5

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
    2c08:	18800035 	stwio	r2,0(r3)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
    2c0c:	20c00317 	ldw	r3,12(r4)
    2c10:	18c00037 	ldwio	r3,0(r3)

  if ( check == data)
    2c14:	18bff81e 	bne	r3,r2,2bf8 <altera_avalon_mutex_lock>
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
}
    2c18:	f800283a 	ret

00002c1c <altera_avalon_mutex_trylock>:
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  alt_u32 id, data, check;
  int ret_code = -1;

  NIOS2_READ_CPUID(id);
    2c1c:	0005317a 	rdctl	r2,cpuid

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
    2c20:	1004943a 	slli	r2,r2,16
    2c24:	114ab03a 	or	r5,r2,r5

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
    2c28:	20800317 	ldw	r2,12(r4)
    2c2c:	11400035 	stwio	r5,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
    2c30:	20800317 	ldw	r2,12(r4)
    2c34:	10800037 	ldwio	r2,0(r2)

  if ( check == data)
    2c38:	1144c03a 	cmpne	r2,r2,r5
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
}
    2c3c:	0085c83a 	sub	r2,zero,r2
    2c40:	f800283a 	ret

00002c44 <altera_avalon_mutex_unlock>:
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
  alt_u32 id;
  NIOS2_READ_CPUID(id);
    2c44:	0005317a 	rdctl	r2,cpuid

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
    2c48:	20c00317 	ldw	r3,12(r4)
    2c4c:	01400044 	movi	r5,1
    2c50:	19400135 	stwio	r5,4(r3)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
    2c54:	1004943a 	slli	r2,r2,16
    2c58:	20c00317 	ldw	r3,12(r4)
    2c5c:	18800035 	stwio	r2,0(r3)
    2c60:	f800283a 	ret

00002c64 <altera_avalon_mutex_is_mine>:
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
  alt_u32 id, data, owner, value;
  int ret_code = 0;

  NIOS2_READ_CPUID(id);
    2c64:	0007317a 	rdctl	r3,cpuid

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
    2c68:	20800317 	ldw	r2,12(r4)
    2c6c:	10800037 	ldwio	r2,0(r2)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
    2c70:	1008d43a 	srli	r4,r2,16
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
    2c74:	20c0031e 	bne	r4,r3,2c84 <altera_avalon_mutex_is_mine+0x20>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
    2c78:	10bfffcc 	andi	r2,r2,65535
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
    2c7c:	1004c03a 	cmpne	r2,r2,zero
    2c80:	f800283a 	ret
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
  alt_u32 id, data, owner, value;
  int ret_code = 0;
    2c84:	0005883a 	mov	r2,zero
      ret_code = 1;
    }
  }

  return ret_code;
}
    2c88:	f800283a 	ret

00002c8c <altera_avalon_mutex_first_lock>:
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
  alt_u32 data;
  int ret_code = 0;

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
    2c8c:	20800317 	ldw	r2,12(r4)
    2c90:	10800137 	ldwio	r2,4(r2)
  {
    ret_code = 1;
  }

  return ret_code;
}
    2c94:	1080004c 	andi	r2,r2,1
    2c98:	f800283a 	ret

00002c9c <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    2c9c:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    2ca0:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    2ca4:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    2ca8:	dc000015 	stw	r16,0(sp)
    2cac:	dfc00115 	stw	ra,4(sp)
    2cb0:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    2cb4:	0002f880 	call	2f88 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    2cb8:	10001026 	beq	r2,zero,2cfc <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    2cbc:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    2cc0:	013999b4 	movhi	r4,58982
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    2cc4:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    2cc8:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    2ccc:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    2cd0:	297fffc4 	addi	r5,r5,-1
    2cd4:	283ffe1e 	bne	r5,zero,2cd0 <alt_busy_sleep+0x34>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    2cd8:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    2cdc:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    2ce0:	18bffb16 	blt	r3,r2,2cd0 <alt_busy_sleep+0x34>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    2ce4:	8009883a 	mov	r4,r16
    2ce8:	01400144 	movi	r5,5
    2cec:	00027b00 	call	27b0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    2cf0:	10bfffc4 	addi	r2,r2,-1
    2cf4:	103ffe1e 	bne	r2,zero,2cf0 <alt_busy_sleep+0x54>
    2cf8:	00000506 	br	2d10 <alt_busy_sleep+0x74>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    2cfc:	8009883a 	mov	r4,r16
    2d00:	01400144 	movi	r5,5
    2d04:	00027b00 	call	27b0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    2d08:	10bfffc4 	addi	r2,r2,-1
    2d0c:	00bffe16 	blt	zero,r2,2d08 <alt_busy_sleep+0x6c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    2d10:	0005883a 	mov	r2,zero
    2d14:	dfc00117 	ldw	ra,4(sp)
    2d18:	dc000017 	ldw	r16,0(sp)
    2d1c:	dec00204 	addi	sp,sp,8
    2d20:	f800283a 	ret

00002d24 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    2d24:	f800283a 	ret

00002d28 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    2d28:	20000226 	beq	r4,zero,2d34 <alt_dev_llist_insert+0xc>
    2d2c:	20800217 	ldw	r2,8(r4)
    2d30:	1000131e 	bne	r2,zero,2d80 <alt_dev_llist_insert+0x58>
    2d34:	00800034 	movhi	r2,0
    2d38:	108c1d04 	addi	r2,r2,12404
    2d3c:	10800017 	ldw	r2,0(r2)
    2d40:	10000926 	beq	r2,zero,2d68 <alt_dev_llist_insert+0x40>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    2d44:	deffff04 	addi	sp,sp,-4
    2d48:	dfc00015 	stw	ra,0(sp)
    2d4c:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    2d50:	00c00584 	movi	r3,22
    2d54:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    2d58:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    2d5c:	dfc00017 	ldw	ra,0(sp)
    2d60:	dec00104 	addi	sp,sp,4
    2d64:	f800283a 	ret
    2d68:	00800034 	movhi	r2,0
    2d6c:	108c3c04 	addi	r2,r2,12528
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    2d70:	00c00584 	movi	r3,22
    2d74:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    2d78:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    2d7c:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
    2d80:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    2d84:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    2d88:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    2d8c:	28800017 	ldw	r2,0(r5)
    2d90:	11000115 	stw	r4,4(r2)
  list->next           = entry;
    2d94:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
    2d98:	0005883a 	mov	r2,zero
    2d9c:	f800283a 	ret

00002da0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    2da0:	defffb04 	addi	sp,sp,-20
    2da4:	dcc00315 	stw	r19,12(sp)
    2da8:	dc800215 	stw	r18,8(sp)
    2dac:	dc400115 	stw	r17,4(sp)
    2db0:	dc000015 	stw	r16,0(sp)
    2db4:	dfc00415 	stw	ra,16(sp)
    2db8:	2027883a 	mov	r19,r4
    2dbc:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
    2dc0:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    2dc4:	0002e500 	call	2e50 <strlen>
    2dc8:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2dcc:	84400726 	beq	r16,r17,2dec <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    2dd0:	81000217 	ldw	r4,8(r16)
    2dd4:	980b883a 	mov	r5,r19
    2dd8:	900d883a 	mov	r6,r18
    2ddc:	0002e200 	call	2e20 <memcmp>
    2de0:	10000426 	beq	r2,zero,2df4 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    2de4:	84000017 	ldw	r16,0(r16)
    2de8:	003ff806 	br	2dcc <alt_find_dev+0x2c>
  }
  
  /* No match found */
  
  return NULL;
    2dec:	0005883a 	mov	r2,zero
    2df0:	00000106 	br	2df8 <alt_find_dev+0x58>
    2df4:	8005883a 	mov	r2,r16
}
    2df8:	dfc00417 	ldw	ra,16(sp)
    2dfc:	dcc00317 	ldw	r19,12(sp)
    2e00:	dc800217 	ldw	r18,8(sp)
    2e04:	dc400117 	ldw	r17,4(sp)
    2e08:	dc000017 	ldw	r16,0(sp)
    2e0c:	dec00504 	addi	sp,sp,20
    2e10:	f800283a 	ret

00002e14 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    2e14:	f800283a 	ret

00002e18 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    2e18:	000170fa 	wrctl	ienable,zero
    2e1c:	f800283a 	ret

00002e20 <memcmp>:
    2e20:	218d883a 	add	r6,r4,r6
    2e24:	21800826 	beq	r4,r6,2e48 <memcmp+0x28>
    2e28:	20800003 	ldbu	r2,0(r4)
    2e2c:	28c00003 	ldbu	r3,0(r5)
    2e30:	10c00226 	beq	r2,r3,2e3c <memcmp+0x1c>
    2e34:	10c5c83a 	sub	r2,r2,r3
    2e38:	f800283a 	ret
    2e3c:	21000044 	addi	r4,r4,1
    2e40:	29400044 	addi	r5,r5,1
    2e44:	003ff706 	br	2e24 <memcmp+0x4>
    2e48:	0005883a 	mov	r2,zero
    2e4c:	f800283a 	ret

00002e50 <strlen>:
    2e50:	2005883a 	mov	r2,r4
    2e54:	10c00007 	ldb	r3,0(r2)
    2e58:	18000226 	beq	r3,zero,2e64 <strlen+0x14>
    2e5c:	10800044 	addi	r2,r2,1
    2e60:	003ffc06 	br	2e54 <strlen+0x4>
    2e64:	1105c83a 	sub	r2,r2,r4
    2e68:	f800283a 	ret

00002e6c <udivmodsi4>:
    2e6c:	2900182e 	bgeu	r5,r4,2ed0 <udivmodsi4+0x64>
    2e70:	28001716 	blt	r5,zero,2ed0 <udivmodsi4+0x64>
    2e74:	00800804 	movi	r2,32
    2e78:	00c00044 	movi	r3,1
    2e7c:	00000206 	br	2e88 <udivmodsi4+0x1c>
    2e80:	10001126 	beq	r2,zero,2ec8 <udivmodsi4+0x5c>
    2e84:	28000516 	blt	r5,zero,2e9c <udivmodsi4+0x30>
    2e88:	294b883a 	add	r5,r5,r5
    2e8c:	10bfffc4 	addi	r2,r2,-1
    2e90:	18c7883a 	add	r3,r3,r3
    2e94:	293ffa36 	bltu	r5,r4,2e80 <udivmodsi4+0x14>
    2e98:	18000b26 	beq	r3,zero,2ec8 <udivmodsi4+0x5c>
    2e9c:	0005883a 	mov	r2,zero
    2ea0:	21400236 	bltu	r4,r5,2eac <udivmodsi4+0x40>
    2ea4:	2149c83a 	sub	r4,r4,r5
    2ea8:	10c4b03a 	or	r2,r2,r3
    2eac:	1806d07a 	srli	r3,r3,1
    2eb0:	280ad07a 	srli	r5,r5,1
    2eb4:	183ffa1e 	bne	r3,zero,2ea0 <udivmodsi4+0x34>
    2eb8:	3000011e 	bne	r6,zero,2ec0 <udivmodsi4+0x54>
    2ebc:	f800283a 	ret
    2ec0:	2005883a 	mov	r2,r4
    2ec4:	f800283a 	ret
    2ec8:	0005883a 	mov	r2,zero
    2ecc:	003ffa06 	br	2eb8 <udivmodsi4+0x4c>
    2ed0:	00c00044 	movi	r3,1
    2ed4:	003ff106 	br	2e9c <udivmodsi4+0x30>

00002ed8 <__divsi3>:
    2ed8:	defffe04 	addi	sp,sp,-8
    2edc:	dfc00115 	stw	ra,4(sp)
    2ee0:	dc000015 	stw	r16,0(sp)
    2ee4:	20000b16 	blt	r4,zero,2f14 <__divsi3+0x3c>
    2ee8:	0021883a 	mov	r16,zero
    2eec:	28000c16 	blt	r5,zero,2f20 <__divsi3+0x48>
    2ef0:	000d883a 	mov	r6,zero
    2ef4:	0002e6c0 	call	2e6c <udivmodsi4>
    2ef8:	0407c83a 	sub	r3,zero,r16
    2efc:	1884f03a 	xor	r2,r3,r2
    2f00:	1405883a 	add	r2,r2,r16
    2f04:	dfc00117 	ldw	ra,4(sp)
    2f08:	dc000017 	ldw	r16,0(sp)
    2f0c:	dec00204 	addi	sp,sp,8
    2f10:	f800283a 	ret
    2f14:	0109c83a 	sub	r4,zero,r4
    2f18:	04000044 	movi	r16,1
    2f1c:	283ff40e 	bge	r5,zero,2ef0 <__divsi3+0x18>
    2f20:	014bc83a 	sub	r5,zero,r5
    2f24:	8400005c 	xori	r16,r16,1
    2f28:	003ff106 	br	2ef0 <__divsi3+0x18>

00002f2c <__modsi3>:
    2f2c:	defffd04 	addi	sp,sp,-12
    2f30:	dfc00215 	stw	ra,8(sp)
    2f34:	dc400115 	stw	r17,4(sp)
    2f38:	dc000015 	stw	r16,0(sp)
    2f3c:	20000c16 	blt	r4,zero,2f70 <__modsi3+0x44>
    2f40:	0023883a 	mov	r17,zero
    2f44:	0021883a 	mov	r16,zero
    2f48:	28000d16 	blt	r5,zero,2f80 <__modsi3+0x54>
    2f4c:	01800044 	movi	r6,1
    2f50:	0002e6c0 	call	2e6c <udivmodsi4>
    2f54:	1404f03a 	xor	r2,r2,r16
    2f58:	8885883a 	add	r2,r17,r2
    2f5c:	dfc00217 	ldw	ra,8(sp)
    2f60:	dc400117 	ldw	r17,4(sp)
    2f64:	dc000017 	ldw	r16,0(sp)
    2f68:	dec00304 	addi	sp,sp,12
    2f6c:	f800283a 	ret
    2f70:	0109c83a 	sub	r4,zero,r4
    2f74:	04400044 	movi	r17,1
    2f78:	043fffc4 	movi	r16,-1
    2f7c:	283ff30e 	bge	r5,zero,2f4c <__modsi3+0x20>
    2f80:	014bc83a 	sub	r5,zero,r5
    2f84:	003ff106 	br	2f4c <__modsi3+0x20>

00002f88 <__udivsi3>:
    2f88:	000d883a 	mov	r6,zero
    2f8c:	0002e6c1 	jmpi	2e6c <udivmodsi4>

00002f90 <__umodsi3>:
    2f90:	01800044 	movi	r6,1
    2f94:	0002e6c1 	jmpi	2e6c <udivmodsi4>
