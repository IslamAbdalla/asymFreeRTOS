
master.elf:     file format elf32-littlenios2
master.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001dc

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00003434 memsz 0x00003434 flags r-x
    LOAD off    0x00004454 vaddr 0x00003454 paddr 0x00003478 align 2**12
         filesz 0x00000024 memsz 0x00000024 flags rw-
    LOAD off    0x0000449c vaddr 0x0000349c paddr 0x0000349c align 2**12
         filesz 0x00000000 memsz 0x00003cd8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001bc  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000031d4  000001dc  000001dc  000011dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000a4  000033b0  000033b0  000043b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000024  00003454  00003478  00004454  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00003cd8  0000349c  0000349c  0000449c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00007174  00007174  00004478  2**0
                  CONTENTS
  7 .memory_buff  00000000  00008000  00008000  00004478  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00004478  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000488  00000000  00000000  000044a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00006bbe  00000000  00000000  00004928  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000023c6  00000000  00000000  0000b4e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00002cc1  00000000  00000000  0000d8ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000ff4  00000000  00000000  00010570  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000200c  00000000  00000000  00011564  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000309f  00000000  00000000  00013570  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00016610  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000230  00000000  00000000  00016620  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00018d53  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00018d56  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00018d62  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00018d63  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  00018d64  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  00018d6f  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  00018d7a  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000b  00000000  00000000  00018d85  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000002b  00000000  00000000  00018d90  2**0
                  CONTENTS, READONLY
 27 .jdi          0000a38c  00000000  00000000  00018dbb  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00064b11  00000000  00000000  00023147  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001dc l    d  .text	00000000 .text
000033b0 l    d  .rodata	00000000 .rodata
00003454 l    d  .rwdata	00000000 .rwdata
0000349c l    d  .bss	00000000 .bss
00007174 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00008000 l    d  .memory_buff	00000000 .memory_buff
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../master_bsp//obj/HAL/src/crt0.o
00000214 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 obj/default/portable/GCC/NiosII/port_asm.o
00000020 l       .exceptions	00000000 save_context
0000009c l       .exceptions	00000000 save_sp_to_pxCurrentTCB
000000ac l       .exceptions	00000000 hw_irq_test
00000150 l       .exceptions	00000000 soft_exceptions
000000c0 l       .exceptions	00000000 hw_irq_handler
000000d4 l       .exceptions	00000000 restore_context
0000016c l       .exceptions	00000000 call_scheduler
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 asym.c
0000349c l     O .bss	00000004 mutex
00000000 l    df *ABS*	00000000 croutine.c
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 master.c
00000000 l    df *ABS*	00000000 port.c
00000000 l    df *ABS*	00000000 heap_1.c
000034a0 l     O .bss	00000004 pucAlignedHeap.2415
000034fc l     O .bss	00003ab0 ucHeap
000034a4 l     O .bss	00000004 xNextFreeByte
00000000 l    df *ABS*	00000000 queue.c
00000a28 l     F .text	000000d8 prvCopyDataToQueue
00000b00 l     F .text	00000038 prvCopyDataFromQueue
00000b38 l     F .text	000000ac prvUnlockQueue
00000000 l    df *ABS*	00000000 tasks.c
00001470 l     F .text	0000002c prvTaskIsTaskSuspended
00006fac l     O .bss	00000014 xSuspendedTaskList
00006fd4 l     O .bss	00000014 xPendingReadyList
0000149c l     F .text	0000002c prvResetNextTaskUnblockTime
000034d8 l     O .bss	00000004 pxDelayedTaskList
000034ac l     O .bss	00000004 xNextTaskUnblockTime
000014c8 l     F .text	0000005c prvAddCurrentTaskToDelayedList
000034c8 l     O .bss	00000004 xTickCount
000034d4 l     O .bss	00000004 pxOverflowDelayedTaskList
000034a8 l     O .bss	00000004 uxSchedulerSuspended
000034c4 l     O .bss	00000004 uxTopReadyPriority
00007010 l     O .bss	00000064 pxReadyTasksLists
000034c0 l     O .bss	00000004 xSchedulerRunning
000034cc l     O .bss	00000004 uxCurrentNumberOfTasks
000034b4 l     O .bss	00000004 xNumOfOverflows
000034bc l     O .bss	00000004 uxPendedTicks
000034b8 l     O .bss	00000004 xYieldPending
00006ffc l     O .bss	00000014 xDelayedTaskList1
00006fe8 l     O .bss	00000014 xDelayedTaskList2
00006fc0 l     O .bss	00000014 xTasksWaitingTermination
000034b0 l     O .bss	00000004 uxTaskNumber
000024e0 l     F .text	0000007c prvIdleTask
000034d0 l     O .bss	00000004 uxTasksDeleted
00000000 l    df *ABS*	00000000 timers.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00002adc l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 rand.c
000034e0 l     O .bss	00000008 _randbits
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00003454 l     O .rwdata	00000010 mutex_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00002ee8 g     F .text	0000002c alt_main
00007074 g     O .bss	00000100 alt_irq
000000c4 g       .exceptions	00000000 restore_sp_from_pxCurrentTCB
000018a8 g     F .text	00000074 vTaskPlaceOnUnorderedEventList
00000a18 g     F .text	00000010 xPortGetFreeHeapSize
00003478 g       *ABS*	00000000 __flash_rwdata_start
0000202c g     F .text	00000038 uxTaskPriorityGet
00000688 g     F .text	000000a4 masterTask
000004e4 g     F .text	00000018 vAsymSemaphorePolling
00001c20 g     F .text	00000030 vTaskEnterCritical
00000fb8 g     F .text	00000090 xQueueGenericSendFromISR
000031e8 g     F .text	00000028 altera_avalon_mutex_trylock
000030c8 g     F .text	00000038 alt_putstr
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000f58 g     F .text	00000060 xQueueGiveMutexRecursive
000034dc g     O .bss	00000004 pxCurrentTCB
00000258 g     F .text	00000098 xAsymReqQueuInit
00003230 g     F .text	00000028 altera_avalon_mutex_is_mine
00000020 g       *ABS*	00000000 __flash_exceptions_start
000034f8 g     O .bss	00000004 errno
000034f0 g     O .bss	00000004 alt_argv
0000b464 g       *ABS*	00000000 _gp
00002064 g     F .text	00000104 vTaskPrioritySet
00000464 g     F .text	00000080 vAsymUpdateFinishedReq
00000904 g     F .text	0000007c xPortStartScheduler
000015dc g     F .text	00000018 vTaskEndScheduler
000032e4 g     F .text	00000074 alt_find_dev
00002c30 g     F .text	00000028 memcpy
00001840 g     F .text	00000068 vTaskPlaceOnEventList
00001c8c g     F .text	0000027c xTaskGenericCreate
00001390 g     F .text	00000048 xQueuePeekFromISR
00000a0c g     F .text	00000004 vPortFree
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00002bf8 g     F .text	00000008 .hidden __udivsi3
00001a6c g     F .text	00000034 uxTaskGetStackHighWaterMark
000005cc g     F .text	00000030 vListInsertEnd
00001534 g     F .text	000000a8 xTaskResumeFromISR
000005c4 g     F .text	00000008 vListInitialiseItem
000007fc g     F .text	0000002c vPortSysTickHandler
00001524 g     F .text	00000010 uxTaskPriorityGetFromISR
0000086c g     F .text	00000098 alt_irq_register
00003258 g     F .text	00000010 altera_avalon_mutex_first_lock
00007174 g       *ABS*	00000000 __bss_end
00000980 g     F .text	0000008c pvPortMalloc
00001450 g     F .text	00000004 vQueueDelete
00000868 g     F .text	00000004 vPortEndScheduler
000005a4 g     F .text	00000020 vListInitialise
000034e8 g     O .bss	00000004 alt_irq_active
0000017c g     F .exceptions	00000060 alt_irq_handler
00001604 g     F .text	00000008 xTaskGetTickCount
00000d5c g     F .text	0000017c xQueueGenericSend
00003168 g     F .text	00000058 altera_avalon_mutex_open
00003268 g     F .text	00000004 alt_dcache_flush_all
00001b84 g     F .text	0000009c xTaskPriorityDisinherit
00000568 g     F .text	0000003c xAsymReqQueueNotEmpty
00003478 g       *ABS*	00000000 __ram_rwdata_end
0000191c g     F .text	000000a4 xTaskRemoveFromEventList
0000346c g     O .rwdata	00000008 alt_mutex_list
00003454 g       *ABS*	00000000 __ram_rodata_end
00003468 g     O .rwdata	00000004 jtag_uart_0
00002c00 g     F .text	00000008 .hidden __umodsi3
00007174 g       *ABS*	00000000 end
00001f7c g     F .text	000000b0 vTaskDelete
00002600 g     F .text	00000020 pvTaskIncrementMutexHeldCount
00007590 g       *ABS*	00000000 __alt_stack_pointer
00003134 g     F .text	00000034 altera_avalon_jtag_uart_write
0000255c g     F .text	00000080 xTaskCheckForTimeOut
00002f14 g     F .text	0000016c alt_printf
00002620 g     F .text	000000c8 ulTaskNotifyTake
000001dc g     F .text	0000003c _start
000015f4 g     F .text	00000010 vTaskSuspendAll
0000160c g     F .text	00000008 xTaskGetTickCountFromISR
00002c88 g     F .text	0000005c rand
00003120 g     F .text	00000014 alt_sys_init
00000650 g     F .text	00000038 uxListRemove
00003210 g     F .text	00000020 altera_avalon_mutex_unlock
00001aa8 g     F .text	000000dc vTaskPriorityInherit
00002c08 g     F .text	00000028 .hidden __mulsi3
00003454 g       *ABS*	00000000 __ram_rwdata_start
000033b0 g       *ABS*	00000000 __ram_rodata_start
00002244 g     F .text	00000098 vTaskResume
00001778 g     F .text	000000c8 vTaskSwitchContext
000026e8 g     F .text	0000010c xTaskNotifyWait
00003364 g     F .text	00000030 memcmp
00007174 g       *ABS*	00000000 __alt_stack_base
00002168 g     F .text	000000dc vTaskSuspend
00001614 g     F .text	00000008 uxTaskGetNumberOfTasks
00000000         *UND*	00000000 save_context
0000326c g     F .text	00000078 alt_dev_llist_insert
00001280 g     F .text	00000084 xQueueTakeMutexRecursive
000027f4 g     F .text	00000110 xTaskGenericNotify
0000349c g       *ABS*	00000000 __bss_start
00002c58 g     F .text	00000020 memset
00000748 g     F .text	000000b4 main
000004fc g     F .text	0000006c xAsymGetReq
000034ec g     O .bss	00000004 alt_envp
00002c78 g     F .text	00000010 srand
000005fc g     F .text	00000054 vListInsert
000031c4 g     F .text	00000024 altera_avalon_mutex_lock
00003474 g     O .rwdata	00000004 alt_errno
00002400 g     F .text	00000088 vTaskDelayUntil
00001304 g     F .text	0000008c xQueueReceiveFromISR
00001aa0 g     F .text	00000008 xTaskGetCurrentTaskHandle
00002b48 g     F .text	00000054 .hidden __divsi3
00000c9c g     F .text	0000008c xQueueGenericCreate
00000d28 g     F .text	00000034 xQueueCreateCountingSemaphore
000033b0 g       *ABS*	00000000 __flash_rodata_start
00002904 g     F .text	00000118 xTaskGenericNotifyFromISR
00003100 g     F .text	00000020 alt_irq_init
000019c0 g     F .text	0000008c xTaskRemoveFromUnorderedEventList
000022dc g     F .text	00000124 xTaskResumeAll
00001408 g     F .text	00000040 uxQueueSpacesAvailable
00001f08 g     F .text	00000074 vTaskStartScheduler
00001460 g     F .text	00000010 xQueueIsQueueFullFromISR
000034f4 g     O .bss	00000004 alt_argc
00001a60 g     F .text	0000000c vTaskMissedYield
000013d8 g     F .text	00000030 uxQueueMessagesWaiting
000010d8 g     F .text	000001a8 xQueueGenericReceive
0000161c g     F .text	0000015c xTaskIncrementTick
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000be4 g     F .text	000000b8 xQueueGenericReset
00003478 g       *ABS*	00000000 _edata
00007174 g       *ABS*	00000000 _end
000001dc g       *ABS*	00000000 __ram_exceptions_end
00000a10 g     F .text	00000008 vPortInitialiseBlocks
0000335c g     F .text	00000008 altera_nios2_qsys_irq_init
00002b9c g     F .text	0000005c .hidden __modsi3
00002488 g     F .text	00000058 vTaskDelay
00007590 g       *ABS*	00000000 __alt_data_end
0000072c g     F .text	0000001c readyTask
00008000 g       *ABS*	00000000 __alt_mem_memory_buff
0000000c g       .entry	00000000 _exit
00002ce4 g     F .text	0000010c .hidden __muldi3
00001c50 g     F .text	0000003c vTaskExitCritical
00003394 g     F .text	0000001c strlen
00000828 g     F .text	00000040 pxPortInitialiseStack
00003080 g     F .text	00000048 alt_putchar
00003358 g     F .text	00000004 alt_icache_flush_all
00001a4c g     F .text	00000014 vTaskSetTimeOutState
00003464 g     O .rwdata	00000004 alt_priority_mask
000002f0 g     F .text	00000174 xAsymSendReq
000031c0 g     F .text	00000004 altera_avalon_mutex_close
00001448 g     F .text	00000008 uxQueueMessagesWaitingFromISR
00001454 g     F .text	0000000c xQueueIsQueueEmptyFromISR
00000218 g     F .text	00000040 xAsymMutexInit
000025dc g     F .text	00000024 uxTaskResetEventItemValue
00000ed8 g     F .text	00000080 xQueueCreateMutex
00002a1c g     F .text	000000c0 vTaskNotifyGiveFromISR
00002df0 g     F .text	000000f8 alt_load
00001048 g     F .text	00000090 xQueueGiveFromISR



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08407714 	ori	at,at,476
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .exceptions:

00000020 <save_context>:
# Entry point for exceptions.
.section .exceptions.entry, "xa"

# Save the entire context of a task.
save_context:
	addi	ea, ea, -4			# Point to the next instruction.
  20:	ef7fff04 	addi	ea,ea,-4
	addi	sp,	sp, -116		# Create space on the stack.
  24:	deffe304 	addi	sp,sp,-116
	stw		ra, 0(sp)
  28:	dfc00015 	stw	ra,0(sp)
								# Leave a gap for muldiv 0
	stw		at, 8(sp)
  2c:	d8400215 	stw	at,8(sp)
	stw		r2, 12(sp)
  30:	d8800315 	stw	r2,12(sp)
	stw		r3, 16(sp)
  34:	d8c00415 	stw	r3,16(sp)
	stw		r4, 20(sp)
  38:	d9000515 	stw	r4,20(sp)
	stw		r5, 24(sp)
  3c:	d9400615 	stw	r5,24(sp)
	stw		r6, 28(sp)
  40:	d9800715 	stw	r6,28(sp)
	stw		r7, 32(sp)
  44:	d9c00815 	stw	r7,32(sp)
	stw		r8, 36(sp)
  48:	da000915 	stw	r8,36(sp)
	stw		r9, 40(sp)
  4c:	da400a15 	stw	r9,40(sp)
	stw		r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
	stw		r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
	stw		r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
	stw		r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
	stw		r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
	stw		r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
	rdctl	r5, estatus 		# Save the eStatus
  68:	000b307a 	rdctl	r5,estatus
	stw		r5, 68(sp)
  6c:	d9401115 	stw	r5,68(sp)
	stw		ea, 72(sp)			# Save the PC
  70:	df401215 	stw	ea,72(sp)
	stw		r16, 76(sp)			# Save the remaining registers
  74:	dc001315 	stw	r16,76(sp)
	stw		r17, 80(sp)
  78:	dc401415 	stw	r17,80(sp)
	stw		r18, 84(sp)
  7c:	dc801515 	stw	r18,84(sp)
	stw		r19, 88(sp)
  80:	dcc01615 	stw	r19,88(sp)
	stw		r20, 92(sp)
  84:	dd001715 	stw	r20,92(sp)
	stw		r21, 96(sp)
  88:	dd401815 	stw	r21,96(sp)
	stw		r22, 100(sp)
  8c:	dd801915 	stw	r22,100(sp)
	stw		r23, 104(sp)
  90:	ddc01a15 	stw	r23,104(sp)
	stw		gp, 108(sp)
  94:	de801b15 	stw	gp,108(sp)
	stw		fp, 112(sp)
  98:	df001c15 	stw	fp,112(sp)

0000009c <save_sp_to_pxCurrentTCB>:
  9c:	06000034 	movhi	et,0

save_sp_to_pxCurrentTCB:
	movia	et, pxCurrentTCB	# Load the address of the pxCurrentTCB pointer
  a0:	c60d3704 	addi	et,et,13532
	ldw		et, (et)			# Load the value of the pxCurrentTCB pointer
  a4:	c6000017 	ldw	et,0(et)
	stw		sp, (et)			# Store the stack pointer into the top of the TCB
  a8:	c6c00015 	stw	sp,0(et)

000000ac <hw_irq_test>:
hw_irq_test:
	/*
     * Test to see if the exception was a software exception or caused
     * by an external interrupt, and vector accordingly.
     */
    rdctl	r4, ipending		# Load the Pending Interrupts indication
  ac:	0009313a 	rdctl	r4,ipending
	rdctl	r5, estatus 		# Load the eStatus (enabled interrupts).
  b0:	000b307a 	rdctl	r5,estatus
    andi	r2, r5, 1			# Are interrupts enabled globally.
  b4:	2880004c 	andi	r2,r5,1
    beq		r2, zero, soft_exceptions		# Interrupts are not enabled.
  b8:	10002526 	beq	r2,zero,150 <soft_exceptions>
    beq		r4, zero, soft_exceptions		# There are no interrupts triggered.
  bc:	20002426 	beq	r4,zero,150 <soft_exceptions>

000000c0 <hw_irq_handler>:

	.section .exceptions.irqhandler, "xa"
hw_irq_handler:
	call	alt_irq_handler					# Call the alt_irq_handler to deliver to the registered interrupt handler.
  c0:	000017c0 	call	17c <alt_irq_handler>

000000c4 <restore_sp_from_pxCurrentTCB>:
  c4:	06000034 	movhi	et,0

    .section .exceptions.irqreturn, "xa"
restore_sp_from_pxCurrentTCB:
	movia	et, pxCurrentTCB		# Load the address of the pxCurrentTCB pointer
  c8:	c60d3704 	addi	et,et,13532
	ldw		et, (et)				# Load the value of the pxCurrentTCB pointer
  cc:	c6000017 	ldw	et,0(et)
	ldw		sp, (et)				# Load the stack pointer with the top value of the TCB
  d0:	c6c00017 	ldw	sp,0(et)

000000d4 <restore_context>:

restore_context:
	ldw		ra, 0(sp)		# Restore the registers.
  d4:	dfc00017 	ldw	ra,0(sp)
							# Leave a gap for muldiv 0.
	ldw		at, 8(sp)
  d8:	d8400217 	ldw	at,8(sp)
	ldw		r2, 12(sp)
  dc:	d8800317 	ldw	r2,12(sp)
	ldw		r3, 16(sp)
  e0:	d8c00417 	ldw	r3,16(sp)
	ldw		r4, 20(sp)
  e4:	d9000517 	ldw	r4,20(sp)
	ldw		r5, 24(sp)
  e8:	d9400617 	ldw	r5,24(sp)
	ldw		r6, 28(sp)
  ec:	d9800717 	ldw	r6,28(sp)
	ldw		r7, 32(sp)
  f0:	d9c00817 	ldw	r7,32(sp)
	ldw		r8, 36(sp)
  f4:	da000917 	ldw	r8,36(sp)
	ldw		r9, 40(sp)
  f8:	da400a17 	ldw	r9,40(sp)
	ldw		r10, 44(sp)
  fc:	da800b17 	ldw	r10,44(sp)
	ldw		r11, 48(sp)
 100:	dac00c17 	ldw	r11,48(sp)
	ldw		r12, 52(sp)
 104:	db000d17 	ldw	r12,52(sp)
	ldw		r13, 56(sp)
 108:	db400e17 	ldw	r13,56(sp)
	ldw		r14, 60(sp)
 10c:	db800f17 	ldw	r14,60(sp)
	ldw		r15, 64(sp)
 110:	dbc01017 	ldw	r15,64(sp)
	ldw		et, 68(sp)		# Load the eStatus
 114:	de001117 	ldw	et,68(sp)
	wrctl	estatus, et 	# Write the eStatus
 118:	c001707a 	wrctl	estatus,et
	ldw		ea, 72(sp)		# Load the Program Counter
 11c:	df401217 	ldw	ea,72(sp)
	ldw		r16, 76(sp)
 120:	dc001317 	ldw	r16,76(sp)
	ldw		r17, 80(sp)
 124:	dc401417 	ldw	r17,80(sp)
	ldw		r18, 84(sp)
 128:	dc801517 	ldw	r18,84(sp)
	ldw		r19, 88(sp)
 12c:	dcc01617 	ldw	r19,88(sp)
	ldw		r20, 92(sp)
 130:	dd001717 	ldw	r20,92(sp)
	ldw		r21, 96(sp)
 134:	dd401817 	ldw	r21,96(sp)
	ldw		r22, 100(sp)
 138:	dd801917 	ldw	r22,100(sp)
	ldw		r23, 104(sp)
 13c:	ddc01a17 	ldw	r23,104(sp)
	ldw		gp, 108(sp)
 140:	de801b17 	ldw	gp,108(sp)
	ldw		fp, 112(sp)
 144:	df001c17 	ldw	fp,112(sp)
	addi	sp,	sp, 116		# Release stack space
 148:	dec01d04 	addi	sp,sp,116

    eret					# Return to address ea, loading eStatus into Status.
 14c:	ef80083a 	eret

00000150 <soft_exceptions>:

	.section .exceptions.soft, "xa"
soft_exceptions:
	ldw		et, 0(ea)				# Load the instruction where the interrupt occured.
 150:	ee000017 	ldw	et,0(ea)
	movhi	at, %hi(0x003B683A)		# Load the registers with the trap instruction code
 154:	00400ef4 	movhi	at,59
	ori		at, at, %lo(0x003B683A)
 158:	085a0e94 	ori	at,at,26682
   	cmpne	et, et, at				# Compare the trap instruction code to the last excuted instruction
 15c:	c070c03a 	cmpne	et,et,at
  	beq		et, r0, call_scheduler	# its a trap so switchcontext
 160:	c0000226 	beq	et,zero,16c <call_scheduler>
  	break							# This is an un-implemented instruction or muldiv problem.
 164:	003da03a 	break	0
  	br		restore_context			# its something else
 168:	003fda06 	br	d4 <restore_context>

0000016c <call_scheduler>:

call_scheduler:
	addi	ea, ea, 4						# A trap was called, increment the program counter so it is not called again.
 16c:	ef400104 	addi	ea,ea,4
	stw		ea, 72(sp)						# Save the new program counter to the context.
 170:	df401215 	stw	ea,72(sp)
	call	vTaskSwitchContext				# Pick the next context.
 174:	00017780 	call	1778 <vTaskSwitchContext>
	br		restore_sp_from_pxCurrentTCB	# Switch in the task context and restore.
 178:	003fd206 	br	c4 <restore_sp_from_pxCurrentTCB>

0000017c <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 17c:	defffe04 	addi	sp,sp,-8
 180:	dfc00115 	stw	ra,4(sp)
 184:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 188:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 18c:	04000034 	movhi	r16,0
 190:	841c1d04 	addi	r16,r16,28788

  active = alt_irq_pending ();

  do
  {
    i = 0;
 194:	000b883a 	mov	r5,zero
    mask = 1;
 198:	00800044 	movi	r2,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 19c:	10c8703a 	and	r4,r2,r3
 1a0:	20000b26 	beq	r4,zero,1d0 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 1a4:	280490fa 	slli	r2,r5,3
 1a8:	8085883a 	add	r2,r16,r2
 1ac:	10c00017 	ldw	r3,0(r2)
 1b0:	11000117 	ldw	r4,4(r2)
 1b4:	183ee83a 	callr	r3
 1b8:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 1bc:	183ff51e 	bne	r3,zero,194 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	dc000017 	ldw	r16,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1d0:	1085883a 	add	r2,r2,r2
      i++;
 1d4:	29400044 	addi	r5,r5,1

    } while (1);
 1d8:	003ff006 	br	19c <alt_irq_handler+0x20>

Disassembly of section .text:

000001dc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1dc:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
     1e0:	dedd6414 	ori	sp,sp,30096
    movhi gp, %hi(_gp)
     1e4:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     1e8:	d6ad1914 	ori	gp,gp,46180
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1ec:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1f0:	108d2714 	ori	r2,r2,13468

    movhi r3, %hi(__bss_end)
     1f4:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1f8:	18dc5d14 	ori	r3,r3,29044

    beq r2, r3, 1f
     1fc:	10c00326 	beq	r2,r3,20c <_start+0x30>

0:
    stw zero, (r2)
     200:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     204:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     208:	10fffd36 	bltu	r2,r3,200 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     20c:	0002df00 	call	2df0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     210:	0002ee80 	call	2ee8 <alt_main>

00000214 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     214:	003fff06 	br	214 <alt_after_alt_main>

00000218 <xAsymMutexInit>:
#endif // IS_SLAVE

static alt_mutex_dev * mutex;

bool_t xAsymMutexInit(){
	if(!altera_avalon_mutex_open(MUTEX_0_NAME)) {
     218:	01000034 	movhi	r4,0
PRIVILEGED_DATA static ToServeQueue xToServeQueue;
#endif // IS_SLAVE

static alt_mutex_dev * mutex;

bool_t xAsymMutexInit(){
     21c:	deffff04 	addi	sp,sp,-4
	if(!altera_avalon_mutex_open(MUTEX_0_NAME)) {
     220:	210cec04 	addi	r4,r4,13232
PRIVILEGED_DATA static ToServeQueue xToServeQueue;
#endif // IS_SLAVE

static alt_mutex_dev * mutex;

bool_t xAsymMutexInit(){
     224:	dfc00015 	stw	ra,0(sp)
	if(!altera_avalon_mutex_open(MUTEX_0_NAME)) {
     228:	00031680 	call	3168 <altera_avalon_mutex_open>
     22c:	10000626 	beq	r2,zero,248 <xAsymMutexInit+0x30>
		/* Failed to instantiate mutex */
		return xFalse;
	  }

	 mutex = altera_avalon_mutex_open(MUTEX_0_NAME);
     230:	01000034 	movhi	r4,0
     234:	210cec04 	addi	r4,r4,13232
     238:	00031680 	call	3168 <altera_avalon_mutex_open>
     23c:	d0a00e15 	stw	r2,-32712(gp)
	 return xTrue;
     240:	00800044 	movi	r2,1
     244:	00000106 	br	24c <xAsymMutexInit+0x34>
static alt_mutex_dev * mutex;

bool_t xAsymMutexInit(){
	if(!altera_avalon_mutex_open(MUTEX_0_NAME)) {
		/* Failed to instantiate mutex */
		return xFalse;
     248:	0005883a 	mov	r2,zero
	  }

	 mutex = altera_avalon_mutex_open(MUTEX_0_NAME);
	 return xTrue;
}
     24c:	dfc00017 	ldw	ra,0(sp)
     250:	dec00104 	addi	sp,sp,4
     254:	f800283a 	ret

00000258 <xAsymReqQueuInit>:
}



bool_t xAsymReqQueuInit(){
		altera_avalon_mutex_lock(mutex, 1);
     258:	d1200e17 	ldw	r4,-32712(gp)
	}
}



bool_t xAsymReqQueuInit(){
     25c:	defffb04 	addi	sp,sp,-20
		altera_avalon_mutex_lock(mutex, 1);
     260:	01400044 	movi	r5,1
	}
}



bool_t xAsymReqQueuInit(){
     264:	dfc00415 	stw	ra,16(sp)
		altera_avalon_mutex_lock(mutex, 1);
     268:	00031c40 	call	31c4 <altera_avalon_mutex_lock>
	if( altera_avalon_mutex_is_mine(mutex)) {
     26c:	d1200e17 	ldw	r4,-32712(gp)
     270:	00032300 	call	3230 <altera_avalon_mutex_is_mine>
     274:	10001a26 	beq	r2,zero,2e0 <xAsymReqQueuInit+0x88>
		xReqQueue->uxNumberOfItems = 0;
     278:	00a00014 	movui	r2,32768
     27c:	10000005 	stb	zero,0(r2)
		xReqQueue->xToAdd = 0;
     280:	10003105 	stb	zero,196(r2)
		xReqQueue->xToServe = 0;
     284:	10003145 	stb	zero,197(r2)
		altera_avalon_mutex_unlock(mutex);
     288:	d1200e17 	ldw	r4,-32712(gp)
     28c:	00032100 	call	3210 <altera_avalon_mutex_unlock>
     290:	00a00154 	movui	r2,32773
		int8_t ucIndex;
#ifdef IS_MASTER

		for (ucIndex = 0; ucIndex < QUEUE_LENGTH ; ucIndex++){
			xReqQueue->pxItems[ ucIndex ].xServed = -1;
     294:	013fffc4 	movi	r4,-1
		xReqQueue->xToServe = 0;
		altera_avalon_mutex_unlock(mutex);
		int8_t ucIndex;
#ifdef IS_MASTER

		for (ucIndex = 0; ucIndex < QUEUE_LENGTH ; ucIndex++){
     298:	00e03154 	movui	r3,32965
			xReqQueue->pxItems[ ucIndex ].xServed = -1;
     29c:	11000005 	stb	r4,0(r2)
     2a0:	10800304 	addi	r2,r2,12
		xReqQueue->xToServe = 0;
		altera_avalon_mutex_unlock(mutex);
		int8_t ucIndex;
#ifdef IS_MASTER

		for (ucIndex = 0; ucIndex < QUEUE_LENGTH ; ucIndex++){
     2a4:	10fffd1e 	bne	r2,r3,29c <xAsymReqQueuInit+0x44>
			xReqQueue->pxItems[ ucIndex ].xServed = -1;
		}
		/* Creating a polling task for the semaphore */
		xTaskCreate( vAsymSemaphorePolling,"polling", 356, NULL, configMAX_PRIORITIES, NULL  );
     2a8:	00800144 	movi	r2,5
     2ac:	01000034 	movhi	r4,0
     2b0:	01400034 	movhi	r5,0
     2b4:	d8800015 	stw	r2,0(sp)
     2b8:	d8000115 	stw	zero,4(sp)
     2bc:	d8000215 	stw	zero,8(sp)
     2c0:	d8000315 	stw	zero,12(sp)
     2c4:	21013904 	addi	r4,r4,1252
     2c8:	294cf004 	addi	r5,r5,13248
     2cc:	01805904 	movi	r6,356
     2d0:	000f883a 	mov	r7,zero
     2d4:	0001c8c0 	call	1c8c <xTaskGenericCreate>
		}
		/* Creating a polling task for the semaphore */
		xTaskCreate( vAsymSemaphorePolling,"polling", 356, NULL, configMAX_PRIORITIES, NULL  );

#endif // IS_MASTER
		return xTrue;
     2d8:	00800044 	movi	r2,1
     2dc:	00000106 	br	2e4 <xAsymReqQueuInit+0x8c>
	}
	else
		return xFalse;
     2e0:	0005883a 	mov	r2,zero
}
     2e4:	dfc00417 	ldw	ra,16(sp)
     2e8:	dec00504 	addi	sp,sp,20
     2ec:	f800283a 	ret

000002f0 <xAsymSendReq>:

#ifdef IS_MASTER

bool_t xAsymSendReq( int8_t xReqValue, int8_t xSentValue ){
     2f0:	defff804 	addi	sp,sp,-32
     2f4:	dd400615 	stw	r21,24(sp)
     2f8:	dd000515 	stw	r20,20(sp)
	int8_t ucIndex;
	xSemaphoreHandle xSemaphore = xSemaphoreCreateBinary();
     2fc:	018000c4 	movi	r6,3
		return xFalse;
}

#ifdef IS_MASTER

bool_t xAsymSendReq( int8_t xReqValue, int8_t xSentValue ){
     300:	202b883a 	mov	r21,r4
     304:	2829883a 	mov	r20,r5
	int8_t ucIndex;
	xSemaphoreHandle xSemaphore = xSemaphoreCreateBinary();
     308:	01000044 	movi	r4,1
     30c:	000b883a 	mov	r5,zero
		return xFalse;
}

#ifdef IS_MASTER

bool_t xAsymSendReq( int8_t xReqValue, int8_t xSentValue ){
     310:	dfc00715 	stw	ra,28(sp)
     314:	dcc00415 	stw	r19,16(sp)
     318:	dc800315 	stw	r18,12(sp)
     31c:	dc400215 	stw	r17,8(sp)
     320:	dc000115 	stw	r16,4(sp)
	int8_t ucIndex;
	xSemaphoreHandle xSemaphore = xSemaphoreCreateBinary();
     324:	0000c9c0 	call	c9c <xQueueGenericCreate>

	altera_avalon_mutex_lock(mutex, 1);
     328:	d1200e17 	ldw	r4,-32712(gp)
     32c:	01400044 	movi	r5,1

#ifdef IS_MASTER

bool_t xAsymSendReq( int8_t xReqValue, int8_t xSentValue ){
	int8_t ucIndex;
	xSemaphoreHandle xSemaphore = xSemaphoreCreateBinary();
     330:	d8800015 	stw	r2,0(sp)

	altera_avalon_mutex_lock(mutex, 1);
     334:	00031c40 	call	31c4 <altera_avalon_mutex_lock>
	if( altera_avalon_mutex_is_mine(mutex)) {
     338:	d1200e17 	ldw	r4,-32712(gp)
     33c:	00032300 	call	3230 <altera_avalon_mutex_is_mine>
     340:	10003f26 	beq	r2,zero,440 <xAsymSendReq+0x150>
		/* Busy waiting while QUEUE_LENGTH gets less than uxNumberOfItems */
		while(!(QUEUE_LENGTH > xReqQueue->uxNumberOfItems)){
     344:	04600014 	movui	r17,32768
     348:	040003c4 	movi	r16,15
     34c:	8c800003 	ldbu	r18,0(r17)
     350:	90803fcc 	andi	r2,r18,255
     354:	8080082e 	bgeu	r16,r2,378 <xAsymSendReq+0x88>
			altera_avalon_mutex_unlock(mutex);
     358:	d1200e17 	ldw	r4,-32712(gp)
     35c:	00032100 	call	3210 <altera_avalon_mutex_unlock>
			vTaskDelay(10);
     360:	01000284 	movi	r4,10
     364:	00024880 	call	2488 <vTaskDelay>
			altera_avalon_mutex_lock(mutex, 1);
     368:	d1200e17 	ldw	r4,-32712(gp)
     36c:	01400044 	movi	r5,1
     370:	00031c40 	call	31c4 <altera_avalon_mutex_lock>
     374:	003ff506 	br	34c <xAsymSendReq+0x5c>
	xSemaphoreHandle xSemaphore = xSemaphoreCreateBinary();

	altera_avalon_mutex_lock(mutex, 1);
	if( altera_avalon_mutex_is_mine(mutex)) {
		/* Busy waiting while QUEUE_LENGTH gets less than uxNumberOfItems */
		while(!(QUEUE_LENGTH > xReqQueue->uxNumberOfItems)){
     378:	0021883a 	mov	r16,zero
     37c:	04e00154 	movui	r19,32773
			altera_avalon_mutex_unlock(mutex);
			vTaskDelay(10);
			altera_avalon_mutex_lock(mutex, 1);
		}

		for (ucIndex = 0; ucIndex < QUEUE_LENGTH ; ucIndex++){
     380:	04400404 	movi	r17,16
     384:	8009883a 	mov	r4,r16
     388:	01400304 	movi	r5,12
     38c:	0002c080 	call	2c08 <__mulsi3>
     390:	14c5883a 	add	r2,r2,r19
			if(xReqQueue->pxItems[ ucIndex ].xServed != 0){
     394:	10800007 	ldb	r2,0(r2)
     398:	10000326 	beq	r2,zero,3a8 <xAsymSendReq+0xb8>
				xReqQueue->xToAdd = ucIndex;
     39c:	00a00014 	movui	r2,32768
     3a0:	14003105 	stb	r16,196(r2)
				break;
     3a4:	00000206 	br	3b0 <xAsymSendReq+0xc0>
     3a8:	84000044 	addi	r16,r16,1
			altera_avalon_mutex_unlock(mutex);
			vTaskDelay(10);
			altera_avalon_mutex_lock(mutex, 1);
		}

		for (ucIndex = 0; ucIndex < QUEUE_LENGTH ; ucIndex++){
     3ac:	847ff51e 	bne	r16,r17,384 <xAsymSendReq+0x94>
				xReqQueue->xToAdd = ucIndex;
				break;
			}
		}
		//taskENTER_CRITICAL();
		xReqQueue->pxItems[ xReqQueue->xToAdd ].xItemValue = xReqValue;
     3b0:	04200014 	movui	r16,32768
     3b4:	84403103 	ldbu	r17,196(r16)
     3b8:	01400304 	movi	r5,12
     3bc:	8cc03fcc 	andi	r19,r17,255
     3c0:	9cc0201c 	xori	r19,r19,128
     3c4:	9cffe004 	addi	r19,r19,-128
     3c8:	9809883a 	mov	r4,r19
     3cc:	0002c080 	call	2c08 <__mulsi3>
     3d0:	8085883a 	add	r2,r16,r2
     3d4:	10c00104 	addi	r3,r2,4
     3d8:	1d400005 	stb	r21,0(r3)
		xReqQueue->pxItems[ xReqQueue->xToAdd ].xServed = 0;
     3dc:	10000145 	stb	zero,5(r2)
		xReqQueue->pxItems[ xReqQueue->xToAdd ].pvSemaphore = (void*) &xSemaphore;
     3e0:	16c00215 	stw	sp,8(r2)
		xReqQueue->pxItems[ xReqQueue->xToAdd ].xSentItem = xSentValue;
     3e4:	99000044 	addi	r4,r19,1
     3e8:	01400304 	movi	r5,12
     3ec:	0002c080 	call	2c08 <__mulsi3>
     3f0:	8085883a 	add	r2,r16,r2
     3f4:	15000005 	stb	r20,0(r2)
		xReqQueue->xToAdd = (QUEUE_LENGTH == (xReqQueue->xToAdd + 1))? 0: xReqQueue->xToAdd + 1;
     3f8:	008003c4 	movi	r2,15
     3fc:	98800226 	beq	r19,r2,408 <xAsymSendReq+0x118>
     400:	8c400044 	addi	r17,r17,1
     404:	00000106 	br	40c <xAsymSendReq+0x11c>
     408:	0023883a 	mov	r17,zero
		xReqQueue->uxNumberOfItems++;
     40c:	94800044 	addi	r18,r18,1
		//taskENTER_CRITICAL();
		xReqQueue->pxItems[ xReqQueue->xToAdd ].xItemValue = xReqValue;
		xReqQueue->pxItems[ xReqQueue->xToAdd ].xServed = 0;
		xReqQueue->pxItems[ xReqQueue->xToAdd ].pvSemaphore = (void*) &xSemaphore;
		xReqQueue->pxItems[ xReqQueue->xToAdd ].xSentItem = xSentValue;
		xReqQueue->xToAdd = (QUEUE_LENGTH == (xReqQueue->xToAdd + 1))? 0: xReqQueue->xToAdd + 1;
     410:	84403105 	stb	r17,196(r16)
		xReqQueue->uxNumberOfItems++;
     414:	84800005 	stb	r18,0(r16)
		altera_avalon_mutex_unlock(mutex);
     418:	d1200e17 	ldw	r4,-32712(gp)
     41c:	00032100 	call	3210 <altera_avalon_mutex_unlock>

		/* Task should block waiting for the request to be served */
		//alt_printf("Now I am blocked. Smphr: %x\nuxNumberOfItems: %x\n\txToAdd: %x\n", &xSemaphore,xReqQueue->uxNumberOfItems, xReqQueue->xToAdd);
		xSemaphoreTake(xSemaphore,portMAX_DELAY);
     420:	d9000017 	ldw	r4,0(sp)
     424:	000b883a 	mov	r5,zero
     428:	01bfffc4 	movi	r6,-1
     42c:	000f883a 	mov	r7,zero
     430:	00010d80 	call	10d8 <xQueueGenericReceive>
		//taskEXIT_CRITICAL();
		vSemaphoreDelete( xSemaphore );
     434:	d9000017 	ldw	r4,0(sp)
     438:	00014500 	call	1450 <vQueueDelete>
		return xTrue;
     43c:	00800044 	movi	r2,1

	}
	else
		return xFalse;
}
     440:	dfc00717 	ldw	ra,28(sp)
     444:	dd400617 	ldw	r21,24(sp)
     448:	dd000517 	ldw	r20,20(sp)
     44c:	dcc00417 	ldw	r19,16(sp)
     450:	dc800317 	ldw	r18,12(sp)
     454:	dc400217 	ldw	r17,8(sp)
     458:	dc000117 	ldw	r16,4(sp)
     45c:	dec00804 	addi	sp,sp,32
     460:	f800283a 	ret

00000464 <vAsymUpdateFinishedReq>:

void vAsymUpdateFinishedReq(){
	int8_t ucIndex;
	altera_avalon_mutex_lock(mutex, 1);
     464:	d1200e17 	ldw	r4,-32712(gp)
	}
	else
		return xFalse;
}

void vAsymUpdateFinishedReq(){
     468:	defffb04 	addi	sp,sp,-20
	int8_t ucIndex;
	altera_avalon_mutex_lock(mutex, 1);
     46c:	01400044 	movi	r5,1
	}
	else
		return xFalse;
}

void vAsymUpdateFinishedReq(){
     470:	dcc00315 	stw	r19,12(sp)
     474:	dc800215 	stw	r18,8(sp)
     478:	dc400115 	stw	r17,4(sp)
     47c:	dc000015 	stw	r16,0(sp)
     480:	dfc00415 	stw	ra,16(sp)
	int8_t ucIndex;
	altera_avalon_mutex_lock(mutex, 1);
     484:	04200154 	movui	r16,32773
     488:	00031c40 	call	31c4 <altera_avalon_mutex_lock>
	for (ucIndex = 0; ucIndex < QUEUE_LENGTH ; ucIndex++){
		if(xReqQueue->pxItems[ ucIndex ].xServed == 1){
     48c:	04800044 	movi	r18,1
		//	alt_printf("ucIndex: %x\txServed: %x\n",ucIndex, xReqQueue->pxItems[ ucIndex ].xServed);
			xSemaphoreHandle* xSemaphore = (xSemaphoreHandle *) ( xReqQueue->pxItems[ ucIndex ].pvSemaphore );
			xSemaphoreGive( *xSemaphore);
			xReqQueue->pxItems[ ucIndex ].xServed = -1;
     490:	04ffffc4 	movi	r19,-1
}

void vAsymUpdateFinishedReq(){
	int8_t ucIndex;
	altera_avalon_mutex_lock(mutex, 1);
	for (ucIndex = 0; ucIndex < QUEUE_LENGTH ; ucIndex++){
     494:	04603154 	movui	r17,32965
		if(xReqQueue->pxItems[ ucIndex ].xServed == 1){
     498:	80800007 	ldb	r2,0(r16)
     49c:	1480071e 	bne	r2,r18,4bc <vAsymUpdateFinishedReq+0x58>
		//	alt_printf("ucIndex: %x\txServed: %x\n",ucIndex, xReqQueue->pxItems[ ucIndex ].xServed);
			xSemaphoreHandle* xSemaphore = (xSemaphoreHandle *) ( xReqQueue->pxItems[ ucIndex ].pvSemaphore );
			xSemaphoreGive( *xSemaphore);
     4a0:	808000d7 	ldw	r2,3(r16)
     4a4:	000b883a 	mov	r5,zero
     4a8:	000d883a 	mov	r6,zero
     4ac:	11000017 	ldw	r4,0(r2)
     4b0:	000f883a 	mov	r7,zero
     4b4:	0000d5c0 	call	d5c <xQueueGenericSend>
			xReqQueue->pxItems[ ucIndex ].xServed = -1;
     4b8:	84c00005 	stb	r19,0(r16)
     4bc:	84000304 	addi	r16,r16,12
}

void vAsymUpdateFinishedReq(){
	int8_t ucIndex;
	altera_avalon_mutex_lock(mutex, 1);
	for (ucIndex = 0; ucIndex < QUEUE_LENGTH ; ucIndex++){
     4c0:	847ff51e 	bne	r16,r17,498 <vAsymUpdateFinishedReq+0x34>
			xSemaphoreGive( *xSemaphore);
			xReqQueue->pxItems[ ucIndex ].xServed = -1;

		}
	}
	altera_avalon_mutex_unlock(mutex);
     4c4:	d1200e17 	ldw	r4,-32712(gp)
}
     4c8:	dfc00417 	ldw	ra,16(sp)
     4cc:	dcc00317 	ldw	r19,12(sp)
     4d0:	dc800217 	ldw	r18,8(sp)
     4d4:	dc400117 	ldw	r17,4(sp)
     4d8:	dc000017 	ldw	r16,0(sp)
     4dc:	dec00504 	addi	sp,sp,20
			xSemaphoreGive( *xSemaphore);
			xReqQueue->pxItems[ ucIndex ].xServed = -1;

		}
	}
	altera_avalon_mutex_unlock(mutex);
     4e0:	00032101 	jmpi	3210 <altera_avalon_mutex_unlock>

000004e4 <vAsymSemaphorePolling>:
	 mutex = altera_avalon_mutex_open(MUTEX_0_NAME);
	 return xTrue;
}


void vAsymSemaphorePolling(void *p ){
     4e4:	deffff04 	addi	sp,sp,-4
     4e8:	dfc00015 	stw	ra,0(sp)
	while(1){
		#ifdef IS_MASTER
		vAsymUpdateFinishedReq();
     4ec:	00004640 	call	464 <vAsymUpdateFinishedReq>

		#ifdef IS_SLAVE
		vAsymUpdateSentReq();
		#endif // IS_MASTER

		vTaskDelay(200);
     4f0:	01003204 	movi	r4,200
     4f4:	00024880 	call	2488 <vTaskDelay>
	}
     4f8:	003ffc06 	br	4ec <vAsymSemaphorePolling+0x8>

000004fc <xAsymGetReq>:
	}
	altera_avalon_mutex_unlock(mutex);
}
#endif // IS_MASTER

int8_t xAsymGetReq( int8_t xIndex ) {
     4fc:	defffe04 	addi	sp,sp,-8
     500:	dc000015 	stw	r16,0(sp)
     504:	2021883a 	mov	r16,r4
	int8_t xReturnValue;
	altera_avalon_mutex_lock(mutex, 1);
     508:	d1200e17 	ldw	r4,-32712(gp)
     50c:	01400044 	movi	r5,1
	}
	altera_avalon_mutex_unlock(mutex);
}
#endif // IS_MASTER

int8_t xAsymGetReq( int8_t xIndex ) {
     510:	dfc00115 	stw	ra,4(sp)
	int8_t xReturnValue;
	altera_avalon_mutex_lock(mutex, 1);
     514:	00031c40 	call	31c4 <altera_avalon_mutex_lock>
	if( altera_avalon_mutex_is_mine(mutex)) {
     518:	d1200e17 	ldw	r4,-32712(gp)
     51c:	00032300 	call	3230 <altera_avalon_mutex_is_mine>
     520:	10000c26 	beq	r2,zero,554 <xAsymGetReq+0x58>
		xReturnValue = (int8_t) ( xReqQueue->pxItems[ xIndex ].xItemValue );
     524:	81003fcc 	andi	r4,r16,255
     528:	2100201c 	xori	r4,r4,128
     52c:	213fe004 	addi	r4,r4,-128
     530:	01400304 	movi	r5,12
     534:	0002c080 	call	2c08 <__mulsi3>
     538:	00e00114 	movui	r3,32772
     53c:	10c5883a 	add	r2,r2,r3
		altera_avalon_mutex_unlock(mutex);
     540:	d1200e17 	ldw	r4,-32712(gp)

int8_t xAsymGetReq( int8_t xIndex ) {
	int8_t xReturnValue;
	altera_avalon_mutex_lock(mutex, 1);
	if( altera_avalon_mutex_is_mine(mutex)) {
		xReturnValue = (int8_t) ( xReqQueue->pxItems[ xIndex ].xItemValue );
     544:	14000003 	ldbu	r16,0(r2)
		altera_avalon_mutex_unlock(mutex);
     548:	00032100 	call	3210 <altera_avalon_mutex_unlock>
		return xReturnValue;
     54c:	8005883a 	mov	r2,r16
     550:	00000106 	br	558 <xAsymGetReq+0x5c>
	}
	else
		return xFalse;
     554:	0005883a 	mov	r2,zero
}
     558:	dfc00117 	ldw	ra,4(sp)
     55c:	dc000017 	ldw	r16,0(sp)
     560:	dec00204 	addi	sp,sp,8
     564:	f800283a 	ret

00000568 <xAsymReqQueueNotEmpty>:
bool_t xAsymReqQueueNotEmpty(){
	altera_avalon_mutex_lock(mutex, 1);
     568:	d1200e17 	ldw	r4,-32712(gp)
		return xReturnValue;
	}
	else
		return xFalse;
}
bool_t xAsymReqQueueNotEmpty(){
     56c:	defffe04 	addi	sp,sp,-8
	altera_avalon_mutex_lock(mutex, 1);
     570:	01400044 	movi	r5,1
		return xReturnValue;
	}
	else
		return xFalse;
}
bool_t xAsymReqQueueNotEmpty(){
     574:	dfc00115 	stw	ra,4(sp)
     578:	dc000015 	stw	r16,0(sp)
	altera_avalon_mutex_lock(mutex, 1);
     57c:	00031c40 	call	31c4 <altera_avalon_mutex_lock>
	bool_t xNotEmpty = xReqQueue->uxNumberOfItems;
     580:	00a00014 	movui	r2,32768
	altera_avalon_mutex_unlock(mutex);
     584:	d1200e17 	ldw	r4,-32712(gp)
	else
		return xFalse;
}
bool_t xAsymReqQueueNotEmpty(){
	altera_avalon_mutex_lock(mutex, 1);
	bool_t xNotEmpty = xReqQueue->uxNumberOfItems;
     588:	14000003 	ldbu	r16,0(r2)
	altera_avalon_mutex_unlock(mutex);
     58c:	00032100 	call	3210 <altera_avalon_mutex_unlock>
	return xNotEmpty;
}
     590:	8005883a 	mov	r2,r16
     594:	dfc00117 	ldw	ra,4(sp)
     598:	dc000017 	ldw	r16,0(sp)
     59c:	dec00204 	addi	sp,sp,8
     5a0:	f800283a 	ret

000005a4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5a4:	20800204 	addi	r2,r4,8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     5a8:	00ffffc4 	movi	r3,-1
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5ac:	20800115 	stw	r2,4(r4)

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     5b0:	20c00215 	stw	r3,8(r4)

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5b4:	20800315 	stw	r2,12(r4)
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5b8:	20800415 	stw	r2,16(r4)

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     5bc:	20000015 	stw	zero,0(r4)
     5c0:	f800283a 	ret

000005c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     5c4:	20000415 	stw	zero,16(r4)
     5c8:	f800283a 	ret

000005cc <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
     5cc:	20800117 	ldw	r2,4(r4)

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     5d0:	10c00217 	ldw	r3,8(r2)
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     5d4:	28800115 	stw	r2,4(r5)
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     5d8:	28c00215 	stw	r3,8(r5)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     5dc:	10c00217 	ldw	r3,8(r2)
     5e0:	19400115 	stw	r5,4(r3)
	pxIndex->pxPrevious = pxNewListItem;
     5e4:	11400215 	stw	r5,8(r2)

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
     5e8:	20800017 	ldw	r2,0(r4)

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     5ec:	29000415 	stw	r4,16(r5)

	( pxList->uxNumberOfItems )++;
     5f0:	10800044 	addi	r2,r2,1
     5f4:	20800015 	stw	r2,0(r4)
     5f8:	f800283a 	ret

000005fc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     5fc:	28c00017 	ldw	r3,0(r5)
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     600:	00bfffc4 	movi	r2,-1
     604:	1880021e 	bne	r3,r2,610 <vListInsert+0x14>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     608:	20800417 	ldw	r2,16(r4)
     60c:	00000606 	br	628 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     610:	20800204 	addi	r2,r4,8
     614:	11800117 	ldw	r6,4(r2)
     618:	31c00017 	ldw	r7,0(r6)
     61c:	19c00236 	bltu	r3,r7,628 <vListInsert+0x2c>
     620:	3005883a 	mov	r2,r6
     624:	003ffb06 	br	614 <vListInsert+0x18>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     628:	10c00117 	ldw	r3,4(r2)
     62c:	28c00115 	stw	r3,4(r5)
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     630:	19400215 	stw	r5,8(r3)
	pxNewListItem->pxPrevious = pxIterator;
     634:	28800215 	stw	r2,8(r5)
	pxIterator->pxNext = pxNewListItem;
     638:	11400115 	stw	r5,4(r2)

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
     63c:	20800017 	ldw	r2,0(r4)
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     640:	29000415 	stw	r4,16(r5)

	( pxList->uxNumberOfItems )++;
     644:	10800044 	addi	r2,r2,1
     648:	20800015 	stw	r2,0(r4)
     64c:	f800283a 	ret

00000650 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     650:	21400117 	ldw	r5,4(r4)
     654:	20800217 	ldw	r2,8(r4)

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     658:	20c00417 	ldw	r3,16(r4)

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     65c:	28800215 	stw	r2,8(r5)
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     660:	20800217 	ldw	r2,8(r4)
     664:	11400115 	stw	r5,4(r2)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     668:	19400117 	ldw	r5,4(r3)
     66c:	2900011e 	bne	r5,r4,674 <uxListRemove+0x24>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     670:	18800115 	stw	r2,4(r3)
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
     674:	18800017 	ldw	r2,0(r3)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     678:	20000415 	stw	zero,16(r4)
	( pxList->uxNumberOfItems )--;
     67c:	10bfffc4 	addi	r2,r2,-1
     680:	18800015 	stw	r2,0(r3)

	return pxList->uxNumberOfItems;
}
     684:	f800283a 	ret

00000688 <masterTask>:
#include "semphr.h"

// asym includes
#include "asym.h"

void masterTask( void *p){
     688:	defffa04 	addi	sp,sp,-24
     68c:	dcc00315 	stw	r19,12(sp)
	int i = 0;
	int task, value;
	//alt_printf("I am in\n" );
	while(i < 35){
		value = rand() %16 + 04;
     690:	04e00034 	movhi	r19,32768
#include "semphr.h"

// asym includes
#include "asym.h"

void masterTask( void *p){
     694:	dd000415 	stw	r20,16(sp)
     698:	dc400115 	stw	r17,4(sp)
     69c:	dfc00515 	stw	ra,20(sp)
     6a0:	dc800215 	stw	r18,8(sp)
     6a4:	dc000015 	stw	r16,0(sp)
     6a8:	044008c4 	movi	r17,35
	int i = 0;
	int task, value;
	//alt_printf("I am in\n" );
	while(i < 35){
		value = rand() %16 + 04;
     6ac:	9cc003c4 	addi	r19,r19,15
     6b0:	053ffc04 	movi	r20,-16
     6b4:	0002c880 	call	2c88 <rand>
     6b8:	14c4703a 	and	r2,r2,r19
     6bc:	1000030e 	bge	r2,zero,6cc <masterTask+0x44>
     6c0:	10bfffc4 	addi	r2,r2,-1
     6c4:	1504b03a 	or	r2,r2,r20
     6c8:	10800044 	addi	r2,r2,1
     6cc:	14000104 	addi	r16,r2,4
		task = rand() %6;
     6d0:	0002c880 	call	2c88 <rand>
     6d4:	1009883a 	mov	r4,r2
     6d8:	01400184 	movi	r5,6
     6dc:	0002b9c0 	call	2b9c <__modsi3>
     6e0:	1025883a 	mov	r18,r2
		taskENTER_CRITICAL();
     6e4:	0001c200 	call	1c20 <vTaskEnterCritical>
		alt_printf("Sending task %x at Value = %x \n", task , value );
     6e8:	01000034 	movhi	r4,0
     6ec:	800d883a 	mov	r6,r16
     6f0:	210cf204 	addi	r4,r4,13256
     6f4:	900b883a 	mov	r5,r18
     6f8:	0002f140 	call	2f14 <alt_printf>
		taskEXIT_CRITICAL();
     6fc:	0001c500 	call	1c50 <vTaskExitCritical>
		xAsymSendReq( task, value  );
     700:	9009883a 	mov	r4,r18
     704:	800b883a 	mov	r5,r16
     708:	00002f00 	call	2f0 <xAsymSendReq>
		vTaskDelay(20);
     70c:	01000504 	movi	r4,20
     710:	8c7fffc4 	addi	r17,r17,-1
     714:	00024880 	call	2488 <vTaskDelay>

void masterTask( void *p){
	int i = 0;
	int task, value;
	//alt_printf("I am in\n" );
	while(i < 35){
     718:	883fe61e 	bne	r17,zero,6b4 <masterTask+0x2c>
		vTaskDelay(20);
		i++;
	}
	i = 0;

		alt_printf("Finished sending tasks\n");
     71c:	01000034 	movhi	r4,0
     720:	210cfa04 	addi	r4,r4,13288
     724:	0002f140 	call	2f14 <alt_printf>

	while(1);/* */
     728:	003fff06 	br	728 <masterTask+0xa0>

0000072c <readyTask>:
}

void readyTask( void *p){
     72c:	deffff04 	addi	sp,sp,-4
     730:	dfc00015 	stw	ra,0(sp)
	while(1){
		taskENTER_CRITICAL();
     734:	0001c200 	call	1c20 <vTaskEnterCritical>
		//alt_printf("Ready is now running\n" );
		taskEXIT_CRITICAL();
     738:	0001c500 	call	1c50 <vTaskExitCritical>
		vTaskDelay(1000);
     73c:	0100fa04 	movi	r4,1000
     740:	00024880 	call	2488 <vTaskDelay>
	}
     744:	003ffb06 	br	734 <readyTask+0x8>

00000748 <main>:
}

int main()
{
     748:	defffa04 	addi	sp,sp,-24
     74c:	dfc00515 	stw	ra,20(sp)
     750:	dc000415 	stw	r16,16(sp)

	xAsymMutexInit();
     754:	00002180 	call	218 <xAsymMutexInit>
	xAsymReqQueuInit();
     758:	00002580 	call	258 <xAsymReqQueuInit>
	alt_putstr("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
     75c:	01000034 	movhi	r4,0
     760:	210d0004 	addi	r4,r4,13312
     764:	00030c80 	call	30c8 <alt_putstr>

	 xTaskCreate(masterTask, "masterTask", 100, NULL, 2, NULL);
     768:	04001904 	movi	r16,100
     76c:	00800084 	movi	r2,2
     770:	01000034 	movhi	r4,0
     774:	01400034 	movhi	r5,0
     778:	800d883a 	mov	r6,r16
     77c:	d8800015 	stw	r2,0(sp)
     780:	d8000115 	stw	zero,4(sp)
     784:	d8000215 	stw	zero,8(sp)
     788:	d8000315 	stw	zero,12(sp)
     78c:	2101a204 	addi	r4,r4,1672
     790:	294d0604 	addi	r5,r5,13336
     794:	000f883a 	mov	r7,zero
     798:	0001c8c0 	call	1c8c <xTaskGenericCreate>

	xTaskCreate(readyTask, "readyTask", 100, NULL, 1, NULL);
     79c:	00800044 	movi	r2,1
     7a0:	01000034 	movhi	r4,0
     7a4:	01400034 	movhi	r5,0
     7a8:	294d0904 	addi	r5,r5,13348
     7ac:	800d883a 	mov	r6,r16
     7b0:	000f883a 	mov	r7,zero
     7b4:	d8800015 	stw	r2,0(sp)
     7b8:	d8000115 	stw	zero,4(sp)
     7bc:	d8000215 	stw	zero,8(sp)
     7c0:	d8000315 	stw	zero,12(sp)
     7c4:	2101cb04 	addi	r4,r4,1836
     7c8:	0001c8c0 	call	1c8c <xTaskGenericCreate>

	alt_putstr("Starting scheduler\n");
     7cc:	01000034 	movhi	r4,0
     7d0:	210d0c04 	addi	r4,r4,13360
     7d4:	00030c80 	call	30c8 <alt_putstr>

	 vTaskStartScheduler();
     7d8:	0001f080 	call	1f08 <vTaskStartScheduler>
	alt_putstr("OOPs!\n");
     7dc:	01000034 	movhi	r4,0
     7e0:	210d1104 	addi	r4,r4,13380
     7e4:	00030c80 	call	30c8 <alt_putstr>



	return 0;
}
     7e8:	0005883a 	mov	r2,zero
     7ec:	dfc00517 	ldw	ra,20(sp)
     7f0:	dc000417 	ldw	r16,16(sp)
     7f4:	dec00604 	addi	sp,sp,24
     7f8:	f800283a 	ret

000007fc <vPortSysTickHandler>:
	IOWR_ALTERA_AVALON_TIMER_STATUS( TIMER_0_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK );
}
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void * context, alt_u32 id )
{
     7fc:	deffff04 	addi	sp,sp,-4
     800:	dfc00015 	stw	ra,0(sp)
	/* Increment the kernel tick. */
	if( xTaskIncrementTick() != pdFALSE )
     804:	000161c0 	call	161c <xTaskIncrementTick>
     808:	10000126 	beq	r2,zero,810 <vPortSysTickHandler+0x14>
	{
        vTaskSwitchContext();
     80c:	00017780 	call	1778 <vTaskSwitchContext>
	}

	/* Clear the interrupt. */
	IOWR_ALTERA_AVALON_TIMER_STATUS( TIMER_0_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK );
     810:	00ac0014 	movui	r2,45056
     814:	00ffff84 	movi	r3,-2
     818:	10c00035 	stwio	r3,0(r2)
}
     81c:	dfc00017 	ldw	ra,0(sp)
     820:	dec00104 	addi	sp,sp,4
     824:	f800283a 	ret

00000828 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
     828:	deffff04 	addi	sp,sp,-4

/*-----------------------------------------------------------*/

static void prvReadGp( uint32_t *ulValue )
{
	asm( "stw gp, (%0)" :: "r"(ulValue) );
     82c:	de800015 	stw	gp,0(sp)
StackType_t xGlobalPointer;

    prvReadGp( &xGlobalPointer );

    /* End of stack marker. */
    *pxTopOfStack = 0xdeadbeef;
     830:	00b7abb4 	movhi	r2,57006
     834:	10afbbc4 	addi	r2,r2,-16657
     838:	20800015 	stw	r2,0(r4)
/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
StackType_t *pxFramePointer = pxTopOfStack - 1;
     83c:	20bfff04 	addi	r2,r4,-4

    /* End of stack marker. */
    *pxTopOfStack = 0xdeadbeef;
    pxTopOfStack--;

    *pxTopOfStack = ( StackType_t ) pxFramePointer;
     840:	20bfff15 	stw	r2,-4(r4)
    pxTopOfStack--;

    *pxTopOfStack = xGlobalPointer;
     844:	d8800017 	ldw	r2,0(sp)

    /* Space for R23 to R16. */
    pxTopOfStack -= 9;

    *pxTopOfStack = ( StackType_t ) pxCode;
     848:	217ff515 	stw	r5,-44(r4)
    *pxTopOfStack = portINITIAL_ESTATUS;

    /* Space for R15 to R5. */
    pxTopOfStack -= 12;

    *pxTopOfStack = ( StackType_t ) pvParameters;
     84c:	21bfe815 	stw	r6,-96(r4)
    pxTopOfStack--;

    *pxTopOfStack = ( StackType_t ) pxFramePointer;
    pxTopOfStack--;

    *pxTopOfStack = xGlobalPointer;
     850:	20bffe15 	stw	r2,-8(r4)
    pxTopOfStack -= 9;

    *pxTopOfStack = ( StackType_t ) pxCode;
    pxTopOfStack--;

    *pxTopOfStack = portINITIAL_ESTATUS;
     854:	00800044 	movi	r2,1
     858:	20bff415 	stw	r2,-48(r4)

    /* Space for R3 to R1, muldiv and RA. */
    pxTopOfStack -= 5;

    return pxTopOfStack;
}
     85c:	20bfe304 	addi	r2,r4,-116
     860:	dec00104 	addi	sp,sp,4
     864:	f800283a 	ret

00000868 <vPortEndScheduler>:
	return 0;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     868:	f800283a 	ret

0000086c <alt_irq_register>:
int alt_irq_register( alt_u32 id, void* context, void (*handler)(void*, alt_u32) )
{
	int rc = -EINVAL;
	alt_irq_context status;

	if (id < ALT_NIRQ)
     86c:	008007c4 	movi	r2,31
     870:	11002236 	bltu	r2,r4,8fc <alt_irq_register+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     874:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     878:	00ffff84 	movi	r3,-2
     87c:	10c4703a 	and	r2,r2,r3
     880:	1001703a 	wrctl	status,r2
		 * state.
		 */

		status = alt_irq_disable_all ();

		alt_irq[id].handler = handler;
     884:	200490fa 	slli	r2,r4,3
     888:	01c00034 	movhi	r7,0
     88c:	39dc1d04 	addi	r7,r7,28788
     890:	3885883a 	add	r2,r7,r2
		alt_irq[id].context = context;
     894:	11400115 	stw	r5,4(r2)
		 * state.
		 */

		status = alt_irq_disable_all ();

		alt_irq[id].handler = handler;
     898:	11800015 	stw	r6,0(r2)
     89c:	01400034 	movhi	r5,0
     8a0:	294d3a04 	addi	r5,r5,13544
     8a4:	00800044 	movi	r2,1
		alt_irq[id].context = context;

		rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
     8a8:	30000726 	beq	r6,zero,8c8 <alt_irq_register+0x5c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     8ac:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     8b0:	30c6703a 	and	r3,r6,r3
     8b4:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
     8b8:	28c00017 	ldw	r3,0(r5)
     8bc:	1104983a 	sll	r2,r2,r4
     8c0:	10c4b03a 	or	r2,r2,r3
     8c4:	00000706 	br	8e4 <alt_irq_register+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     8c8:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     8cc:	30c6703a 	and	r3,r6,r3
     8d0:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
     8d4:	1104983a 	sll	r2,r2,r4
     8d8:	28c00017 	ldw	r3,0(r5)
     8dc:	0084303a 	nor	r2,zero,r2
     8e0:	10c4703a 	and	r2,r2,r3
     8e4:	28800015 	stw	r2,0(r5)
  NIOS2_WRITE_IENABLE (alt_irq_active);
     8e8:	28800017 	ldw	r2,0(r5)
     8ec:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     8f0:	3001703a 	wrctl	status,r6
     8f4:	0005883a 	mov	r2,zero
     8f8:	f800283a 	ret
 * kernel has its scheduler started so that contexts are saved and switched
 * correctly.
 */
int alt_irq_register( alt_u32 id, void* context, void (*handler)(void*, alt_u32) )
{
	int rc = -EINVAL;
     8fc:	00bffa84 	movi	r2,-22

		/* alt_irq_enable_all(status); This line is removed to prevent the interrupt from being immediately enabled. */
	}

	return rc;
}
     900:	f800283a 	ret

00000904 <xPortStartScheduler>:
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Try to register the interrupt handler. */
	if ( -EINVAL == alt_irq_register( TIMER_0_IRQ, 0x0, vPortSysTickHandler ) )
     904:	01800034 	movhi	r6,0

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
     908:	deffff04 	addi	sp,sp,-4
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Try to register the interrupt handler. */
	if ( -EINVAL == alt_irq_register( TIMER_0_IRQ, 0x0, vPortSysTickHandler ) )
     90c:	01000044 	movi	r4,1
     910:	000b883a 	mov	r5,zero
     914:	3181ff04 	addi	r6,r6,2044

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
     918:	dfc00015 	stw	ra,0(sp)
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Try to register the interrupt handler. */
	if ( -EINVAL == alt_irq_register( TIMER_0_IRQ, 0x0, vPortSysTickHandler ) )
     91c:	000086c0 	call	86c <alt_irq_register>
     920:	00fffa84 	movi	r3,-22
     924:	10c0021e 	bne	r2,r3,930 <xPortStartScheduler+0x2c>
	{
		/* Failed to install the Interrupt Handler. */
		asm( "break" );
     928:	003da03a 	break	0
     92c:	00000a06 	br	958 <xPortStartScheduler+0x54>
	}
	else
	{
		/* Configure SysTick to interrupt at the requested rate. */
		IOWR_ALTERA_AVALON_TIMER_CONTROL( TIMER_0_BASE, ALTERA_AVALON_TIMER_CONTROL_STOP_MSK );
     930:	00ac0114 	movui	r2,45060
     934:	00c00204 	movi	r3,8
     938:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_PERIODL( TIMER_0_BASE, ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) & 0xFFFF );
     93c:	00ec0214 	movui	r3,45064
     940:	0130d414 	movui	r4,50000
     944:	19000035 	stwio	r4,0(r3)
		IOWR_ALTERA_AVALON_TIMER_PERIODH( TIMER_0_BASE, ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) >> 16 );
     948:	00ec0314 	movui	r3,45068
     94c:	18000035 	stwio	zero,0(r3)
		IOWR_ALTERA_AVALON_TIMER_CONTROL( TIMER_0_BASE, ALTERA_AVALON_TIMER_CONTROL_CONT_MSK | ALTERA_AVALON_TIMER_CONTROL_START_MSK | ALTERA_AVALON_TIMER_CONTROL_ITO_MSK );
     950:	00c001c4 	movi	r3,7
     954:	10c00035 	stwio	r3,0(r2)
	}

	/* Clear any already pending interrupts generated by the Timer. */
	IOWR_ALTERA_AVALON_TIMER_STATUS( TIMER_0_BASE, ~ALTERA_AVALON_TIMER_STATUS_TO_MSK );
     958:	00ac0014 	movui	r2,45056
     95c:	00ffff84 	movi	r3,-2
     960:	10c00035 	stwio	r3,0(r2)
     964:	00800034 	movhi	r2,0
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();

	/* Start the first task. */
    asm volatile (  " movia r2, restore_sp_from_pxCurrentTCB        \n"
     968:	10803104 	addi	r2,r2,196
     96c:	1000683a 	jmp	r2
                    " jmp r2                                          " );

	/* Should not get here! */
	return 0;
}
     970:	0005883a 	mov	r2,zero
     974:	dfc00017 	ldw	ra,0(sp)
     978:	dec00104 	addi	sp,sp,4
     97c:	f800283a 	ret

00000980 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     980:	defffd04 	addi	sp,sp,-12
     984:	dc000015 	stw	r16,0(sp)
     988:	dfc00215 	stw	ra,8(sp)
     98c:	dc400115 	stw	r17,4(sp)
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
     990:	208000cc 	andi	r2,r4,3
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     994:	2021883a 	mov	r16,r4
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
     998:	10000326 	beq	r2,zero,9a8 <pvPortMalloc+0x28>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
     99c:	013fff04 	movi	r4,-4
     9a0:	8120703a 	and	r16,r16,r4
     9a4:	84000104 	addi	r16,r16,4
		}
	#endif

	vTaskSuspendAll();
     9a8:	00015f40 	call	15f4 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     9ac:	d0a00f17 	ldw	r2,-32708(gp)
     9b0:	1000051e 	bne	r2,zero,9c8 <pvPortMalloc+0x48>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     9b4:	00c00034 	movhi	r3,0
     9b8:	00bfff04 	movi	r2,-4
     9bc:	18cd4004 	addi	r3,r3,13568
     9c0:	1884703a 	and	r2,r3,r2
     9c4:	d0a00f15 	stw	r2,-32708(gp)
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     9c8:	d0a01017 	ldw	r2,-32704(gp)
     9cc:	00ceaac4 	movi	r3,15019
     9d0:	80a1883a 	add	r16,r16,r2
     9d4:	1c000536 	bltu	r3,r16,9ec <pvPortMalloc+0x6c>
     9d8:	1400042e 	bgeu	r2,r16,9ec <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     9dc:	d4600f17 	ldw	r17,-32708(gp)
			xNextFreeByte += xWantedSize;
     9e0:	d4201015 	stw	r16,-32704(gp)
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     9e4:	88a3883a 	add	r17,r17,r2
     9e8:	00000106 	br	9f0 <pvPortMalloc+0x70>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
     9ec:	0023883a 	mov	r17,zero
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     9f0:	00022dc0 	call	22dc <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     9f4:	8805883a 	mov	r2,r17
     9f8:	dfc00217 	ldw	ra,8(sp)
     9fc:	dc400117 	ldw	r17,4(sp)
     a00:	dc000017 	ldw	r16,0(sp)
     a04:	dec00304 	addi	sp,sp,12
     a08:	f800283a 	ret

00000a0c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     a0c:	f800283a 	ret

00000a10 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
     a10:	d0201015 	stw	zero,-32704(gp)
     a14:	f800283a 	ret

00000a18 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
}
     a18:	d0a01017 	ldw	r2,-32704(gp)
     a1c:	00ceab04 	movi	r3,15020
     a20:	1885c83a 	sub	r2,r3,r2
     a24:	f800283a 	ret

00000a28 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
     a28:	defffd04 	addi	sp,sp,-12
     a2c:	dc400115 	stw	r17,4(sp)
     a30:	3023883a 	mov	r17,r6
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
     a34:	21801017 	ldw	r6,64(r4)

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
     a38:	dc000015 	stw	r16,0(sp)
     a3c:	dfc00215 	stw	ra,8(sp)
     a40:	2021883a 	mov	r16,r4
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
     a44:	3000061e 	bne	r6,zero,a60 <prvCopyDataToQueue+0x38>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     a48:	20800017 	ldw	r2,0(r4)
     a4c:	1000231e 	bne	r2,zero,adc <prvCopyDataToQueue+0xb4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
     a50:	21000117 	ldw	r4,4(r4)
     a54:	0001b840 	call	1b84 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
     a58:	80000115 	stw	zero,4(r16)
     a5c:	00002006 	br	ae0 <prvCopyDataToQueue+0xb8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
     a60:	88000b1e 	bne	r17,zero,a90 <prvCopyDataToQueue+0x68>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
     a64:	21000217 	ldw	r4,8(r4)
     a68:	0002c300 	call	2c30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     a6c:	80c00217 	ldw	r3,8(r16)
     a70:	80801017 	ldw	r2,64(r16)
     a74:	1885883a 	add	r2,r3,r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     a78:	80c00117 	ldw	r3,4(r16)
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     a7c:	80800215 	stw	r2,8(r16)
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     a80:	10c01636 	bltu	r2,r3,adc <prvCopyDataToQueue+0xb4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
     a84:	80800017 	ldw	r2,0(r16)
     a88:	80800215 	stw	r2,8(r16)
     a8c:	00001306 	br	adc <prvCopyDataToQueue+0xb4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     a90:	21000317 	ldw	r4,12(r4)
     a94:	0002c300 	call	2c30 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
     a98:	80801017 	ldw	r2,64(r16)
     a9c:	80c00317 	ldw	r3,12(r16)
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     aa0:	81000017 	ldw	r4,0(r16)
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
     aa4:	0085c83a 	sub	r2,zero,r2
     aa8:	1887883a 	add	r3,r3,r2
     aac:	80c00315 	stw	r3,12(r16)
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     ab0:	1900032e 	bgeu	r3,r4,ac0 <prvCopyDataToQueue+0x98>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
     ab4:	80c00117 	ldw	r3,4(r16)
     ab8:	1885883a 	add	r2,r3,r2
     abc:	80800315 	stw	r2,12(r16)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
     ac0:	00800084 	movi	r2,2
     ac4:	8880051e 	bne	r17,r2,adc <prvCopyDataToQueue+0xb4>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
     ac8:	80800e17 	ldw	r2,56(r16)
     acc:	10000326 	beq	r2,zero,adc <prvCopyDataToQueue+0xb4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
     ad0:	80800e17 	ldw	r2,56(r16)
     ad4:	10bfffc4 	addi	r2,r2,-1
     ad8:	80800e15 	stw	r2,56(r16)
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
     adc:	0005883a 	mov	r2,zero
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
     ae0:	80c00e17 	ldw	r3,56(r16)
     ae4:	18c00044 	addi	r3,r3,1
     ae8:	80c00e15 	stw	r3,56(r16)

	return xReturn;
}
     aec:	dfc00217 	ldw	ra,8(sp)
     af0:	dc400117 	ldw	r17,4(sp)
     af4:	dc000017 	ldw	r16,0(sp)
     af8:	dec00304 	addi	sp,sp,12
     afc:	f800283a 	ret

00000b00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
     b00:	2005883a 	mov	r2,r4
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
     b04:	11801017 	ldw	r6,64(r2)
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
     b08:	2809883a 	mov	r4,r5
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
     b0c:	30000926 	beq	r6,zero,b34 <prvCopyDataFromQueue+0x34>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
     b10:	10c00317 	ldw	r3,12(r2)
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
     b14:	11400117 	ldw	r5,4(r2)

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
     b18:	1987883a 	add	r3,r3,r6
     b1c:	10c00315 	stw	r3,12(r2)
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
     b20:	19400236 	bltu	r3,r5,b2c <prvCopyDataFromQueue+0x2c>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
     b24:	10c00017 	ldw	r3,0(r2)
     b28:	10c00315 	stw	r3,12(r2)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
     b2c:	11400317 	ldw	r5,12(r2)
     b30:	0002c301 	jmpi	2c30 <memcpy>
     b34:	f800283a 	ret

00000b38 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
     b38:	defffd04 	addi	sp,sp,-12
     b3c:	dc000015 	stw	r16,0(sp)
     b40:	2021883a 	mov	r16,r4
     b44:	dc400115 	stw	r17,4(sp)
     b48:	dfc00215 	stw	ra,8(sp)
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     b4c:	84400904 	addi	r17,r16,36

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
     b50:	0001c200 	call	1c20 <vTaskEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
     b54:	80801217 	ldw	r2,72(r16)
     b58:	00800a0e 	bge	zero,r2,b84 <prvUnlockQueue+0x4c>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     b5c:	80800917 	ldw	r2,36(r16)
     b60:	10000826 	beq	r2,zero,b84 <prvUnlockQueue+0x4c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     b64:	8809883a 	mov	r4,r17
     b68:	000191c0 	call	191c <xTaskRemoveFromEventList>
     b6c:	10000126 	beq	r2,zero,b74 <prvUnlockQueue+0x3c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
     b70:	0001a600 	call	1a60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
     b74:	80801217 	ldw	r2,72(r16)
     b78:	10bfffc4 	addi	r2,r2,-1
     b7c:	80801215 	stw	r2,72(r16)
     b80:	003ff406 	br	b54 <prvUnlockQueue+0x1c>
		}

		pxQueue->xTxLock = queueUNLOCKED;
     b84:	00bfffc4 	movi	r2,-1
     b88:	80801215 	stw	r2,72(r16)
	}
	taskEXIT_CRITICAL();
     b8c:	0001c500 	call	1c50 <vTaskExitCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     b90:	84400404 	addi	r17,r16,16
		pxQueue->xTxLock = queueUNLOCKED;
	}
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
     b94:	0001c200 	call	1c20 <vTaskEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
     b98:	80801117 	ldw	r2,68(r16)
     b9c:	00800a0e 	bge	zero,r2,bc8 <prvUnlockQueue+0x90>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     ba0:	80800417 	ldw	r2,16(r16)
     ba4:	10000826 	beq	r2,zero,bc8 <prvUnlockQueue+0x90>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     ba8:	8809883a 	mov	r4,r17
     bac:	000191c0 	call	191c <xTaskRemoveFromEventList>
     bb0:	10000126 	beq	r2,zero,bb8 <prvUnlockQueue+0x80>
				{
					vTaskMissedYield();
     bb4:	0001a600 	call	1a60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
     bb8:	80801117 	ldw	r2,68(r16)
     bbc:	10bfffc4 	addi	r2,r2,-1
     bc0:	80801115 	stw	r2,68(r16)
     bc4:	003ff406 	br	b98 <prvUnlockQueue+0x60>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
     bc8:	00bfffc4 	movi	r2,-1
     bcc:	80801115 	stw	r2,68(r16)
	}
	taskEXIT_CRITICAL();
}
     bd0:	dfc00217 	ldw	ra,8(sp)
     bd4:	dc400117 	ldw	r17,4(sp)
     bd8:	dc000017 	ldw	r16,0(sp)
     bdc:	dec00304 	addi	sp,sp,12
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
	}
	taskEXIT_CRITICAL();
     be0:	0001c501 	jmpi	1c50 <vTaskExitCritical>

00000be4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
     be4:	defffb04 	addi	sp,sp,-20
     be8:	dc000015 	stw	r16,0(sp)
     bec:	2021883a 	mov	r16,r4
     bf0:	dfc00415 	stw	ra,16(sp)
     bf4:	dcc00315 	stw	r19,12(sp)
     bf8:	dc800215 	stw	r18,8(sp)
     bfc:	dc400115 	stw	r17,4(sp)
     c00:	2827883a 	mov	r19,r5
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
     c04:	0001c200 	call	1c20 <vTaskEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     c08:	84801017 	ldw	r18,64(r16)
     c0c:	81400f17 	ldw	r5,60(r16)
     c10:	84400017 	ldw	r17,0(r16)
     c14:	9009883a 	mov	r4,r18
     c18:	0002c080 	call	2c08 <__mulsi3>
     c1c:	8887883a 	add	r3,r17,r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
     c20:	1485c83a 	sub	r2,r2,r18
     c24:	8885883a 	add	r2,r17,r2
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
     c28:	80000e15 	stw	zero,56(r16)
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
     c2c:	80800315 	stw	r2,12(r16)
		pxQueue->xRxLock = queueUNLOCKED;
     c30:	00bfffc4 	movi	r2,-1
     c34:	80801115 	stw	r2,68(r16)

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     c38:	80c00115 	stw	r3,4(r16)
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
     c3c:	84400215 	stw	r17,8(r16)
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
		pxQueue->xTxLock = queueUNLOCKED;
     c40:	80801215 	stw	r2,72(r16)

		if( xNewQueue == pdFALSE )
     c44:	9800081e 	bne	r19,zero,c68 <xQueueGenericReset+0x84>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     c48:	80800417 	ldw	r2,16(r16)
     c4c:	10000a26 	beq	r2,zero,c78 <xQueueGenericReset+0x94>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
     c50:	81000404 	addi	r4,r16,16
     c54:	000191c0 	call	191c <xTaskRemoveFromEventList>
     c58:	00c00044 	movi	r3,1
     c5c:	10c0061e 	bne	r2,r3,c78 <xQueueGenericReset+0x94>
				{
					queueYIELD_IF_USING_PREEMPTION();
     c60:	003b683a 	trap	0
     c64:	00000406 	br	c78 <xQueueGenericReset+0x94>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
     c68:	81000404 	addi	r4,r16,16
     c6c:	00005a40 	call	5a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
     c70:	81000904 	addi	r4,r16,36
     c74:	00005a40 	call	5a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
     c78:	0001c500 	call	1c50 <vTaskExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
     c7c:	00800044 	movi	r2,1
     c80:	dfc00417 	ldw	ra,16(sp)
     c84:	dcc00317 	ldw	r19,12(sp)
     c88:	dc800217 	ldw	r18,8(sp)
     c8c:	dc400117 	ldw	r17,4(sp)
     c90:	dc000017 	ldw	r16,0(sp)
     c94:	dec00504 	addi	sp,sp,20
     c98:	f800283a 	ret

00000c9c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
     c9c:	defffc04 	addi	sp,sp,-16
     ca0:	dc800215 	stw	r18,8(sp)
     ca4:	dc400115 	stw	r17,4(sp)
     ca8:	dfc00315 	stw	ra,12(sp)
     cac:	dc000015 	stw	r16,0(sp)
     cb0:	2025883a 	mov	r18,r4
     cb4:	2823883a 	mov	r17,r5
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

	if( uxItemSize == ( UBaseType_t ) 0 )
     cb8:	28000526 	beq	r5,zero,cd0 <xQueueGenericCreate+0x34>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     cbc:	2809883a 	mov	r4,r5
     cc0:	900b883a 	mov	r5,r18
     cc4:	0002c080 	call	2c08 <__mulsi3>
     cc8:	10800044 	addi	r2,r2,1
     ccc:	00000106 	br	cd4 <xQueueGenericCreate+0x38>
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

	if( uxItemSize == ( UBaseType_t ) 0 )
	{
		/* There is not going to be a queue storage area. */
		xQueueSizeInBytes = ( size_t ) 0;
     cd0:	0005883a 	mov	r2,zero
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
     cd4:	11001304 	addi	r4,r2,76
     cd8:	00009800 	call	980 <pvPortMalloc>
     cdc:	1021883a 	mov	r16,r2

	if( pxNewQueue != NULL )
     ce0:	10000a26 	beq	r2,zero,d0c <xQueueGenericCreate+0x70>
	{
		if( uxItemSize == ( UBaseType_t ) 0 )
     ce4:	8800021e 	bne	r17,zero,cf0 <xQueueGenericCreate+0x54>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
     ce8:	80800015 	stw	r2,0(r16)
     cec:	00000206 	br	cf8 <xQueueGenericCreate+0x5c>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
     cf0:	10801304 	addi	r2,r2,76
     cf4:	80800015 	stw	r2,0(r16)
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
     cf8:	84800f15 	stw	r18,60(r16)
		pxNewQueue->uxItemSize = uxItemSize;
     cfc:	84401015 	stw	r17,64(r16)
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
     d00:	8009883a 	mov	r4,r16
     d04:	01400044 	movi	r5,1
     d08:	0000be40 	call	be4 <xQueueGenericReset>
	}

	configASSERT( xReturn );

	return xReturn;
}
     d0c:	8005883a 	mov	r2,r16
     d10:	dfc00317 	ldw	ra,12(sp)
     d14:	dc800217 	ldw	r18,8(sp)
     d18:	dc400117 	ldw	r17,4(sp)
     d1c:	dc000017 	ldw	r16,0(sp)
     d20:	dec00404 	addi	sp,sp,16
     d24:	f800283a 	ret

00000d28 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if ( configUSE_COUNTING_SEMAPHORES == 1 )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
     d28:	defffe04 	addi	sp,sp,-8
     d2c:	dc000015 	stw	r16,0(sp)
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
     d30:	01800084 	movi	r6,2
/*-----------------------------------------------------------*/

#if ( configUSE_COUNTING_SEMAPHORES == 1 )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
     d34:	2821883a 	mov	r16,r5
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
     d38:	000b883a 	mov	r5,zero
/*-----------------------------------------------------------*/

#if ( configUSE_COUNTING_SEMAPHORES == 1 )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
     d3c:	dfc00115 	stw	ra,4(sp)
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
     d40:	0000c9c0 	call	c9c <xQueueGenericCreate>

		if( xHandle != NULL )
     d44:	10000126 	beq	r2,zero,d4c <xQueueCreateCountingSemaphore+0x24>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
     d48:	14000e15 	stw	r16,56(r2)
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( xHandle );
		return xHandle;
	}
     d4c:	dfc00117 	ldw	ra,4(sp)
     d50:	dc000017 	ldw	r16,0(sp)
     d54:	dec00204 	addi	sp,sp,8
     d58:	f800283a 	ret

00000d5c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
     d5c:	defff404 	addi	sp,sp,-48
     d60:	dd800915 	stw	r22,36(sp)
     d64:	dd400815 	stw	r21,32(sp)
     d68:	dd000715 	stw	r20,28(sp)
     d6c:	dcc00615 	stw	r19,24(sp)
     d70:	dc800515 	stw	r18,20(sp)
     d74:	dc400415 	stw	r17,16(sp)
     d78:	dc000315 	stw	r16,12(sp)
     d7c:	dfc00b15 	stw	ra,44(sp)
     d80:	ddc00a15 	stw	r23,40(sp)
     d84:	2021883a 	mov	r16,r4
     d88:	2829883a 	mov	r20,r5
     d8c:	d9800215 	stw	r6,8(sp)
     d90:	3823883a 	mov	r17,r7
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
     d94:	0027883a 	mov	r19,zero
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     d98:	05400084 	movi	r21,2

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
     d9c:	04bfffc4 	movi	r18,-1
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
     da0:	25800404 	addi	r22,r4,16
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
     da4:	0001c200 	call	1c20 <vTaskEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     da8:	80c00e17 	ldw	r3,56(r16)
     dac:	80800f17 	ldw	r2,60(r16)
     db0:	18800136 	bltu	r3,r2,db8 <xQueueGenericSend+0x5c>
     db4:	8d40101e 	bne	r17,r21,df8 <xQueueGenericSend+0x9c>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     db8:	8009883a 	mov	r4,r16
     dbc:	a00b883a 	mov	r5,r20
     dc0:	880d883a 	mov	r6,r17
     dc4:	0000a280 	call	a28 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     dc8:	80c00917 	ldw	r3,36(r16)
     dcc:	18000526 	beq	r3,zero,de4 <xQueueGenericSend+0x88>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
     dd0:	81000904 	addi	r4,r16,36
     dd4:	000191c0 	call	191c <xTaskRemoveFromEventList>
     dd8:	00c00044 	movi	r3,1
     ddc:	10c0031e 	bne	r2,r3,dec <xQueueGenericSend+0x90>
     de0:	00000106 	br	de8 <xQueueGenericSend+0x8c>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
     de4:	10000126 	beq	r2,zero,dec <xQueueGenericSend+0x90>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
     de8:	003b683a 	trap	0
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
     dec:	0001c500 	call	1c50 <vTaskExitCritical>
				return pdPASS;
     df0:	00800044 	movi	r2,1
     df4:	00002d06 	br	eac <xQueueGenericSend+0x150>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
     df8:	d8800217 	ldw	r2,8(sp)
     dfc:	1000021e 	bne	r2,zero,e08 <xQueueGenericSend+0xac>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
     e00:	0001c500 	call	1c50 <vTaskExitCritical>
     e04:	00002806 	br	ea8 <xQueueGenericSend+0x14c>
					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
				}
				else if( xEntryTimeSet == pdFALSE )
     e08:	9800021e 	bne	r19,zero,e14 <xQueueGenericSend+0xb8>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
     e0c:	d809883a 	mov	r4,sp
     e10:	0001a4c0 	call	1a4c <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
     e14:	0001c500 	call	1c50 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
     e18:	00015f40 	call	15f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
     e1c:	0001c200 	call	1c20 <vTaskEnterCritical>
     e20:	80801117 	ldw	r2,68(r16)
     e24:	1480011e 	bne	r2,r18,e2c <xQueueGenericSend+0xd0>
     e28:	80001115 	stw	zero,68(r16)
     e2c:	80801217 	ldw	r2,72(r16)
     e30:	1480011e 	bne	r2,r18,e38 <xQueueGenericSend+0xdc>
     e34:	80001215 	stw	zero,72(r16)
     e38:	0001c500 	call	1c50 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     e3c:	d809883a 	mov	r4,sp
     e40:	d9400204 	addi	r5,sp,8
     e44:	000255c0 	call	255c <xTaskCheckForTimeOut>
     e48:	1000141e 	bne	r2,zero,e9c <xQueueGenericSend+0x140>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
     e4c:	0001c200 	call	1c20 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
     e50:	85c00e17 	ldw	r23,56(r16)
     e54:	84c00f17 	ldw	r19,60(r16)
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
     e58:	0001c500 	call	1c50 <vTaskExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
     e5c:	bcc00b1e 	bne	r23,r19,e8c <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
     e60:	d9400217 	ldw	r5,8(sp)
     e64:	b009883a 	mov	r4,r22
     e68:	00018400 	call	1840 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
     e6c:	8009883a 	mov	r4,r16
     e70:	0000b380 	call	b38 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
     e74:	00022dc0 	call	22dc <xTaskResumeAll>
     e78:	10000226 	beq	r2,zero,e84 <xQueueGenericSend+0x128>
     e7c:	04c00044 	movi	r19,1
     e80:	003fc806 	br	da4 <xQueueGenericSend+0x48>
				{
					portYIELD_WITHIN_API();
     e84:	003b683a 	trap	0
     e88:	003ffc06 	br	e7c <xQueueGenericSend+0x120>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
     e8c:	8009883a 	mov	r4,r16
     e90:	0000b380 	call	b38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
     e94:	00022dc0 	call	22dc <xTaskResumeAll>
     e98:	003ff806 	br	e7c <xQueueGenericSend+0x120>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
     e9c:	8009883a 	mov	r4,r16
     ea0:	0000b380 	call	b38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
     ea4:	00022dc0 	call	22dc <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
     ea8:	0005883a 	mov	r2,zero
		}
	}
}
     eac:	dfc00b17 	ldw	ra,44(sp)
     eb0:	ddc00a17 	ldw	r23,40(sp)
     eb4:	dd800917 	ldw	r22,36(sp)
     eb8:	dd400817 	ldw	r21,32(sp)
     ebc:	dd000717 	ldw	r20,28(sp)
     ec0:	dcc00617 	ldw	r19,24(sp)
     ec4:	dc800517 	ldw	r18,20(sp)
     ec8:	dc400417 	ldw	r17,16(sp)
     ecc:	dc000317 	ldw	r16,12(sp)
     ed0:	dec00c04 	addi	sp,sp,48
     ed4:	f800283a 	ret

00000ed8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
     ed8:	defffe04 	addi	sp,sp,-8
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
     edc:	01001304 	movi	r4,76
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
     ee0:	dc000015 	stw	r16,0(sp)
     ee4:	dfc00115 	stw	ra,4(sp)
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
     ee8:	00009800 	call	980 <pvPortMalloc>
     eec:	1021883a 	mov	r16,r2
		if( pxNewQueue != NULL )
     ef0:	10001426 	beq	r2,zero,f44 <xQueueCreateMutex+0x6c>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
     ef4:	10000115 	stw	zero,4(r2)
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
     ef8:	10000015 	stw	zero,0(r2)

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
     efc:	10000215 	stw	zero,8(r2)
			pxNewQueue->u.pcReadFrom = NULL;
     f00:	10000315 	stw	zero,12(r2)

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
     f04:	10000e15 	stw	zero,56(r2)
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
     f08:	00800044 	movi	r2,1
     f0c:	80800f15 	stw	r2,60(r16)
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
			pxNewQueue->xRxLock = queueUNLOCKED;
     f10:	00bfffc4 	movi	r2,-1
     f14:	80801115 	stw	r2,68(r16)
			pxNewQueue->xTxLock = queueUNLOCKED;
     f18:	80801215 	stw	r2,72(r16)
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
     f1c:	81000404 	addi	r4,r16,16
			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
     f20:	80001015 	stw	zero,64(r16)
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
     f24:	00005a40 	call	5a4 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
     f28:	81000904 	addi	r4,r16,36
     f2c:	00005a40 	call	5a4 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
     f30:	8009883a 	mov	r4,r16
     f34:	000b883a 	mov	r5,zero
     f38:	000d883a 	mov	r6,zero
     f3c:	000f883a 	mov	r7,zero
     f40:	0000d5c0 	call	d5c <xQueueGenericSend>
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
	}
     f44:	8005883a 	mov	r2,r16
     f48:	dfc00117 	ldw	ra,4(sp)
     f4c:	dc000017 	ldw	r16,0(sp)
     f50:	dec00204 	addi	sp,sp,8
     f54:	f800283a 	ret

00000f58 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
     f58:	defffd04 	addi	sp,sp,-12
     f5c:	dc000115 	stw	r16,4(sp)
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
     f60:	24000117 	ldw	r16,4(r4)
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
     f64:	dfc00215 	stw	ra,8(sp)
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
     f68:	d9000015 	stw	r4,0(sp)
     f6c:	0001aa00 	call	1aa0 <xTaskGetCurrentTaskHandle>
     f70:	d9000017 	ldw	r4,0(sp)
     f74:	8080091e 	bne	r16,r2,f9c <xQueueGiveMutexRecursive+0x44>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
     f78:	20800317 	ldw	r2,12(r4)
     f7c:	10bfffc4 	addi	r2,r2,-1
     f80:	20800315 	stw	r2,12(r4)

			/* Have we unwound the call count? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
     f84:	1000071e 	bne	r2,zero,fa4 <xQueueGiveMutexRecursive+0x4c>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
     f88:	000b883a 	mov	r5,zero
     f8c:	000d883a 	mov	r6,zero
     f90:	000f883a 	mov	r7,zero
     f94:	0000d5c0 	call	d5c <xQueueGenericSend>
     f98:	00000206 	br	fa4 <xQueueGiveMutexRecursive+0x4c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
     f9c:	0005883a 	mov	r2,zero
     fa0:	00000106 	br	fa8 <xQueueGiveMutexRecursive+0x50>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
     fa4:	00800044 	movi	r2,1

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
	}
     fa8:	dfc00217 	ldw	ra,8(sp)
     fac:	dc000117 	ldw	r16,4(sp)
     fb0:	dec00304 	addi	sp,sp,12
     fb4:	f800283a 	ret

00000fb8 <xQueueGenericSendFromISR>:
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     fb8:	20c00e17 	ldw	r3,56(r4)
     fbc:	20800f17 	ldw	r2,60(r4)

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
     fc0:	defffd04 	addi	sp,sp,-12
     fc4:	dfc00215 	stw	ra,8(sp)
     fc8:	dc400115 	stw	r17,4(sp)
     fcc:	dc000015 	stw	r16,0(sp)
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     fd0:	18800236 	bltu	r3,r2,fdc <xQueueGenericSendFromISR+0x24>
     fd4:	00800084 	movi	r2,2
     fd8:	3880151e 	bne	r7,r2,1030 <xQueueGenericSendFromISR+0x78>
     fdc:	3023883a 	mov	r17,r6
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     fe0:	380d883a 	mov	r6,r7
     fe4:	2021883a 	mov	r16,r4
     fe8:	0000a280 	call	a28 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
     fec:	80c01217 	ldw	r3,72(r16)
     ff0:	00bfffc4 	movi	r2,-1
     ff4:	1880091e 	bne	r3,r2,101c <xQueueGenericSendFromISR+0x64>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     ff8:	80800917 	ldw	r2,36(r16)
     ffc:	10000a26 	beq	r2,zero,1028 <xQueueGenericSendFromISR+0x70>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1000:	81000904 	addi	r4,r16,36
    1004:	000191c0 	call	191c <xTaskRemoveFromEventList>
    1008:	10000726 	beq	r2,zero,1028 <xQueueGenericSendFromISR+0x70>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    100c:	88000626 	beq	r17,zero,1028 <xQueueGenericSendFromISR+0x70>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    1010:	00800044 	movi	r2,1
    1014:	88800015 	stw	r2,0(r17)
    1018:	00000606 	br	1034 <xQueueGenericSendFromISR+0x7c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    101c:	80801217 	ldw	r2,72(r16)
    1020:	10800044 	addi	r2,r2,1
    1024:	80801215 	stw	r2,72(r16)
			}

			xReturn = pdPASS;
    1028:	00800044 	movi	r2,1
    102c:	00000106 	br	1034 <xQueueGenericSendFromISR+0x7c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    1030:	0005883a 	mov	r2,zero
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1034:	dfc00217 	ldw	ra,8(sp)
    1038:	dc400117 	ldw	r17,4(sp)
    103c:	dc000017 	ldw	r16,0(sp)
    1040:	dec00304 	addi	sp,sp,12
    1044:	f800283a 	ret

00001048 <xQueueGiveFromISR>:
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    1048:	20c00e17 	ldw	r3,56(r4)
    104c:	20800f17 	ldw	r2,60(r4)
    1050:	1880192e 	bgeu	r3,r2,10b8 <xQueueGiveFromISR+0x70>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			++( pxQueue->uxMessagesWaiting );
    1054:	20800e17 	ldw	r2,56(r4)
    1058:	10800044 	addi	r2,r2,1
    105c:	20800e15 	stw	r2,56(r4)

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    1060:	20c01217 	ldw	r3,72(r4)
    1064:	00bfffc4 	movi	r2,-1
    1068:	18800f1e 	bne	r3,r2,10a8 <xQueueGiveFromISR+0x60>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    106c:	20800917 	ldw	r2,36(r4)
    1070:	10001726 	beq	r2,zero,10d0 <xQueueGiveFromISR+0x88>
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    1074:	defffe04 	addi	sp,sp,-8
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1078:	21000904 	addi	r4,r4,36
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    107c:	dc000015 	stw	r16,0(sp)
    1080:	dfc00115 	stw	ra,4(sp)
    1084:	2821883a 	mov	r16,r5
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1088:	000191c0 	call	191c <xTaskRemoveFromEventList>
    108c:	1000021e 	bne	r2,zero,1098 <xQueueGiveFromISR+0x50>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    1090:	00800044 	movi	r2,1
    1094:	00000a06 	br	10c0 <xQueueGiveFromISR+0x78>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    1098:	803ffd26 	beq	r16,zero,1090 <xQueueGiveFromISR+0x48>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    109c:	00800044 	movi	r2,1
    10a0:	80800015 	stw	r2,0(r16)
    10a4:	00000606 	br	10c0 <xQueueGiveFromISR+0x78>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    10a8:	20801217 	ldw	r2,72(r4)
    10ac:	10800044 	addi	r2,r2,1
    10b0:	20801215 	stw	r2,72(r4)
    10b4:	00000606 	br	10d0 <xQueueGiveFromISR+0x88>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    10b8:	0005883a 	mov	r2,zero
    10bc:	f800283a 	ret
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    10c0:	dfc00117 	ldw	ra,4(sp)
    10c4:	dc000017 	ldw	r16,0(sp)
    10c8:	dec00204 	addi	sp,sp,8
    10cc:	f800283a 	ret
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    10d0:	00800044 	movi	r2,1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    10d4:	f800283a 	ret

000010d8 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    10d8:	defff604 	addi	sp,sp,-40
    10dc:	dd400815 	stw	r21,32(sp)
    10e0:	dd000715 	stw	r20,28(sp)
    10e4:	dcc00615 	stw	r19,24(sp)
    10e8:	dc800515 	stw	r18,20(sp)
    10ec:	dc400415 	stw	r17,16(sp)
    10f0:	dc000315 	stw	r16,12(sp)
    10f4:	dfc00915 	stw	ra,36(sp)
    10f8:	2021883a 	mov	r16,r4
    10fc:	2827883a 	mov	r19,r5
    1100:	d9800215 	stw	r6,8(sp)
    1104:	3829883a 	mov	r20,r7
BaseType_t xEntryTimeSet = pdFALSE;
    1108:	0025883a 	mov	r18,zero

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
    110c:	047fffc4 	movi	r17,-1
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1110:	25400904 	addi	r21,r4,36
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1114:	0001c200 	call	1c20 <vTaskEnterCritical>
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    1118:	80800e17 	ldw	r2,56(r16)
    111c:	10001d26 	beq	r2,zero,1194 <xQueueGenericReceive+0xbc>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    1120:	8009883a 	mov	r4,r16
    1124:	980b883a 	mov	r5,r19
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    1128:	84400317 	ldw	r17,12(r16)

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    112c:	0000b000 	call	b00 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    1130:	a0000e1e 	bne	r20,zero,116c <xQueueGenericReceive+0x94>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
    1134:	80800e17 	ldw	r2,56(r16)
    1138:	10bfffc4 	addi	r2,r2,-1
    113c:	80800e15 	stw	r2,56(r16)

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1140:	80800017 	ldw	r2,0(r16)
    1144:	1000021e 	bne	r2,zero,1150 <xQueueGenericReceive+0x78>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    1148:	00026000 	call	2600 <pvTaskIncrementMutexHeldCount>
    114c:	80800115 	stw	r2,4(r16)
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1150:	80800417 	ldw	r2,16(r16)
    1154:	10000c26 	beq	r2,zero,1188 <xQueueGenericReceive+0xb0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1158:	81000404 	addi	r4,r16,16
    115c:	000191c0 	call	191c <xTaskRemoveFromEventList>
    1160:	00c00044 	movi	r3,1
    1164:	10c0081e 	bne	r2,r3,1188 <xQueueGenericReceive+0xb0>
    1168:	00000606 	br	1184 <xQueueGenericReceive+0xac>
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    116c:	80800917 	ldw	r2,36(r16)
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    1170:	84400315 	stw	r17,12(r16)

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1174:	10000426 	beq	r2,zero,1188 <xQueueGenericReceive+0xb0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1178:	81000904 	addi	r4,r16,36
    117c:	000191c0 	call	191c <xTaskRemoveFromEventList>
    1180:	10000126 	beq	r2,zero,1188 <xQueueGenericReceive+0xb0>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    1184:	003b683a 	trap	0
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    1188:	0001c500 	call	1c50 <vTaskExitCritical>
				return pdPASS;
    118c:	00800044 	movi	r2,1
    1190:	00003206 	br	125c <xQueueGenericReceive+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1194:	d8800217 	ldw	r2,8(sp)
    1198:	1000021e 	bne	r2,zero,11a4 <xQueueGenericReceive+0xcc>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    119c:	0001c500 	call	1c50 <vTaskExitCritical>
    11a0:	00002d06 	br	1258 <xQueueGenericReceive+0x180>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
    11a4:	9000021e 	bne	r18,zero,11b0 <xQueueGenericReceive+0xd8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    11a8:	d809883a 	mov	r4,sp
    11ac:	0001a4c0 	call	1a4c <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    11b0:	0001c500 	call	1c50 <vTaskExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    11b4:	00015f40 	call	15f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    11b8:	0001c200 	call	1c20 <vTaskEnterCritical>
    11bc:	80801117 	ldw	r2,68(r16)
    11c0:	1440011e 	bne	r2,r17,11c8 <xQueueGenericReceive+0xf0>
    11c4:	80001115 	stw	zero,68(r16)
    11c8:	80801217 	ldw	r2,72(r16)
    11cc:	1440011e 	bne	r2,r17,11d4 <xQueueGenericReceive+0xfc>
    11d0:	80001215 	stw	zero,72(r16)
    11d4:	0001c500 	call	1c50 <vTaskExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    11d8:	d809883a 	mov	r4,sp
    11dc:	d9400204 	addi	r5,sp,8
    11e0:	000255c0 	call	255c <xTaskCheckForTimeOut>
    11e4:	1000191e 	bne	r2,zero,124c <xQueueGenericReceive+0x174>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    11e8:	0001c200 	call	1c20 <vTaskEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    11ec:	84800e17 	ldw	r18,56(r16)
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    11f0:	0001c500 	call	1c50 <vTaskExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    11f4:	9000111e 	bne	r18,zero,123c <xQueueGenericReceive+0x164>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    11f8:	80800017 	ldw	r2,0(r16)
    11fc:	1000041e 	bne	r2,zero,1210 <xQueueGenericReceive+0x138>
					{
						taskENTER_CRITICAL();
    1200:	0001c200 	call	1c20 <vTaskEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    1204:	81000117 	ldw	r4,4(r16)
    1208:	0001aa80 	call	1aa8 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    120c:	0001c500 	call	1c50 <vTaskExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1210:	d9400217 	ldw	r5,8(sp)
    1214:	a809883a 	mov	r4,r21
    1218:	00018400 	call	1840 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    121c:	8009883a 	mov	r4,r16
    1220:	0000b380 	call	b38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1224:	00022dc0 	call	22dc <xTaskResumeAll>
    1228:	10000226 	beq	r2,zero,1234 <xQueueGenericReceive+0x15c>
    122c:	04800044 	movi	r18,1
    1230:	003fb806 	br	1114 <xQueueGenericReceive+0x3c>
				{
					portYIELD_WITHIN_API();
    1234:	003b683a 	trap	0
    1238:	003ffc06 	br	122c <xQueueGenericReceive+0x154>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    123c:	8009883a 	mov	r4,r16
    1240:	0000b380 	call	b38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1244:	00022dc0 	call	22dc <xTaskResumeAll>
    1248:	003ff806 	br	122c <xQueueGenericReceive+0x154>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    124c:	8009883a 	mov	r4,r16
    1250:	0000b380 	call	b38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1254:	00022dc0 	call	22dc <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    1258:	0005883a 	mov	r2,zero
		}
	}
}
    125c:	dfc00917 	ldw	ra,36(sp)
    1260:	dd400817 	ldw	r21,32(sp)
    1264:	dd000717 	ldw	r20,28(sp)
    1268:	dcc00617 	ldw	r19,24(sp)
    126c:	dc800517 	ldw	r18,20(sp)
    1270:	dc400417 	ldw	r17,16(sp)
    1274:	dc000317 	ldw	r16,12(sp)
    1278:	dec00a04 	addi	sp,sp,40
    127c:	f800283a 	ret

00001280 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
    1280:	defffb04 	addi	sp,sp,-20
    1284:	dcc00315 	stw	r19,12(sp)
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    1288:	24c00117 	ldw	r19,4(r4)
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
    128c:	dc800215 	stw	r18,8(sp)
    1290:	dc400115 	stw	r17,4(sp)
    1294:	dc000015 	stw	r16,0(sp)
    1298:	dfc00415 	stw	ra,16(sp)
    129c:	2021883a 	mov	r16,r4
    12a0:	2825883a 	mov	r18,r5
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    12a4:	0001aa00 	call	1aa0 <xTaskGetCurrentTaskHandle>
    12a8:	04400044 	movi	r17,1
    12ac:	9880051e 	bne	r19,r2,12c4 <xQueueTakeMutexRecursive+0x44>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
    12b0:	80800317 	ldw	r2,12(r16)
    12b4:	1445883a 	add	r2,r2,r17
    12b8:	80800315 	stw	r2,12(r16)
			xReturn = pdPASS;
    12bc:	8805883a 	mov	r2,r17
    12c0:	00000906 	br	12e8 <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
    12c4:	8009883a 	mov	r4,r16
    12c8:	000b883a 	mov	r5,zero
    12cc:	900d883a 	mov	r6,r18
    12d0:	000f883a 	mov	r7,zero
    12d4:	00010d80 	call	10d8 <xQueueGenericReceive>

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn == pdPASS )
    12d8:	1440031e 	bne	r2,r17,12e8 <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
    12dc:	80c00317 	ldw	r3,12(r16)
    12e0:	18c00044 	addi	r3,r3,1
    12e4:	80c00315 	stw	r3,12(r16)
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
	}
    12e8:	dfc00417 	ldw	ra,16(sp)
    12ec:	dcc00317 	ldw	r19,12(sp)
    12f0:	dc800217 	ldw	r18,8(sp)
    12f4:	dc400117 	ldw	r17,4(sp)
    12f8:	dc000017 	ldw	r16,0(sp)
    12fc:	dec00504 	addi	sp,sp,20
    1300:	f800283a 	ret

00001304 <xQueueReceiveFromISR>:
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    1304:	20800e17 	ldw	r2,56(r4)
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    1308:	defffd04 	addi	sp,sp,-12
    130c:	dc000015 	stw	r16,0(sp)
    1310:	dfc00215 	stw	ra,8(sp)
    1314:	dc400115 	stw	r17,4(sp)
    1318:	2021883a 	mov	r16,r4
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    131c:	10001626 	beq	r2,zero,1378 <xQueueReceiveFromISR+0x74>
    1320:	3023883a 	mov	r17,r6
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    1324:	0000b000 	call	b00 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    1328:	80800e17 	ldw	r2,56(r16)
    132c:	10bfffc4 	addi	r2,r2,-1
    1330:	80800e15 	stw	r2,56(r16)

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    1334:	80c01117 	ldw	r3,68(r16)
    1338:	00bfffc4 	movi	r2,-1
    133c:	1880091e 	bne	r3,r2,1364 <xQueueReceiveFromISR+0x60>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1340:	80800417 	ldw	r2,16(r16)
    1344:	10000a26 	beq	r2,zero,1370 <xQueueReceiveFromISR+0x6c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1348:	81000404 	addi	r4,r16,16
    134c:	000191c0 	call	191c <xTaskRemoveFromEventList>
    1350:	10000726 	beq	r2,zero,1370 <xQueueReceiveFromISR+0x6c>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    1354:	88000626 	beq	r17,zero,1370 <xQueueReceiveFromISR+0x6c>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    1358:	00800044 	movi	r2,1
    135c:	88800015 	stw	r2,0(r17)
    1360:	00000606 	br	137c <xQueueReceiveFromISR+0x78>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    1364:	80801117 	ldw	r2,68(r16)
    1368:	10800044 	addi	r2,r2,1
    136c:	80801115 	stw	r2,68(r16)
			}

			xReturn = pdPASS;
    1370:	00800044 	movi	r2,1
    1374:	00000106 	br	137c <xQueueReceiveFromISR+0x78>
		}
		else
		{
			xReturn = pdFAIL;
    1378:	0005883a 	mov	r2,zero
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    137c:	dfc00217 	ldw	ra,8(sp)
    1380:	dc400117 	ldw	r17,4(sp)
    1384:	dc000017 	ldw	r16,0(sp)
    1388:	dec00304 	addi	sp,sp,12
    138c:	f800283a 	ret

00001390 <xQueuePeekFromISR>:
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    1390:	20800e17 	ldw	r2,56(r4)
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    1394:	defffd04 	addi	sp,sp,-12
    1398:	dc000015 	stw	r16,0(sp)
    139c:	dfc00215 	stw	ra,8(sp)
    13a0:	dc400115 	stw	r17,4(sp)
    13a4:	2021883a 	mov	r16,r4
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    13a8:	10000526 	beq	r2,zero,13c0 <xQueuePeekFromISR+0x30>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    13ac:	24400317 	ldw	r17,12(r4)
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    13b0:	0000b000 	call	b00 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;

			xReturn = pdPASS;
    13b4:	00800044 	movi	r2,1

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
			prvCopyDataFromQueue( pxQueue, pvBuffer );
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    13b8:	84400315 	stw	r17,12(r16)
    13bc:	00000106 	br	13c4 <xQueuePeekFromISR+0x34>

			xReturn = pdPASS;
		}
		else
		{
			xReturn = pdFAIL;
    13c0:	0005883a 	mov	r2,zero
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    13c4:	dfc00217 	ldw	ra,8(sp)
    13c8:	dc400117 	ldw	r17,4(sp)
    13cc:	dc000017 	ldw	r16,0(sp)
    13d0:	dec00304 	addi	sp,sp,12
    13d4:	f800283a 	ret

000013d8 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
    13d8:	defffe04 	addi	sp,sp,-8
    13dc:	dc000015 	stw	r16,0(sp)
    13e0:	2021883a 	mov	r16,r4
    13e4:	dfc00115 	stw	ra,4(sp)
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    13e8:	0001c200 	call	1c20 <vTaskEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    13ec:	84000e17 	ldw	r16,56(r16)
	}
	taskEXIT_CRITICAL();
    13f0:	0001c500 	call	1c50 <vTaskExitCritical>

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    13f4:	8005883a 	mov	r2,r16
    13f8:	dfc00117 	ldw	ra,4(sp)
    13fc:	dc000017 	ldw	r16,0(sp)
    1400:	dec00204 	addi	sp,sp,8
    1404:	f800283a 	ret

00001408 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
    1408:	defffd04 	addi	sp,sp,-12
    140c:	dfc00215 	stw	ra,8(sp)
    1410:	dc400115 	stw	r17,4(sp)
    1414:	dc000015 	stw	r16,0(sp)
    1418:	2023883a 	mov	r17,r4
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    141c:	0001c200 	call	1c20 <vTaskEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    1420:	88800f17 	ldw	r2,60(r17)
    1424:	8c000e17 	ldw	r16,56(r17)
    1428:	1421c83a 	sub	r16,r2,r16
	}
	taskEXIT_CRITICAL();
    142c:	0001c500 	call	1c50 <vTaskExitCritical>

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    1430:	8005883a 	mov	r2,r16
    1434:	dfc00217 	ldw	ra,8(sp)
    1438:	dc400117 	ldw	r17,4(sp)
    143c:	dc000017 	ldw	r16,0(sp)
    1440:	dec00304 	addi	sp,sp,12
    1444:	f800283a 	ret

00001448 <uxQueueMessagesWaitingFromISR>:
{
UBaseType_t uxReturn;

	configASSERT( xQueue );

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    1448:	20800e17 	ldw	r2,56(r4)

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    144c:	f800283a 	ret

00001450 <vQueueDelete>:
	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
	}
	#endif
	vPortFree( pxQueue );
    1450:	0000a0c1 	jmpi	a0c <vPortFree>

00001454 <xQueueIsQueueEmptyFromISR>:
BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
    1454:	20800e17 	ldw	r2,56(r4)
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1458:	1005003a 	cmpeq	r2,r2,zero
    145c:	f800283a 	ret

00001460 <xQueueIsQueueFullFromISR>:
BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
    1460:	20c00e17 	ldw	r3,56(r4)
    1464:	20800f17 	ldw	r2,60(r4)
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1468:	1885003a 	cmpeq	r2,r3,r2
    146c:	f800283a 	ret

00001470 <prvTaskIsTaskSuspended>:

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    1470:	20c00517 	ldw	r3,20(r4)
    1474:	00800034 	movhi	r2,0
    1478:	109beb04 	addi	r2,r2,28588
    147c:	1880051e 	bne	r3,r2,1494 <prvTaskIsTaskSuspended+0x24>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    1480:	20c00a17 	ldw	r3,40(r4)
    1484:	01000034 	movhi	r4,0
    1488:	211bf504 	addi	r4,r4,28628
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
    148c:	1805003a 	cmpeq	r2,r3,zero

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    1490:	1900011e 	bne	r3,r4,1498 <prvTaskIsTaskSuspended+0x28>

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
	BaseType_t xReturn = pdFALSE;
    1494:	0005883a 	mov	r2,zero
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    1498:	f800283a 	ret

0000149c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    149c:	d0a01d17 	ldw	r2,-32652(gp)
    14a0:	10800017 	ldw	r2,0(r2)
    14a4:	1000021e 	bne	r2,zero,14b0 <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    14a8:	00bfffc4 	movi	r2,-1
    14ac:	00000406 	br	14c0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    14b0:	d0a01d17 	ldw	r2,-32652(gp)
    14b4:	10800317 	ldw	r2,12(r2)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
    14b8:	10800317 	ldw	r2,12(r2)
    14bc:	10800117 	ldw	r2,4(r2)
    14c0:	d0a01215 	stw	r2,-32696(gp)
    14c4:	f800283a 	ret

000014c8 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    14c8:	d0a01e17 	ldw	r2,-32648(gp)
    14cc:	11000115 	stw	r4,4(r2)

	if( xTimeToWake < xTickCount )
    14d0:	d0a01917 	ldw	r2,-32668(gp)
    14d4:	2080042e 	bgeu	r4,r2,14e8 <prvAddCurrentTaskToDelayedList+0x20>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    14d8:	d1201c17 	ldw	r4,-32656(gp)
    14dc:	d1601e17 	ldw	r5,-32648(gp)
    14e0:	29400104 	addi	r5,r5,4
    14e4:	00005fc1 	jmpi	5fc <vListInsert>
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
    14e8:	defffe04 	addi	sp,sp,-8
    14ec:	dc000015 	stw	r16,0(sp)
    14f0:	2021883a 	mov	r16,r4
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    14f4:	d1201d17 	ldw	r4,-32652(gp)
    14f8:	d1601e17 	ldw	r5,-32648(gp)
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
    14fc:	dfc00115 	stw	ra,4(sp)
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    1500:	29400104 	addi	r5,r5,4
    1504:	00005fc0 	call	5fc <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    1508:	d0a01217 	ldw	r2,-32696(gp)
    150c:	8080012e 	bgeu	r16,r2,1514 <prvAddCurrentTaskToDelayedList+0x4c>
		{
			xNextTaskUnblockTime = xTimeToWake;
    1510:	d4201215 	stw	r16,-32696(gp)
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    1514:	dfc00117 	ldw	ra,4(sp)
    1518:	dc000017 	ldw	r16,0(sp)
    151c:	dec00204 	addi	sp,sp,8
    1520:	f800283a 	ret

00001524 <uxTaskPriorityGetFromISR>:

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
    1524:	2000011e 	bne	r4,zero,152c <uxTaskPriorityGetFromISR+0x8>
    1528:	d1201e17 	ldw	r4,-32648(gp)
			uxReturn = pxTCB->uxPriority;
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
	}
    152c:	20800b17 	ldw	r2,44(r4)
    1530:	f800283a 	ret

00001534 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
    1534:	defffc04 	addi	sp,sp,-16
    1538:	dc400115 	stw	r17,4(sp)
    153c:	dfc00315 	stw	ra,12(sp)
    1540:	dc800215 	stw	r18,8(sp)
    1544:	dc000015 	stw	r16,0(sp)
    1548:	2023883a 	mov	r17,r4
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    154c:	00014700 	call	1470 <prvTaskIsTaskSuspended>
    1550:	00c00044 	movi	r3,1
    1554:	10c0191e 	bne	r2,r3,15bc <xTaskResumeFromISR+0x88>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1558:	d0a01117 	ldw	r2,-32700(gp)
    155c:	1000131e 	bne	r2,zero,15ac <xTaskResumeFromISR+0x78>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1560:	d0e01e17 	ldw	r3,-32648(gp)
    1564:	88800b17 	ldw	r2,44(r17)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
    1568:	8c800104 	addi	r18,r17,4
				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    156c:	1c000b17 	ldw	r16,44(r3)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
    1570:	9009883a 	mov	r4,r18
				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1574:	1421403a 	cmpgeu	r16,r2,r16
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
    1578:	00006500 	call	650 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    157c:	89000b17 	ldw	r4,44(r17)
    1580:	d0a01817 	ldw	r2,-32672(gp)
    1584:	1100012e 	bgeu	r2,r4,158c <xTaskResumeFromISR+0x58>
    1588:	d1201815 	stw	r4,-32672(gp)
    158c:	01400504 	movi	r5,20
    1590:	0002c080 	call	2c08 <__mulsi3>
    1594:	01000034 	movhi	r4,0
    1598:	211c0404 	addi	r4,r4,28688
    159c:	2089883a 	add	r4,r4,r2
    15a0:	900b883a 	mov	r5,r18
    15a4:	00005cc0 	call	5cc <vListInsertEnd>
    15a8:	00000506 	br	15c0 <xTaskResumeFromISR+0x8c>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    15ac:	01000034 	movhi	r4,0
    15b0:	211bf504 	addi	r4,r4,28628
    15b4:	89400604 	addi	r5,r17,24
    15b8:	00005cc0 	call	5cc <vListInsertEnd>

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
	BaseType_t xYieldRequired = pdFALSE;
    15bc:	0021883a 	mov	r16,zero
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
	}
    15c0:	8005883a 	mov	r2,r16
    15c4:	dfc00317 	ldw	ra,12(sp)
    15c8:	dc800217 	ldw	r18,8(sp)
    15cc:	dc400117 	ldw	r17,4(sp)
    15d0:	dc000017 	ldw	r16,0(sp)
    15d4:	dec00404 	addi	sp,sp,16
    15d8:	f800283a 	ret

000015dc <vTaskEndScheduler>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    15dc:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    15e0:	00bfff84 	movi	r2,-2
    15e4:	1884703a 	and	r2,r3,r2
    15e8:	1001703a 	wrctl	status,r2
{
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
    15ec:	d0201715 	stw	zero,-32676(gp)
	vPortEndScheduler();
    15f0:	00008681 	jmpi	868 <vPortEndScheduler>

000015f4 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    15f4:	d0a01117 	ldw	r2,-32700(gp)
    15f8:	10800044 	addi	r2,r2,1
    15fc:	d0a01115 	stw	r2,-32700(gp)
    1600:	f800283a 	ret

00001604 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    1604:	d0a01917 	ldw	r2,-32668(gp)
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
    1608:	f800283a 	ret

0000160c <xTaskGetTickCountFromISR>:
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
	{
		xReturn = xTickCount;
    160c:	d0a01917 	ldw	r2,-32668(gp)
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1610:	f800283a 	ret

00001614 <uxTaskGetNumberOfTasks>:

UBaseType_t uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
    1614:	d0a01a17 	ldw	r2,-32664(gp)
}
    1618:	f800283a 	ret

0000161c <xTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    161c:	d0a01117 	ldw	r2,-32700(gp)

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    1620:	defffa04 	addi	sp,sp,-24
    1624:	dfc00515 	stw	ra,20(sp)
    1628:	dd000415 	stw	r20,16(sp)
    162c:	dcc00315 	stw	r19,12(sp)
    1630:	dc800215 	stw	r18,8(sp)
    1634:	dc400115 	stw	r17,4(sp)
    1638:	dc000015 	stw	r16,0(sp)

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    163c:	1000271e 	bne	r2,zero,16dc <xTaskIncrementTick+0xc0>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
    1640:	d0a01917 	ldw	r2,-32668(gp)
    1644:	10800044 	addi	r2,r2,1
    1648:	d0a01915 	stw	r2,-32668(gp)

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    164c:	d4e01917 	ldw	r19,-32668(gp)

			if( xConstTickCount == ( TickType_t ) 0U )
    1650:	9800081e 	bne	r19,zero,1674 <xTaskIncrementTick+0x58>
			{
				taskSWITCH_DELAYED_LISTS();
    1654:	d0a01d17 	ldw	r2,-32652(gp)
    1658:	d0e01c17 	ldw	r3,-32656(gp)
    165c:	d0e01d15 	stw	r3,-32652(gp)
    1660:	d0a01c15 	stw	r2,-32656(gp)
    1664:	d0a01417 	ldw	r2,-32688(gp)
    1668:	10800044 	addi	r2,r2,1
    166c:	d0a01415 	stw	r2,-32688(gp)
    1670:	000149c0 	call	149c <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
    1674:	d0a01217 	ldw	r2,-32696(gp)
    1678:	04800034 	movhi	r18,0
    167c:	949c0404 	addi	r18,r18,28688
    1680:	0021883a 	mov	r16,zero
    1684:	98800b36 	bltu	r19,r2,16b4 <xTaskIncrementTick+0x98>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1688:	d0a01d17 	ldw	r2,-32652(gp)
    168c:	10800017 	ldw	r2,0(r2)
    1690:	1000021e 	bne	r2,zero,169c <xTaskIncrementTick+0x80>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
    1694:	00bfffc4 	movi	r2,-1
    1698:	00000506 	br	16b0 <xTaskIncrementTick+0x94>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    169c:	d0a01d17 	ldw	r2,-32652(gp)
    16a0:	10800317 	ldw	r2,12(r2)
    16a4:	14400317 	ldw	r17,12(r2)
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    16a8:	88800117 	ldw	r2,4(r17)

						if( xConstTickCount < xItemValue )
    16ac:	9880132e 	bgeu	r19,r2,16fc <xTaskIncrementTick+0xe0>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
    16b0:	d0a01215 	stw	r2,-32696(gp)
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    16b4:	d0a01e17 	ldw	r2,-32648(gp)
    16b8:	01400504 	movi	r5,20
    16bc:	11000b17 	ldw	r4,44(r2)
    16c0:	0002c080 	call	2c08 <__mulsi3>
    16c4:	9085883a 	add	r2,r18,r2
    16c8:	10800017 	ldw	r2,0(r2)
    16cc:	00c00044 	movi	r3,1
    16d0:	1880062e 	bgeu	r3,r2,16ec <xTaskIncrementTick+0xd0>
			{
				xSwitchRequired = pdTRUE;
    16d4:	1821883a 	mov	r16,r3
    16d8:	00000406 	br	16ec <xTaskIncrementTick+0xd0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    16dc:	d0a01617 	ldw	r2,-32680(gp)

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    16e0:	0021883a 	mov	r16,zero
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    16e4:	10800044 	addi	r2,r2,1
    16e8:	d0a01615 	stw	r2,-32680(gp)
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    16ec:	d0a01517 	ldw	r2,-32684(gp)
    16f0:	10001826 	beq	r2,zero,1754 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
    16f4:	04000044 	movi	r16,1
    16f8:	00001606 	br	1754 <xTaskIncrementTick+0x138>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    16fc:	8d000104 	addi	r20,r17,4
    1700:	a009883a 	mov	r4,r20
    1704:	00006500 	call	650 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1708:	88800a17 	ldw	r2,40(r17)
    170c:	10000226 	beq	r2,zero,1718 <xTaskIncrementTick+0xfc>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1710:	89000604 	addi	r4,r17,24
    1714:	00006500 	call	650 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
    1718:	89000b17 	ldw	r4,44(r17)
    171c:	d0a01817 	ldw	r2,-32672(gp)
    1720:	1100012e 	bgeu	r2,r4,1728 <xTaskIncrementTick+0x10c>
    1724:	d1201815 	stw	r4,-32672(gp)
    1728:	01400504 	movi	r5,20
    172c:	0002c080 	call	2c08 <__mulsi3>
    1730:	9089883a 	add	r4,r18,r2
    1734:	a00b883a 	mov	r5,r20
    1738:	00005cc0 	call	5cc <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    173c:	d0a01e17 	ldw	r2,-32648(gp)
    1740:	88c00b17 	ldw	r3,44(r17)
    1744:	10800b17 	ldw	r2,44(r2)
    1748:	18bfcf36 	bltu	r3,r2,1688 <xTaskIncrementTick+0x6c>
							{
								xSwitchRequired = pdTRUE;
    174c:	04000044 	movi	r16,1
    1750:	003fcd06 	br	1688 <xTaskIncrementTick+0x6c>
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
    1754:	8005883a 	mov	r2,r16
    1758:	dfc00517 	ldw	ra,20(sp)
    175c:	dd000417 	ldw	r20,16(sp)
    1760:	dcc00317 	ldw	r19,12(sp)
    1764:	dc800217 	ldw	r18,8(sp)
    1768:	dc400117 	ldw	r17,4(sp)
    176c:	dc000017 	ldw	r16,0(sp)
    1770:	dec00604 	addi	sp,sp,24
    1774:	f800283a 	ret

00001778 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    1778:	d0a01117 	ldw	r2,-32700(gp)
    177c:	10000326 	beq	r2,zero,178c <vTaskSwitchContext+0x14>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    1780:	00800044 	movi	r2,1
    1784:	d0a01515 	stw	r2,-32684(gp)
    1788:	f800283a 	ret

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    178c:	defffd04 	addi	sp,sp,-12
    1790:	dc400115 	stw	r17,4(sp)
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    1794:	04400034 	movhi	r17,0

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    1798:	dfc00215 	stw	ra,8(sp)
    179c:	dc000015 	stw	r16,0(sp)
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
    17a0:	d0201515 	stw	zero,-32684(gp)
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    17a4:	8c5c0404 	addi	r17,r17,28688
    17a8:	d1201817 	ldw	r4,-32672(gp)
    17ac:	01400504 	movi	r5,20
    17b0:	04000034 	movhi	r16,0
    17b4:	0002c080 	call	2c08 <__mulsi3>
    17b8:	8885883a 	add	r2,r17,r2
    17bc:	10800017 	ldw	r2,0(r2)
    17c0:	841c0404 	addi	r16,r16,28688
    17c4:	1000041e 	bne	r2,zero,17d8 <vTaskSwitchContext+0x60>
    17c8:	d0a01817 	ldw	r2,-32672(gp)
    17cc:	10bfffc4 	addi	r2,r2,-1
    17d0:	d0a01815 	stw	r2,-32672(gp)
    17d4:	003ff406 	br	17a8 <vTaskSwitchContext+0x30>
    17d8:	d4601817 	ldw	r17,-32672(gp)
    17dc:	01400504 	movi	r5,20
    17e0:	8809883a 	mov	r4,r17
    17e4:	0002c080 	call	2c08 <__mulsi3>
    17e8:	8087883a 	add	r3,r16,r2
    17ec:	18c00104 	addi	r3,r3,4
    17f0:	19000017 	ldw	r4,0(r3)
    17f4:	10800204 	addi	r2,r2,8
    17f8:	1405883a 	add	r2,r2,r16
    17fc:	21400117 	ldw	r5,4(r4)
    1800:	19400015 	stw	r5,0(r3)
    1804:	2880021e 	bne	r5,r2,1810 <vTaskSwitchContext+0x98>
    1808:	28800117 	ldw	r2,4(r5)
    180c:	18800015 	stw	r2,0(r3)
    1810:	8809883a 	mov	r4,r17
    1814:	01400504 	movi	r5,20
    1818:	0002c080 	call	2c08 <__mulsi3>
    181c:	8085883a 	add	r2,r16,r2
    1820:	10800117 	ldw	r2,4(r2)
    1824:	10800317 	ldw	r2,12(r2)
    1828:	d0a01e15 	stw	r2,-32648(gp)
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    182c:	dfc00217 	ldw	ra,8(sp)
    1830:	dc400117 	ldw	r17,4(sp)
    1834:	dc000017 	ldw	r16,0(sp)
    1838:	dec00304 	addi	sp,sp,12
    183c:	f800283a 	ret

00001840 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    1840:	defffe04 	addi	sp,sp,-8
    1844:	dc000015 	stw	r16,0(sp)
    1848:	2821883a 	mov	r16,r5

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    184c:	d1601e17 	ldw	r5,-32648(gp)
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    1850:	dfc00115 	stw	ra,4(sp)

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1854:	29400604 	addi	r5,r5,24
    1858:	00005fc0 	call	5fc <vListInsert>

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    185c:	d1201e17 	ldw	r4,-32648(gp)
    1860:	21000104 	addi	r4,r4,4
    1864:	00006500 	call	650 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    1868:	00bfffc4 	movi	r2,-1
    186c:	8080081e 	bne	r16,r2,1890 <vTaskPlaceOnEventList+0x50>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    1870:	d1601e17 	ldw	r5,-32648(gp)
    1874:	01000034 	movhi	r4,0
    1878:	211beb04 	addi	r4,r4,28588
    187c:	29400104 	addi	r5,r5,4
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    1880:	dfc00117 	ldw	ra,4(sp)
    1884:	dc000017 	ldw	r16,0(sp)
    1888:	dec00204 	addi	sp,sp,8
		if( xTicksToWait == portMAX_DELAY )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    188c:	00005cc1 	jmpi	5cc <vListInsertEnd>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
    1890:	d1201917 	ldw	r4,-32668(gp)
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    1894:	8109883a 	add	r4,r16,r4
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    1898:	dfc00117 	ldw	ra,4(sp)
    189c:	dc000017 	ldw	r16,0(sp)
    18a0:	dec00204 	addi	sp,sp,8
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    18a4:	00014c81 	jmpi	14c8 <prvAddCurrentTaskToDelayedList>

000018a8 <vTaskPlaceOnUnorderedEventList>:
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    18a8:	d0a01e17 	ldw	r2,-32648(gp)
	#endif /* INCLUDE_vTaskSuspend */
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    18ac:	defffe04 	addi	sp,sp,-8
    18b0:	dfc00115 	stw	ra,4(sp)
    18b4:	dc000015 	stw	r16,0(sp)
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    18b8:	29600034 	orhi	r5,r5,32768
    18bc:	11400615 	stw	r5,24(r2)
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    18c0:	d1601e17 	ldw	r5,-32648(gp)
	#endif /* INCLUDE_vTaskSuspend */
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    18c4:	3021883a 	mov	r16,r6
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    18c8:	29400604 	addi	r5,r5,24
    18cc:	00005cc0 	call	5cc <vListInsertEnd>

	/* The task must be removed from the ready list before it is added to the
	blocked list.  Exclusive access can be assured to the ready list as the
	scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    18d0:	d1201e17 	ldw	r4,-32648(gp)
    18d4:	21000104 	addi	r4,r4,4
    18d8:	00006500 	call	650 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    18dc:	00bfffc4 	movi	r2,-1
    18e0:	8080081e 	bne	r16,r2,1904 <vTaskPlaceOnUnorderedEventList+0x5c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    18e4:	d1601e17 	ldw	r5,-32648(gp)
    18e8:	01000034 	movhi	r4,0
    18ec:	211beb04 	addi	r4,r4,28588
    18f0:	29400104 	addi	r5,r5,4
			will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    18f4:	dfc00117 	ldw	ra,4(sp)
    18f8:	dc000017 	ldw	r16,0(sp)
    18fc:	dec00204 	addi	sp,sp,8
		if( xTicksToWait == portMAX_DELAY )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    1900:	00005cc1 	jmpi	5cc <vListInsertEnd>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
    1904:	d1201917 	ldw	r4,-32668(gp)
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    1908:	8109883a 	add	r4,r16,r4
			will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    190c:	dfc00117 	ldw	ra,4(sp)
    1910:	dc000017 	ldw	r16,0(sp)
    1914:	dec00204 	addi	sp,sp,8
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    1918:	00014c81 	jmpi	14c8 <prvAddCurrentTaskToDelayedList>

0000191c <xTaskRemoveFromEventList>:
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    191c:	20800317 	ldw	r2,12(r4)

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    1920:	defffd04 	addi	sp,sp,-12
    1924:	dc000015 	stw	r16,0(sp)
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    1928:	14000317 	ldw	r16,12(r2)

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    192c:	dc400115 	stw	r17,4(sp)
    1930:	dfc00215 	stw	ra,8(sp)

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    1934:	84400604 	addi	r17,r16,24
    1938:	8809883a 	mov	r4,r17
    193c:	00006500 	call	650 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1940:	d0a01117 	ldw	r2,-32700(gp)
    1944:	10000d1e 	bne	r2,zero,197c <xTaskRemoveFromEventList+0x60>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    1948:	84400104 	addi	r17,r16,4
    194c:	8809883a 	mov	r4,r17
    1950:	00006500 	call	650 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    1954:	81000b17 	ldw	r4,44(r16)
    1958:	d0a01817 	ldw	r2,-32672(gp)
    195c:	1100012e 	bgeu	r2,r4,1964 <xTaskRemoveFromEventList+0x48>
    1960:	d1201815 	stw	r4,-32672(gp)
    1964:	01400504 	movi	r5,20
    1968:	0002c080 	call	2c08 <__mulsi3>
    196c:	01000034 	movhi	r4,0
    1970:	211c0404 	addi	r4,r4,28688
    1974:	2089883a 	add	r4,r4,r2
    1978:	00000206 	br	1984 <xTaskRemoveFromEventList+0x68>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    197c:	01000034 	movhi	r4,0
    1980:	211bf504 	addi	r4,r4,28628
    1984:	880b883a 	mov	r5,r17
    1988:	00005cc0 	call	5cc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    198c:	d0e01e17 	ldw	r3,-32648(gp)
    1990:	80800b17 	ldw	r2,44(r16)
    1994:	18c00b17 	ldw	r3,44(r3)
    1998:	1880032e 	bgeu	r3,r2,19a8 <xTaskRemoveFromEventList+0x8c>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    199c:	00800044 	movi	r2,1
    19a0:	d0a01515 	stw	r2,-32684(gp)
    19a4:	00000106 	br	19ac <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		xReturn = pdFALSE;
    19a8:	0005883a 	mov	r2,zero
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
    19ac:	dfc00217 	ldw	ra,8(sp)
    19b0:	dc400117 	ldw	r17,4(sp)
    19b4:	dc000017 	ldw	r16,0(sp)
    19b8:	dec00304 	addi	sp,sp,12
    19bc:	f800283a 	ret

000019c0 <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    19c0:	defffd04 	addi	sp,sp,-12
    19c4:	dc000015 	stw	r16,0(sp)
	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
    19c8:	24000317 	ldw	r16,12(r4)
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    19cc:	dfc00215 	stw	ra,8(sp)
    19d0:	dc400115 	stw	r17,4(sp)
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    19d4:	29600034 	orhi	r5,r5,32768
    19d8:	21400015 	stw	r5,0(r4)

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
    19dc:	00006500 	call	650 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    19e0:	84400104 	addi	r17,r16,4
    19e4:	8809883a 	mov	r4,r17
    19e8:	00006500 	call	650 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    19ec:	81000b17 	ldw	r4,44(r16)
    19f0:	d0a01817 	ldw	r2,-32672(gp)
    19f4:	1100012e 	bgeu	r2,r4,19fc <xTaskRemoveFromUnorderedEventList+0x3c>
    19f8:	d1201815 	stw	r4,-32672(gp)
    19fc:	01400504 	movi	r5,20
    1a00:	0002c080 	call	2c08 <__mulsi3>
    1a04:	01000034 	movhi	r4,0
    1a08:	211c0404 	addi	r4,r4,28688
    1a0c:	2089883a 	add	r4,r4,r2
    1a10:	880b883a 	mov	r5,r17
    1a14:	00005cc0 	call	5cc <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    1a18:	d0e01e17 	ldw	r3,-32648(gp)
    1a1c:	80800b17 	ldw	r2,44(r16)
    1a20:	18c00b17 	ldw	r3,44(r3)
    1a24:	1880032e 	bgeu	r3,r2,1a34 <xTaskRemoveFromUnorderedEventList+0x74>
		switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    1a28:	00800044 	movi	r2,1
    1a2c:	d0a01515 	stw	r2,-32684(gp)
    1a30:	00000106 	br	1a38 <xTaskRemoveFromUnorderedEventList+0x78>
	}
	else
	{
		xReturn = pdFALSE;
    1a34:	0005883a 	mov	r2,zero
	}

	return xReturn;
}
    1a38:	dfc00217 	ldw	ra,8(sp)
    1a3c:	dc400117 	ldw	r17,4(sp)
    1a40:	dc000017 	ldw	r16,0(sp)
    1a44:	dec00304 	addi	sp,sp,12
    1a48:	f800283a 	ret

00001a4c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    1a4c:	d0a01417 	ldw	r2,-32688(gp)
    1a50:	20800015 	stw	r2,0(r4)
	pxTimeOut->xTimeOnEntering = xTickCount;
    1a54:	d0a01917 	ldw	r2,-32668(gp)
    1a58:	20800115 	stw	r2,4(r4)
    1a5c:	f800283a 	ret

00001a60 <vTaskMissedYield>:
}
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
    1a60:	00800044 	movi	r2,1
    1a64:	d0a01515 	stw	r2,-32684(gp)
    1a68:	f800283a 	ret

00001a6c <uxTaskGetStackHighWaterMark>:
	{
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    1a6c:	2000011e 	bne	r4,zero,1a74 <uxTaskGetStackHighWaterMark+0x8>
    1a70:	d1201e17 	ldw	r4,-32648(gp)

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
    1a74:	21000c17 	ldw	r4,48(r4)

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
    1a78:	01402944 	movi	r5,165

		pxTCB = prvGetTCBFromHandle( xTask );

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
    1a7c:	2007883a 	mov	r3,r4

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
    1a80:	19800003 	ldbu	r6,0(r3)
    1a84:	1905c83a 	sub	r2,r3,r4
    1a88:	3140021e 	bne	r6,r5,1a94 <uxTaskGetStackHighWaterMark+0x28>
		{
			pucStackByte -= portSTACK_GROWTH;
    1a8c:	18c00044 	addi	r3,r3,1
    1a90:	003ffb06 	br	1a80 <uxTaskGetStackHighWaterMark+0x14>
			ulCount++;
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
    1a94:	1004d0ba 	srli	r2,r2,2
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );

		return uxReturn;
	}
    1a98:	10bfffcc 	andi	r2,r2,65535
    1a9c:	f800283a 	ret

00001aa0 <xTaskGetCurrentTaskHandle>:
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    1aa0:	d0a01e17 	ldw	r2,-32648(gp)

		return xReturn;
	}
    1aa4:	f800283a 	ret

00001aa8 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    1aa8:	20003526 	beq	r4,zero,1b80 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    1aac:	d0a01e17 	ldw	r2,-32648(gp)
    1ab0:	20c00b17 	ldw	r3,44(r4)
    1ab4:	10800b17 	ldw	r2,44(r2)
    1ab8:	1880312e 	bgeu	r3,r2,1b80 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    1abc:	20800617 	ldw	r2,24(r4)
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    1ac0:	defffc04 	addi	sp,sp,-16
    1ac4:	dfc00315 	stw	ra,12(sp)
    1ac8:	dc800215 	stw	r18,8(sp)
    1acc:	dc400115 	stw	r17,4(sp)
    1ad0:	dc000015 	stw	r16,0(sp)
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    1ad4:	10000516 	blt	r2,zero,1aec <vTaskPriorityInherit+0x44>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1ad8:	d0a01e17 	ldw	r2,-32648(gp)
    1adc:	11400b17 	ldw	r5,44(r2)
    1ae0:	00800144 	movi	r2,5
    1ae4:	1145c83a 	sub	r2,r2,r5
    1ae8:	20800615 	stw	r2,24(r4)
    1aec:	2021883a 	mov	r16,r4
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    1af0:	01400504 	movi	r5,20
    1af4:	1809883a 	mov	r4,r3
    1af8:	0002c080 	call	2c08 <__mulsi3>
    1afc:	01000034 	movhi	r4,0
    1b00:	80c00517 	ldw	r3,20(r16)
    1b04:	211c0404 	addi	r4,r4,28688
    1b08:	2085883a 	add	r2,r4,r2
    1b0c:	2023883a 	mov	r17,r4
    1b10:	1880131e 	bne	r3,r2,1b60 <vTaskPriorityInherit+0xb8>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1b14:	84800104 	addi	r18,r16,4
    1b18:	9009883a 	mov	r4,r18
    1b1c:	00006500 	call	650 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1b20:	d0a01e17 	ldw	r2,-32648(gp)
    1b24:	11000b17 	ldw	r4,44(r2)
					prvAddTaskToReadyList( pxTCB );
    1b28:	d0a01817 	ldw	r2,-32672(gp)
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1b2c:	81000b15 	stw	r4,44(r16)
					prvAddTaskToReadyList( pxTCB );
    1b30:	1100012e 	bgeu	r2,r4,1b38 <vTaskPriorityInherit+0x90>
    1b34:	d1201815 	stw	r4,-32672(gp)
    1b38:	01400504 	movi	r5,20
    1b3c:	0002c080 	call	2c08 <__mulsi3>
    1b40:	8889883a 	add	r4,r17,r2
    1b44:	900b883a 	mov	r5,r18
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1b48:	dfc00317 	ldw	ra,12(sp)
    1b4c:	dc800217 	ldw	r18,8(sp)
    1b50:	dc400117 	ldw	r17,4(sp)
    1b54:	dc000017 	ldw	r16,0(sp)
    1b58:	dec00404 	addi	sp,sp,16
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
					prvAddTaskToReadyList( pxTCB );
    1b5c:	00005cc1 	jmpi	5cc <vListInsertEnd>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1b60:	d0a01e17 	ldw	r2,-32648(gp)
    1b64:	10800b17 	ldw	r2,44(r2)
    1b68:	80800b15 	stw	r2,44(r16)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1b6c:	dfc00317 	ldw	ra,12(sp)
    1b70:	dc800217 	ldw	r18,8(sp)
    1b74:	dc400117 	ldw	r17,4(sp)
    1b78:	dc000017 	ldw	r16,0(sp)
    1b7c:	dec00404 	addi	sp,sp,16
    1b80:	f800283a 	ret

00001b84 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
    1b84:	2000021e 	bne	r4,zero,1b90 <xTaskPriorityDisinherit+0xc>
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
    1b88:	0005883a 	mov	r2,zero
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    1b8c:	f800283a 	ret
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
    1b90:	20801117 	ldw	r2,68(r4)

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1b94:	21400b17 	ldw	r5,44(r4)
    1b98:	20c01017 	ldw	r3,64(r4)
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
    1b9c:	10bfffc4 	addi	r2,r2,-1
    1ba0:	20801115 	stw	r2,68(r4)

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1ba4:	28fff826 	beq	r5,r3,1b88 <xTaskPriorityDisinherit+0x4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    1ba8:	103ff71e 	bne	r2,zero,1b88 <xTaskPriorityDisinherit+0x4>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    1bac:	defffd04 	addi	sp,sp,-12
    1bb0:	dc400115 	stw	r17,4(sp)
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1bb4:	24400104 	addi	r17,r4,4
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    1bb8:	dc000015 	stw	r16,0(sp)
    1bbc:	2021883a 	mov	r16,r4
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1bc0:	8809883a 	mov	r4,r17
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    1bc4:	dfc00215 	stw	ra,8(sp)
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1bc8:	00006500 	call	650 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    1bcc:	81001017 	ldw	r4,64(r16)

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1bd0:	00800144 	movi	r2,5
    1bd4:	1105c83a 	sub	r2,r2,r4
    1bd8:	80800615 	stw	r2,24(r16)
					prvAddTaskToReadyList( pxTCB );
    1bdc:	d0a01817 	ldw	r2,-32672(gp)
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    1be0:	81000b15 	stw	r4,44(r16)

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
					prvAddTaskToReadyList( pxTCB );
    1be4:	1100012e 	bgeu	r2,r4,1bec <xTaskPriorityDisinherit+0x68>
    1be8:	d1201815 	stw	r4,-32672(gp)
    1bec:	01400504 	movi	r5,20
    1bf0:	0002c080 	call	2c08 <__mulsi3>
    1bf4:	01000034 	movhi	r4,0
    1bf8:	211c0404 	addi	r4,r4,28688
    1bfc:	2089883a 	add	r4,r4,r2
    1c00:	880b883a 	mov	r5,r17
    1c04:	00005cc0 	call	5cc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    1c08:	00800044 	movi	r2,1
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    1c0c:	dfc00217 	ldw	ra,8(sp)
    1c10:	dc400117 	ldw	r17,4(sp)
    1c14:	dc000017 	ldw	r16,0(sp)
    1c18:	dec00304 	addi	sp,sp,12
    1c1c:	f800283a 	ret

00001c20 <vTaskEnterCritical>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1c20:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1c24:	00bfff84 	movi	r2,-2
    1c28:	1884703a 	and	r2,r3,r2
    1c2c:	1001703a 	wrctl	status,r2

	void vTaskEnterCritical( void )
	{
		portDISABLE_INTERRUPTS();

		if( xSchedulerRunning != pdFALSE )
    1c30:	d0a01717 	ldw	r2,-32676(gp)
    1c34:	10000526 	beq	r2,zero,1c4c <vTaskEnterCritical+0x2c>
		{
			( pxCurrentTCB->uxCriticalNesting )++;
    1c38:	d0e01e17 	ldw	r3,-32648(gp)
    1c3c:	18800f17 	ldw	r2,60(r3)
    1c40:	10800044 	addi	r2,r2,1
    1c44:	18800f15 	stw	r2,60(r3)
			function so	assert() if it is being called from an interrupt
			context.  Only API functions that end in "FromISR" can be used in an
			interrupt.  Only assert if the critical nesting count is 1 to
			protect against recursive calls if the assert function also uses a
			critical section. */
			if( pxCurrentTCB->uxCriticalNesting == 1 )
    1c48:	d0a01e17 	ldw	r2,-32648(gp)
    1c4c:	f800283a 	ret

00001c50 <vTaskExitCritical>:

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskExitCritical( void )
	{
		if( xSchedulerRunning != pdFALSE )
    1c50:	d0a01717 	ldw	r2,-32676(gp)
    1c54:	10000c26 	beq	r2,zero,1c88 <vTaskExitCritical+0x38>
		{
			if( pxCurrentTCB->uxCriticalNesting > 0U )
    1c58:	d0a01e17 	ldw	r2,-32648(gp)
    1c5c:	10800f17 	ldw	r2,60(r2)
    1c60:	10000926 	beq	r2,zero,1c88 <vTaskExitCritical+0x38>
			{
				( pxCurrentTCB->uxCriticalNesting )--;
    1c64:	d0e01e17 	ldw	r3,-32648(gp)
    1c68:	18800f17 	ldw	r2,60(r3)
    1c6c:	10bfffc4 	addi	r2,r2,-1
    1c70:	18800f15 	stw	r2,60(r3)

				if( pxCurrentTCB->uxCriticalNesting == 0U )
    1c74:	d0a01e17 	ldw	r2,-32648(gp)
    1c78:	10800f17 	ldw	r2,60(r2)
    1c7c:	1000021e 	bne	r2,zero,1c88 <vTaskExitCritical+0x38>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1c80:	00800044 	movi	r2,1
    1c84:	1001703a 	wrctl	status,r2
    1c88:	f800283a 	ret

00001c8c <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    1c8c:	defff704 	addi	sp,sp,-36
    1c90:	ddc00715 	stw	r23,28(sp)
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1c94:	ddc00b17 	ldw	r23,44(sp)

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    1c98:	dd800615 	stw	r22,24(sp)
    1c9c:	dd400515 	stw	r21,20(sp)
    1ca0:	dd000415 	stw	r20,16(sp)
    1ca4:	dcc00315 	stw	r19,12(sp)
    1ca8:	dc800215 	stw	r18,8(sp)
    1cac:	dc400115 	stw	r17,4(sp)
    1cb0:	dfc00815 	stw	ra,32(sp)
    1cb4:	dc000015 	stw	r16,0(sp)
    1cb8:	202d883a 	mov	r22,r4
    1cbc:	2825883a 	mov	r18,r5
    1cc0:	3023883a 	mov	r17,r6
    1cc4:	382b883a 	mov	r21,r7
    1cc8:	dcc00917 	ldw	r19,36(sp)
    1ccc:	dd000a17 	ldw	r20,40(sp)
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1cd0:	b800061e 	bne	r23,zero,1cec <xTaskGenericCreate+0x60>
    1cd4:	313fffcc 	andi	r4,r6,65535
    1cd8:	2109883a 	add	r4,r4,r4
    1cdc:	2109883a 	add	r4,r4,r4
    1ce0:	00009800 	call	980 <pvPortMalloc>
    1ce4:	102f883a 	mov	r23,r2

		if( pxStack != NULL )
    1ce8:	10007b26 	beq	r2,zero,1ed8 <xTaskGenericCreate+0x24c>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
    1cec:	01001404 	movi	r4,80
    1cf0:	00009800 	call	980 <pvPortMalloc>
    1cf4:	1021883a 	mov	r16,r2

			if( pxNewTCB != NULL )
    1cf8:	10001026 	beq	r2,zero,1d3c <xTaskGenericCreate+0xb0>
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
    1cfc:	8c7fffcc 	andi	r17,r17,65535
    1d00:	8c63883a 	add	r17,r17,r17
    1d04:	8c63883a 	add	r17,r17,r17
    1d08:	880d883a 	mov	r6,r17
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );

			if( pxNewTCB != NULL )
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
    1d0c:	15c00c15 	stw	r23,48(r2)
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
    1d10:	b809883a 	mov	r4,r23
    1d14:	01402944 	movi	r5,165
    1d18:	0002c580 	call	2c58 <memset>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
    1d1c:	80800c17 	ldw	r2,48(r16)
    1d20:	8c7fff04 	addi	r17,r17,-4
    1d24:	80c00f04 	addi	r3,r16,60
    1d28:	1463883a 	add	r17,r2,r17
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    1d2c:	00bfff04 	movi	r2,-4
    1d30:	88a2703a 	and	r17,r17,r2
    1d34:	80800d04 	addi	r2,r16,52
    1d38:	00000606 	br	1d54 <xTaskGenericCreate+0xc8>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
    1d3c:	b809883a 	mov	r4,r23
    1d40:	0000a0c0 	call	a0c <vPortFree>
    1d44:	00006406 	br	1ed8 <xTaskGenericCreate+0x24c>
    1d48:	10800044 	addi	r2,r2,1
    1d4c:	94800044 	addi	r18,r18,1
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    1d50:	10c00426 	beq	r2,r3,1d64 <xTaskGenericCreate+0xd8>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    1d54:	91000003 	ldbu	r4,0(r18)
    1d58:	11000005 	stb	r4,0(r2)

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    1d5c:	91000007 	ldb	r4,0(r18)
    1d60:	203ff91e 	bne	r4,zero,1d48 <xTaskGenericCreate+0xbc>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    1d64:	80000ec5 	stb	zero,59(r16)
    1d68:	00800104 	movi	r2,4
    1d6c:	9825883a 	mov	r18,r19
    1d70:	14c0012e 	bgeu	r2,r19,1d78 <xTaskGenericCreate+0xec>
    1d74:	1025883a 	mov	r18,r2
		pxTCB->uxBasePriority = uxPriority;
		pxTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    1d78:	85c00104 	addi	r23,r16,4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
    1d7c:	84800b15 	stw	r18,44(r16)
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    1d80:	84801015 	stw	r18,64(r16)
		pxTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    1d84:	b809883a 	mov	r4,r23

	pxTCB->uxPriority = uxPriority;
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
		pxTCB->uxMutexesHeld = 0;
    1d88:	80001115 	stw	zero,68(r16)
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    1d8c:	00005c40 	call	5c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    1d90:	81000604 	addi	r4,r16,24
    1d94:	00005c40 	call	5c4 <vListInitialiseItem>
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1d98:	00800144 	movi	r2,5
    1d9c:	14a5c83a 	sub	r18,r2,r18
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
    1da0:	80001215 	stw	zero,72(r16)
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
	vListInitialiseItem( &( pxTCB->xEventListItem ) );

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    1da4:	84000415 	stw	r16,16(r16)

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1da8:	84800615 	stw	r18,24(r16)
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    1dac:	84000915 	stw	r16,36(r16)

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
    1db0:	80000f15 	stw	zero,60(r16)
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
		pxTCB->eNotifyState = eNotWaitingNotification;
    1db4:	80001315 	stw	zero,76(r16)
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    1db8:	8809883a 	mov	r4,r17
    1dbc:	b00b883a 	mov	r5,r22
    1dc0:	a80d883a 	mov	r6,r21
    1dc4:	00008280 	call	828 <pxPortInitialiseStack>
    1dc8:	80800015 	stw	r2,0(r16)
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
    1dcc:	a0000126 	beq	r20,zero,1dd4 <xTaskGenericCreate+0x148>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    1dd0:	a4000015 	stw	r16,0(r20)
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
    1dd4:	0001c200 	call	1c20 <vTaskEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    1dd8:	d0a01a17 	ldw	r2,-32664(gp)
    1ddc:	04800034 	movhi	r18,0
    1de0:	949c0404 	addi	r18,r18,28688
    1de4:	10800044 	addi	r2,r2,1
    1de8:	d0a01a15 	stw	r2,-32664(gp)
			if( pxCurrentTCB == NULL )
    1dec:	d0a01e17 	ldw	r2,-32648(gp)
    1df0:	10001e1e 	bne	r2,zero,1e6c <xTaskGenericCreate+0x1e0>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    1df4:	d4201e15 	stw	r16,-32648(gp)

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    1df8:	d0e01a17 	ldw	r3,-32664(gp)
    1dfc:	00800044 	movi	r2,1
    1e00:	1880201e 	bne	r3,r2,1e84 <xTaskGenericCreate+0x1f8>
    1e04:	0023883a 	mov	r17,zero

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    1e08:	05001904 	movi	r20,100
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    1e0c:	9449883a 	add	r4,r18,r17
    1e10:	8c400504 	addi	r17,r17,20
    1e14:	00005a40 	call	5a4 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    1e18:	8d3ffc1e 	bne	r17,r20,1e0c <xTaskGenericCreate+0x180>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    1e1c:	05000034 	movhi	r20,0
    1e20:	a51bff04 	addi	r20,r20,28668
    1e24:	a009883a 	mov	r4,r20
	vListInitialise( &xDelayedTaskList2 );
    1e28:	04400034 	movhi	r17,0
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    1e2c:	00005a40 	call	5a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    1e30:	8c5bfa04 	addi	r17,r17,28648
    1e34:	8809883a 	mov	r4,r17
    1e38:	00005a40 	call	5a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    1e3c:	01000034 	movhi	r4,0
    1e40:	211bf504 	addi	r4,r4,28628
    1e44:	00005a40 	call	5a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    1e48:	01000034 	movhi	r4,0
    1e4c:	211bf004 	addi	r4,r4,28608
    1e50:	00005a40 	call	5a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    1e54:	01000034 	movhi	r4,0
    1e58:	211beb04 	addi	r4,r4,28588
    1e5c:	00005a40 	call	5a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    1e60:	d5201d15 	stw	r20,-32652(gp)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    1e64:	d4601c15 	stw	r17,-32656(gp)
    1e68:	00000606 	br	1e84 <xTaskGenericCreate+0x1f8>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    1e6c:	d0a01717 	ldw	r2,-32676(gp)
    1e70:	1000041e 	bne	r2,zero,1e84 <xTaskGenericCreate+0x1f8>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    1e74:	d0a01e17 	ldw	r2,-32648(gp)
    1e78:	10800b17 	ldw	r2,44(r2)
    1e7c:	98800136 	bltu	r19,r2,1e84 <xTaskGenericCreate+0x1f8>
					{
						pxCurrentTCB = pxNewTCB;
    1e80:	d4201e15 	stw	r16,-32648(gp)
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
    1e84:	d0a01317 	ldw	r2,-32692(gp)
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
    1e88:	81000b17 	ldw	r4,44(r16)
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
    1e8c:	10800044 	addi	r2,r2,1
    1e90:	d0a01315 	stw	r2,-32692(gp)
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
    1e94:	d0a01817 	ldw	r2,-32672(gp)
    1e98:	1100012e 	bgeu	r2,r4,1ea0 <xTaskGenericCreate+0x214>
    1e9c:	d1201815 	stw	r4,-32672(gp)
    1ea0:	01400504 	movi	r5,20
    1ea4:	0002c080 	call	2c08 <__mulsi3>
    1ea8:	9089883a 	add	r4,r18,r2
    1eac:	b80b883a 	mov	r5,r23
    1eb0:	00005cc0 	call	5cc <vListInsertEnd>

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    1eb4:	0001c500 	call	1c50 <vTaskExitCritical>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    1eb8:	d0a01717 	ldw	r2,-32676(gp)
    1ebc:	10000426 	beq	r2,zero,1ed0 <xTaskGenericCreate+0x244>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    1ec0:	d0a01e17 	ldw	r2,-32648(gp)
    1ec4:	10800b17 	ldw	r2,44(r2)
    1ec8:	14c0012e 	bgeu	r2,r19,1ed0 <xTaskGenericCreate+0x244>
			{
				taskYIELD_IF_USING_PREEMPTION();
    1ecc:	003b683a 	trap	0
    1ed0:	00800044 	movi	r2,1
    1ed4:	00000106 	br	1edc <xTaskGenericCreate+0x250>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    1ed8:	00bfffc4 	movi	r2,-1
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
    1edc:	dfc00817 	ldw	ra,32(sp)
    1ee0:	ddc00717 	ldw	r23,28(sp)
    1ee4:	dd800617 	ldw	r22,24(sp)
    1ee8:	dd400517 	ldw	r21,20(sp)
    1eec:	dd000417 	ldw	r20,16(sp)
    1ef0:	dcc00317 	ldw	r19,12(sp)
    1ef4:	dc800217 	ldw	r18,8(sp)
    1ef8:	dc400117 	ldw	r17,4(sp)
    1efc:	dc000017 	ldw	r16,0(sp)
    1f00:	dec00904 	addi	sp,sp,36
    1f04:	f800283a 	ret

00001f08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    1f08:	defffb04 	addi	sp,sp,-20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
    1f0c:	01000034 	movhi	r4,0
    1f10:	01400034 	movhi	r5,0
    1f14:	d8000015 	stw	zero,0(sp)
    1f18:	d8000115 	stw	zero,4(sp)
    1f1c:	d8000215 	stw	zero,8(sp)
    1f20:	d8000315 	stw	zero,12(sp)
    1f24:	21093804 	addi	r4,r4,9440
    1f28:	294d1304 	addi	r5,r5,13388
    1f2c:	01810004 	movi	r6,1024
    1f30:	000f883a 	mov	r7,zero

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    1f34:	dfc00415 	stw	ra,16(sp)
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
    1f38:	0001c8c0 	call	1c8c <xTaskGenericCreate>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    1f3c:	00c00044 	movi	r3,1
    1f40:	10c00b1e 	bne	r2,r3,1f70 <vTaskStartScheduler+0x68>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1f44:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1f48:	00ffff84 	movi	r3,-2
    1f4c:	20c6703a 	and	r3,r4,r3
    1f50:	1801703a 	wrctl	status,r3
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    1f54:	00ffffc4 	movi	r3,-1
    1f58:	d0e01215 	stw	r3,-32696(gp)
		xSchedulerRunning = pdTRUE;
    1f5c:	d0a01715 	stw	r2,-32676(gp)
		xTickCount = ( TickType_t ) 0U;
    1f60:	d0201915 	stw	zero,-32668(gp)
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
    1f64:	dfc00417 	ldw	ra,16(sp)
    1f68:	dec00504 	addi	sp,sp,20
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    1f6c:	00009041 	jmpi	904 <xPortStartScheduler>
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
    1f70:	dfc00417 	ldw	ra,16(sp)
    1f74:	dec00504 	addi	sp,sp,20
    1f78:	f800283a 	ret

00001f7c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    1f7c:	defffd04 	addi	sp,sp,-12
    1f80:	dc000015 	stw	r16,0(sp)
    1f84:	2021883a 	mov	r16,r4
    1f88:	dfc00215 	stw	ra,8(sp)
    1f8c:	dc400115 	stw	r17,4(sp)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    1f90:	0001c200 	call	1c20 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    1f94:	8000011e 	bne	r16,zero,1f9c <vTaskDelete+0x20>
    1f98:	d4201e17 	ldw	r16,-32648(gp)

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1f9c:	84400104 	addi	r17,r16,4
    1fa0:	8809883a 	mov	r4,r17
    1fa4:	00006500 	call	650 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1fa8:	80800a17 	ldw	r2,40(r16)
    1fac:	10000226 	beq	r2,zero,1fb8 <vTaskDelete+0x3c>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1fb0:	81000604 	addi	r4,r16,24
    1fb4:	00006500 	call	650 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    1fb8:	01000034 	movhi	r4,0
    1fbc:	211bf004 	addi	r4,r4,28608
    1fc0:	880b883a 	mov	r5,r17
    1fc4:	00005cc0 	call	5cc <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    1fc8:	d0a01b17 	ldw	r2,-32660(gp)
    1fcc:	10800044 	addi	r2,r2,1
    1fd0:	d0a01b15 	stw	r2,-32660(gp)

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    1fd4:	d0a01317 	ldw	r2,-32692(gp)
    1fd8:	10800044 	addi	r2,r2,1
    1fdc:	d0a01315 	stw	r2,-32692(gp)

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    1fe0:	0001c500 	call	1c50 <vTaskExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    1fe4:	d0a01717 	ldw	r2,-32676(gp)
    1fe8:	10000b26 	beq	r2,zero,2018 <vTaskDelete+0x9c>
		{
			if( pxTCB == pxCurrentTCB )
    1fec:	d0a01e17 	ldw	r2,-32648(gp)
    1ff0:	8080021e 	bne	r16,r2,1ffc <vTaskDelete+0x80>
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
    1ff4:	003b683a 	trap	0
    1ff8:	00000706 	br	2018 <vTaskDelete+0x9c>
			}
			else
			{
				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				taskENTER_CRITICAL();
    1ffc:	0001c200 	call	1c20 <vTaskEnterCritical>
				{
					prvResetNextTaskUnblockTime();
    2000:	000149c0 	call	149c <prvResetNextTaskUnblockTime>
				}
				taskEXIT_CRITICAL();
			}
		}
	}
    2004:	dfc00217 	ldw	ra,8(sp)
    2008:	dc400117 	ldw	r17,4(sp)
    200c:	dc000017 	ldw	r16,0(sp)
    2010:	dec00304 	addi	sp,sp,12
				the task that has just been deleted. */
				taskENTER_CRITICAL();
				{
					prvResetNextTaskUnblockTime();
				}
				taskEXIT_CRITICAL();
    2014:	0001c501 	jmpi	1c50 <vTaskExitCritical>
			}
		}
	}
    2018:	dfc00217 	ldw	ra,8(sp)
    201c:	dc400117 	ldw	r17,4(sp)
    2020:	dc000017 	ldw	r16,0(sp)
    2024:	dec00304 	addi	sp,sp,12
    2028:	f800283a 	ret

0000202c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
    202c:	defffe04 	addi	sp,sp,-8
    2030:	dc000015 	stw	r16,0(sp)
    2034:	2021883a 	mov	r16,r4
    2038:	dfc00115 	stw	ra,4(sp)
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
    203c:	0001c200 	call	1c20 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
    2040:	8000011e 	bne	r16,zero,2048 <uxTaskPriorityGet+0x1c>
    2044:	d4201e17 	ldw	r16,-32648(gp)
			uxReturn = pxTCB->uxPriority;
    2048:	84000b17 	ldw	r16,44(r16)
		}
		taskEXIT_CRITICAL();
    204c:	0001c500 	call	1c50 <vTaskExitCritical>

		return uxReturn;
	}
    2050:	8005883a 	mov	r2,r16
    2054:	dfc00117 	ldw	ra,4(sp)
    2058:	dc000017 	ldw	r16,0(sp)
    205c:	dec00204 	addi	sp,sp,8
    2060:	f800283a 	ret

00002064 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
    2064:	defffb04 	addi	sp,sp,-20
    2068:	dc400115 	stw	r17,4(sp)
    206c:	dc000015 	stw	r16,0(sp)
    2070:	dfc00415 	stw	ra,16(sp)
    2074:	dcc00315 	stw	r19,12(sp)
    2078:	dc800215 	stw	r18,8(sp)
    207c:	00800104 	movi	r2,4
    2080:	2021883a 	mov	r16,r4
    2084:	2823883a 	mov	r17,r5
    2088:	1140012e 	bgeu	r2,r5,2090 <vTaskPrioritySet+0x2c>
    208c:	1023883a 	mov	r17,r2
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
    2090:	0001c200 	call	1c20 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
    2094:	8000011e 	bne	r16,zero,209c <vTaskPrioritySet+0x38>
    2098:	d4201e17 	ldw	r16,-32648(gp)

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
    209c:	80801017 	ldw	r2,64(r16)
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
    20a0:	14402a26 	beq	r2,r17,214c <vTaskPrioritySet+0xe8>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
    20a4:	1440062e 	bgeu	r2,r17,20c0 <vTaskPrioritySet+0x5c>
				{
					if( pxTCB != pxCurrentTCB )
    20a8:	d0e01e17 	ldw	r3,-32648(gp)
    20ac:	80c00726 	beq	r16,r3,20cc <vTaskPrioritySet+0x68>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
    20b0:	d0e01e17 	ldw	r3,-32648(gp)
    20b4:	1c800b17 	ldw	r18,44(r3)
    20b8:	8ca5403a 	cmpgeu	r18,r17,r18
    20bc:	00000406 	br	20d0 <vTaskPrioritySet+0x6c>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
    20c0:	d4a01e17 	ldw	r18,-32648(gp)
    20c4:	84a5003a 	cmpeq	r18,r16,r18
    20c8:	00000106 	br	20d0 <vTaskPrioritySet+0x6c>

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
    20cc:	0025883a 	mov	r18,zero
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
    20d0:	81000b17 	ldw	r4,44(r16)

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    20d4:	1100011e 	bne	r2,r4,20dc <vTaskPrioritySet+0x78>
					{
						pxTCB->uxPriority = uxNewPriority;
    20d8:	84400b15 	stw	r17,44(r16)
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    20dc:	80800617 	ldw	r2,24(r16)
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    20e0:	84401015 	stw	r17,64(r16)
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    20e4:	10000316 	blt	r2,zero,20f4 <vTaskPrioritySet+0x90>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    20e8:	01400144 	movi	r5,5
    20ec:	2c63c83a 	sub	r17,r5,r17
    20f0:	84400615 	stw	r17,24(r16)

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    20f4:	01400504 	movi	r5,20
    20f8:	0002c080 	call	2c08 <__mulsi3>
    20fc:	01000034 	movhi	r4,0
    2100:	80c00517 	ldw	r3,20(r16)
    2104:	211c0404 	addi	r4,r4,28688
    2108:	2085883a 	add	r2,r4,r2
    210c:	2023883a 	mov	r17,r4
    2110:	18800c1e 	bne	r3,r2,2144 <vTaskPrioritySet+0xe0>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2114:	84c00104 	addi	r19,r16,4
    2118:	9809883a 	mov	r4,r19
    211c:	00006500 	call	650 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
    2120:	81000b17 	ldw	r4,44(r16)
    2124:	d0a01817 	ldw	r2,-32672(gp)
    2128:	1100012e 	bgeu	r2,r4,2130 <vTaskPrioritySet+0xcc>
    212c:	d1201815 	stw	r4,-32672(gp)
    2130:	01400504 	movi	r5,20
    2134:	0002c080 	call	2c08 <__mulsi3>
    2138:	8889883a 	add	r4,r17,r2
    213c:	980b883a 	mov	r5,r19
    2140:	00005cc0 	call	5cc <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired == pdTRUE )
    2144:	90000126 	beq	r18,zero,214c <vTaskPrioritySet+0xe8>
				{
					taskYIELD_IF_USING_PREEMPTION();
    2148:	003b683a 	trap	0
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
	}
    214c:	dfc00417 	ldw	ra,16(sp)
    2150:	dcc00317 	ldw	r19,12(sp)
    2154:	dc800217 	ldw	r18,8(sp)
    2158:	dc400117 	ldw	r17,4(sp)
    215c:	dc000017 	ldw	r16,0(sp)
    2160:	dec00504 	addi	sp,sp,20
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
    2164:	0001c501 	jmpi	1c50 <vTaskExitCritical>

00002168 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    2168:	defffc04 	addi	sp,sp,-16
    216c:	dc000015 	stw	r16,0(sp)
    2170:	2021883a 	mov	r16,r4
    2174:	dfc00315 	stw	ra,12(sp)
    2178:	dc800215 	stw	r18,8(sp)
    217c:	dc400115 	stw	r17,4(sp)
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    2180:	0001c200 	call	1c20 <vTaskEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    2184:	8000011e 	bne	r16,zero,218c <vTaskSuspend+0x24>
    2188:	d4201e17 	ldw	r16,-32648(gp)

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    218c:	84800104 	addi	r18,r16,4
    2190:	9009883a 	mov	r4,r18
    2194:	00006500 	call	650 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    2198:	80800a17 	ldw	r2,40(r16)
    219c:	10000226 	beq	r2,zero,21a8 <vTaskSuspend+0x40>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    21a0:	81000604 	addi	r4,r16,24
    21a4:	00006500 	call	650 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    21a8:	04400034 	movhi	r17,0
    21ac:	8c5beb04 	addi	r17,r17,28588
    21b0:	8809883a 	mov	r4,r17
    21b4:	900b883a 	mov	r5,r18
    21b8:	00005cc0 	call	5cc <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    21bc:	0001c500 	call	1c50 <vTaskExitCritical>

		if( pxTCB == pxCurrentTCB )
    21c0:	d0a01e17 	ldw	r2,-32648(gp)
    21c4:	80800f1e 	bne	r16,r2,2204 <vTaskSuspend+0x9c>
		{
			if( xSchedulerRunning != pdFALSE )
    21c8:	d0a01717 	ldw	r2,-32676(gp)
    21cc:	10000226 	beq	r2,zero,21d8 <vTaskSuspend+0x70>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    21d0:	003b683a 	trap	0
    21d4:	00001506 	br	222c <vTaskSuspend+0xc4>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    21d8:	d0a01a17 	ldw	r2,-32664(gp)
    21dc:	88c00017 	ldw	r3,0(r17)
    21e0:	1880021e 	bne	r3,r2,21ec <vTaskSuspend+0x84>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    21e4:	d0201e15 	stw	zero,-32648(gp)
    21e8:	00001006 	br	222c <vTaskSuspend+0xc4>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    21ec:	dfc00317 	ldw	ra,12(sp)
    21f0:	dc800217 	ldw	r18,8(sp)
    21f4:	dc400117 	ldw	r17,4(sp)
    21f8:	dc000017 	ldw	r16,0(sp)
    21fc:	dec00404 	addi	sp,sp,16
					is. */
					pxCurrentTCB = NULL;
				}
				else
				{
					vTaskSwitchContext();
    2200:	00017781 	jmpi	1778 <vTaskSwitchContext>
				}
			}
		}
		else
		{
			if( xSchedulerRunning != pdFALSE )
    2204:	d0a01717 	ldw	r2,-32676(gp)
    2208:	10000826 	beq	r2,zero,222c <vTaskSuspend+0xc4>
			{
				/* A task other than the currently running task was suspended,
				reset the next expected unblock time in case it referred to the
				task that is now in the Suspended state. */
				taskENTER_CRITICAL();
    220c:	0001c200 	call	1c20 <vTaskEnterCritical>
				{
					prvResetNextTaskUnblockTime();
    2210:	000149c0 	call	149c <prvResetNextTaskUnblockTime>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    2214:	dfc00317 	ldw	ra,12(sp)
    2218:	dc800217 	ldw	r18,8(sp)
    221c:	dc400117 	ldw	r17,4(sp)
    2220:	dc000017 	ldw	r16,0(sp)
    2224:	dec00404 	addi	sp,sp,16
				task that is now in the Suspended state. */
				taskENTER_CRITICAL();
				{
					prvResetNextTaskUnblockTime();
				}
				taskEXIT_CRITICAL();
    2228:	0001c501 	jmpi	1c50 <vTaskExitCritical>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    222c:	dfc00317 	ldw	ra,12(sp)
    2230:	dc800217 	ldw	r18,8(sp)
    2234:	dc400117 	ldw	r17,4(sp)
    2238:	dc000017 	ldw	r16,0(sp)
    223c:	dec00404 	addi	sp,sp,16
    2240:	f800283a 	ret

00002244 <vTaskResume>:
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    2244:	20002426 	beq	r4,zero,22d8 <vTaskResume+0x94>
    2248:	d0a01e17 	ldw	r2,-32648(gp)
    224c:	20802226 	beq	r4,r2,22d8 <vTaskResume+0x94>
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
    2250:	defffd04 	addi	sp,sp,-12
    2254:	dfc00215 	stw	ra,8(sp)
    2258:	dc000015 	stw	r16,0(sp)
    225c:	dc400115 	stw	r17,4(sp)
    2260:	2021883a 	mov	r16,r4

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
		{
			taskENTER_CRITICAL();
    2264:	0001c200 	call	1c20 <vTaskEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    2268:	8009883a 	mov	r4,r16
    226c:	00014700 	call	1470 <prvTaskIsTaskSuspended>
    2270:	00c00044 	movi	r3,1
    2274:	10c0131e 	bne	r2,r3,22c4 <vTaskResume+0x80>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
    2278:	84400104 	addi	r17,r16,4
    227c:	8809883a 	mov	r4,r17
    2280:	00006500 	call	650 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    2284:	81000b17 	ldw	r4,44(r16)
    2288:	d0a01817 	ldw	r2,-32672(gp)
    228c:	1100012e 	bgeu	r2,r4,2294 <vTaskResume+0x50>
    2290:	d1201815 	stw	r4,-32672(gp)
    2294:	01400504 	movi	r5,20
    2298:	0002c080 	call	2c08 <__mulsi3>
    229c:	01000034 	movhi	r4,0
    22a0:	211c0404 	addi	r4,r4,28688
    22a4:	2089883a 	add	r4,r4,r2
    22a8:	880b883a 	mov	r5,r17
    22ac:	00005cc0 	call	5cc <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    22b0:	d0a01e17 	ldw	r2,-32648(gp)
    22b4:	80c00b17 	ldw	r3,44(r16)
    22b8:	10800b17 	ldw	r2,44(r2)
    22bc:	18800136 	bltu	r3,r2,22c4 <vTaskResume+0x80>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
    22c0:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    22c4:	dfc00217 	ldw	ra,8(sp)
    22c8:	dc400117 	ldw	r17,4(sp)
    22cc:	dc000017 	ldw	r16,0(sp)
    22d0:	dec00304 	addi	sp,sp,12
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    22d4:	0001c501 	jmpi	1c50 <vTaskExitCritical>
    22d8:	f800283a 	ret

000022dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    22dc:	defffa04 	addi	sp,sp,-24
    22e0:	dfc00515 	stw	ra,20(sp)
    22e4:	dd000415 	stw	r20,16(sp)
    22e8:	dcc00315 	stw	r19,12(sp)
    22ec:	dc800215 	stw	r18,8(sp)
    22f0:	dc400115 	stw	r17,4(sp)
    22f4:	dc000015 	stw	r16,0(sp)
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    22f8:	0001c200 	call	1c20 <vTaskEnterCritical>
	{
		--uxSchedulerSuspended;
    22fc:	d0a01117 	ldw	r2,-32700(gp)
    2300:	10bfffc4 	addi	r2,r2,-1
    2304:	d0a01115 	stw	r2,-32700(gp)

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2308:	d0a01117 	ldw	r2,-32700(gp)
    230c:	10000226 	beq	r2,zero,2318 <xTaskResumeAll+0x3c>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
    2310:	0021883a 	mov	r16,zero
    2314:	00003006 	br	23d8 <xTaskResumeAll+0xfc>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    2318:	d0a01a17 	ldw	r2,-32664(gp)
    231c:	103ffc26 	beq	r2,zero,2310 <xTaskResumeAll+0x34>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    2320:	04400034 	movhi	r17,0
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
    2324:	04c00034 	movhi	r19,0
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    2328:	8c5bf504 	addi	r17,r17,28628
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
    232c:	9cdc0404 	addi	r19,r19,28688

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
					{
						xYieldPending = pdTRUE;
    2330:	05000044 	movi	r20,1
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    2334:	88800017 	ldw	r2,0(r17)
    2338:	10001626 	beq	r2,zero,2394 <xTaskResumeAll+0xb8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    233c:	88800317 	ldw	r2,12(r17)
    2340:	14000317 	ldw	r16,12(r2)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    2344:	81000604 	addi	r4,r16,24
    2348:	00006500 	call	650 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    234c:	84800104 	addi	r18,r16,4
    2350:	9009883a 	mov	r4,r18
    2354:	00006500 	call	650 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    2358:	81000b17 	ldw	r4,44(r16)
    235c:	d0a01817 	ldw	r2,-32672(gp)
    2360:	1100012e 	bgeu	r2,r4,2368 <xTaskResumeAll+0x8c>
    2364:	d1201815 	stw	r4,-32672(gp)
    2368:	01400504 	movi	r5,20
    236c:	0002c080 	call	2c08 <__mulsi3>
    2370:	9889883a 	add	r4,r19,r2
    2374:	900b883a 	mov	r5,r18
    2378:	00005cc0 	call	5cc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    237c:	d0a01e17 	ldw	r2,-32648(gp)
    2380:	80c00b17 	ldw	r3,44(r16)
    2384:	10800b17 	ldw	r2,44(r2)
    2388:	18bfea36 	bltu	r3,r2,2334 <xTaskResumeAll+0x58>
					{
						xYieldPending = pdTRUE;
    238c:	d5201515 	stw	r20,-32684(gp)
    2390:	003fe806 	br	2334 <xTaskResumeAll+0x58>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
    2394:	d0a01617 	ldw	r2,-32680(gp)
    2398:	1000051e 	bne	r2,zero,23b0 <xTaskResumeAll+0xd4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
    239c:	d4201517 	ldw	r16,-32684(gp)
    23a0:	00800044 	movi	r2,1
    23a4:	80bfda1e 	bne	r16,r2,2310 <xTaskResumeAll+0x34>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    23a8:	003b683a 	trap	0
    23ac:	00000a06 	br	23d8 <xTaskResumeAll+0xfc>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
						{
							xYieldPending = pdTRUE;
    23b0:	04000044 	movi	r16,1
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
    23b4:	d0a01617 	ldw	r2,-32680(gp)
    23b8:	103ff826 	beq	r2,zero,239c <xTaskResumeAll+0xc0>
					{
						if( xTaskIncrementTick() != pdFALSE )
    23bc:	000161c0 	call	161c <xTaskIncrementTick>
    23c0:	10000126 	beq	r2,zero,23c8 <xTaskResumeAll+0xec>
						{
							xYieldPending = pdTRUE;
    23c4:	d4201515 	stw	r16,-32684(gp)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
    23c8:	d0a01617 	ldw	r2,-32680(gp)
    23cc:	10bfffc4 	addi	r2,r2,-1
    23d0:	d0a01615 	stw	r2,-32680(gp)
    23d4:	003ff706 	br	23b4 <xTaskResumeAll+0xd8>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    23d8:	0001c500 	call	1c50 <vTaskExitCritical>

	return xAlreadyYielded;
}
    23dc:	8005883a 	mov	r2,r16
    23e0:	dfc00517 	ldw	ra,20(sp)
    23e4:	dd000417 	ldw	r20,16(sp)
    23e8:	dcc00317 	ldw	r19,12(sp)
    23ec:	dc800217 	ldw	r18,8(sp)
    23f0:	dc400117 	ldw	r17,4(sp)
    23f4:	dc000017 	ldw	r16,0(sp)
    23f8:	dec00604 	addi	sp,sp,24
    23fc:	f800283a 	ret

00002400 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    2400:	defffd04 	addi	sp,sp,-12
    2404:	dc400115 	stw	r17,4(sp)
    2408:	dc000015 	stw	r16,0(sp)
    240c:	2023883a 	mov	r17,r4
    2410:	2821883a 	mov	r16,r5
    2414:	dfc00215 	stw	ra,8(sp)

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
    2418:	00015f40 	call	15f4 <vTaskSuspendAll>
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    241c:	88c00017 	ldw	r3,0(r17)

		vTaskSuspendAll();
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    2420:	d0a01917 	ldw	r2,-32668(gp)

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    2424:	1c21883a 	add	r16,r3,r16

			if( xConstTickCount < *pxPreviousWakeTime )
    2428:	10c0022e 	bgeu	r2,r3,2434 <vTaskDelayUntil+0x34>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    242c:	80c0042e 	bgeu	r16,r3,2440 <vTaskDelayUntil+0x40>
    2430:	00000106 	br	2438 <vTaskDelayUntil+0x38>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    2434:	80c00436 	bltu	r16,r3,2448 <vTaskDelayUntil+0x48>
    2438:	1405803a 	cmpltu	r2,r2,r16
    243c:	00000306 	br	244c <vTaskDelayUntil+0x4c>
#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    2440:	0005883a 	mov	r2,zero
    2444:	00000106 	br	244c <vTaskDelayUntil+0x4c>
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
				{
					xShouldDelay = pdTRUE;
    2448:	00800044 	movi	r2,1
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    244c:	8c000015 	stw	r16,0(r17)

			if( xShouldDelay != pdFALSE )
    2450:	10000526 	beq	r2,zero,2468 <vTaskDelayUntil+0x68>
			{
				traceTASK_DELAY_UNTIL();

				/* Remove the task from the ready list before adding it to the
				blocked list as the same list item is used for both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2454:	d1201e17 	ldw	r4,-32648(gp)
    2458:	21000104 	addi	r4,r4,4
    245c:	00006500 	call	650 <uxListRemove>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
    2460:	8009883a 	mov	r4,r16
    2464:	00014c80 	call	14c8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    2468:	00022dc0 	call	22dc <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    246c:	1000011e 	bne	r2,zero,2474 <vTaskDelayUntil+0x74>
		{
			portYIELD_WITHIN_API();
    2470:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2474:	dfc00217 	ldw	ra,8(sp)
    2478:	dc400117 	ldw	r17,4(sp)
    247c:	dc000017 	ldw	r16,0(sp)
    2480:	dec00304 	addi	sp,sp,12
    2484:	f800283a 	ret

00002488 <vTaskDelay>:
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    2488:	20001326 	beq	r4,zero,24d8 <vTaskDelay+0x50>
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    248c:	defffe04 	addi	sp,sp,-8
    2490:	dfc00115 	stw	ra,4(sp)
    2494:	dc000015 	stw	r16,0(sp)
    2498:	2021883a 	mov	r16,r4

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    249c:	00015f40 	call	15f4 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    24a0:	d1201917 	ldw	r4,-32668(gp)
    24a4:	8121883a 	add	r16,r16,r4

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    24a8:	d1201e17 	ldw	r4,-32648(gp)
    24ac:	21000104 	addi	r4,r4,4
    24b0:	00006500 	call	650 <uxListRemove>
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    24b4:	8009883a 	mov	r4,r16
    24b8:	00014c80 	call	14c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    24bc:	00022dc0 	call	22dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    24c0:	1000011e 	bne	r2,zero,24c8 <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
    24c4:	003b683a 	trap	0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    24c8:	dfc00117 	ldw	ra,4(sp)
    24cc:	dc000017 	ldw	r16,0(sp)
    24d0:	dec00204 	addi	sp,sp,8
    24d4:	f800283a 	ret

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
    24d8:	003b683a 	trap	0
    24dc:	f800283a 	ret

000024e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    24e0:	defffd04 	addi	sp,sp,-12
    24e4:	dc400115 	stw	r17,4(sp)
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    24e8:	04400034 	movhi	r17,0
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    24ec:	dfc00215 	stw	ra,8(sp)
    24f0:	dc000015 	stw	r16,0(sp)
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    24f4:	8c5bf004 	addi	r17,r17,28608
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    24f8:	d0a01b17 	ldw	r2,-32660(gp)
    24fc:	103ffe26 	beq	r2,zero,24f8 <prvIdleTask+0x18>
		{
			vTaskSuspendAll();
    2500:	00015f40 	call	15f4 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    2504:	8c000017 	ldw	r16,0(r17)
			}
			( void ) xTaskResumeAll();
    2508:	00022dc0 	call	22dc <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    250c:	803ffa26 	beq	r16,zero,24f8 <prvIdleTask+0x18>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    2510:	0001c200 	call	1c20 <vTaskEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    2514:	00800034 	movhi	r2,0
    2518:	109bf004 	addi	r2,r2,28608
    251c:	10800317 	ldw	r2,12(r2)
    2520:	14000317 	ldw	r16,12(r2)
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    2524:	81000104 	addi	r4,r16,4
    2528:	00006500 	call	650 <uxListRemove>
					--uxCurrentNumberOfTasks;
    252c:	d0a01a17 	ldw	r2,-32664(gp)
    2530:	10bfffc4 	addi	r2,r2,-1
    2534:	d0a01a15 	stw	r2,-32664(gp)
					--uxTasksDeleted;
    2538:	d0a01b17 	ldw	r2,-32660(gp)
    253c:	10bfffc4 	addi	r2,r2,-1
    2540:	d0a01b15 	stw	r2,-32660(gp)
				}
				taskEXIT_CRITICAL();
    2544:	0001c500 	call	1c50 <vTaskExitCritical>
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
    2548:	81000c17 	ldw	r4,48(r16)
    254c:	0000a0c0 	call	a0c <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
    2550:	8009883a 	mov	r4,r16
    2554:	0000a0c0 	call	a0c <vPortFree>
    2558:	003fe706 	br	24f8 <prvIdleTask+0x18>

0000255c <xTaskCheckForTimeOut>:
	pxTimeOut->xTimeOnEntering = xTickCount;
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    255c:	defffd04 	addi	sp,sp,-12
    2560:	dc000115 	stw	r16,4(sp)
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    2564:	d9000015 	stw	r4,0(sp)
	pxTimeOut->xTimeOnEntering = xTickCount;
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    2568:	2821883a 	mov	r16,r5
    256c:	dfc00215 	stw	ra,8(sp)
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    2570:	0001c200 	call	1c20 <vTaskEnterCritical>

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    2574:	80800017 	ldw	r2,0(r16)
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    2578:	d1a01917 	ldw	r6,-32668(gp)

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    257c:	00ffffc4 	movi	r3,-1
    2580:	d9000017 	ldw	r4,0(sp)
    2584:	10c00c26 	beq	r2,r3,25b8 <xTaskCheckForTimeOut+0x5c>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    2588:	d1601417 	ldw	r5,-32688(gp)
    258c:	20c00017 	ldw	r3,0(r4)
    2590:	28c00226 	beq	r5,r3,259c <xTaskCheckForTimeOut+0x40>
    2594:	20c00117 	ldw	r3,4(r4)
    2598:	30c0092e 	bgeu	r6,r3,25c0 <xTaskCheckForTimeOut+0x64>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    259c:	20c00117 	ldw	r3,4(r4)
    25a0:	30cbc83a 	sub	r5,r6,r3
    25a4:	2880062e 	bgeu	r5,r2,25c0 <xTaskCheckForTimeOut+0x64>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    25a8:	1987c83a 	sub	r3,r3,r6
    25ac:	1885883a 	add	r2,r3,r2
    25b0:	80800015 	stw	r2,0(r16)
			vTaskSetTimeOutState( pxTimeOut );
    25b4:	0001a4c0 	call	1a4c <vTaskSetTimeOutState>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
    25b8:	0021883a 	mov	r16,zero
    25bc:	00000106 	br	25c4 <xTaskCheckForTimeOut+0x68>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    25c0:	04000044 	movi	r16,1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
    25c4:	0001c500 	call	1c50 <vTaskExitCritical>

	return xReturn;
}
    25c8:	8005883a 	mov	r2,r16
    25cc:	dfc00217 	ldw	ra,8(sp)
    25d0:	dc000117 	ldw	r16,4(sp)
    25d4:	dec00304 	addi	sp,sp,12
    25d8:	f800283a 	ret

000025dc <uxTaskResetEventItemValue>:

TickType_t uxTaskResetEventItemValue( void )
{
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    25dc:	d0a01e17 	ldw	r2,-32648(gp)

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    25e0:	d1201e17 	ldw	r4,-32648(gp)
    25e4:	d0e01e17 	ldw	r3,-32648(gp)

TickType_t uxTaskResetEventItemValue( void )
{
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    25e8:	10800617 	ldw	r2,24(r2)

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    25ec:	19400b17 	ldw	r5,44(r3)
    25f0:	00c00144 	movi	r3,5
    25f4:	1947c83a 	sub	r3,r3,r5
    25f8:	20c00615 	stw	r3,24(r4)

	return uxReturn;
}
    25fc:	f800283a 	ret

00002600 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    2600:	d0a01e17 	ldw	r2,-32648(gp)
    2604:	10000426 	beq	r2,zero,2618 <pvTaskIncrementMutexHeldCount+0x18>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    2608:	d0e01e17 	ldw	r3,-32648(gp)
    260c:	18801117 	ldw	r2,68(r3)
    2610:	10800044 	addi	r2,r2,1
    2614:	18801115 	stw	r2,68(r3)
		}

		return pxCurrentTCB;
    2618:	d0a01e17 	ldw	r2,-32648(gp)
	}
    261c:	f800283a 	ret

00002620 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    2620:	defffd04 	addi	sp,sp,-12
    2624:	dc400115 	stw	r17,4(sp)
    2628:	dc000015 	stw	r16,0(sp)
    262c:	dfc00215 	stw	ra,8(sp)
    2630:	2023883a 	mov	r17,r4
    2634:	2821883a 	mov	r16,r5
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    2638:	0001c200 	call	1c20 <vTaskEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    263c:	d0a01e17 	ldw	r2,-32648(gp)
    2640:	10801217 	ldw	r2,72(r2)
    2644:	1000131e 	bne	r2,zero,2694 <ulTaskNotifyTake+0x74>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
    2648:	d0a01e17 	ldw	r2,-32648(gp)
    264c:	00c00044 	movi	r3,1
    2650:	10c01315 	stw	r3,76(r2)

				if( xTicksToWait > ( TickType_t ) 0 )
    2654:	80000f26 	beq	r16,zero,2694 <ulTaskNotifyTake+0x74>
				{
					/* The task is going to block.  First it must be removed
					from the ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2658:	d1201e17 	ldw	r4,-32648(gp)
    265c:	21000104 	addi	r4,r4,4
    2660:	00006500 	call	650 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					#if ( INCLUDE_vTaskSuspend == 1 )
					{
						if( xTicksToWait == portMAX_DELAY )
    2664:	00bfffc4 	movi	r2,-1
    2668:	8080061e 	bne	r16,r2,2684 <ulTaskNotifyTake+0x64>
						{
							/* Add the task to the suspended task list instead
							of a delayed task list to ensure the task is not
							woken by a timing event.  It will block
							indefinitely. */
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    266c:	d1601e17 	ldw	r5,-32648(gp)
    2670:	01000034 	movhi	r4,0
    2674:	211beb04 	addi	r4,r4,28588
    2678:	29400104 	addi	r5,r5,4
    267c:	00005cc0 	call	5cc <vListInsertEnd>
    2680:	00000306 	br	2690 <ulTaskNotifyTake+0x70>
						{
							/* Calculate the time at which the task should be
							woken if no notification events occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
    2684:	d1201917 	ldw	r4,-32668(gp)
							prvAddCurrentTaskToDelayedList( xTimeToWake );
    2688:	8109883a 	add	r4,r16,r4
    268c:	00014c80 	call	14c8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    2690:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    2694:	0001c500 	call	1c50 <vTaskExitCritical>

		taskENTER_CRITICAL();
    2698:	0001c200 	call	1c20 <vTaskEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    269c:	d0a01e17 	ldw	r2,-32648(gp)
    26a0:	14001217 	ldw	r16,72(r2)

			if( ulReturn != 0UL )
    26a4:	80000726 	beq	r16,zero,26c4 <ulTaskNotifyTake+0xa4>
			{
				if( xClearCountOnExit != pdFALSE )
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    26a8:	d0a01e17 	ldw	r2,-32648(gp)
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;

			if( ulReturn != 0UL )
			{
				if( xClearCountOnExit != pdFALSE )
    26ac:	88000226 	beq	r17,zero,26b8 <ulTaskNotifyTake+0x98>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    26b0:	10001215 	stw	zero,72(r2)
    26b4:	00000306 	br	26c4 <ulTaskNotifyTake+0xa4>
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
    26b8:	10c01217 	ldw	r3,72(r2)
    26bc:	18ffffc4 	addi	r3,r3,-1
    26c0:	10c01215 	stw	r3,72(r2)
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
    26c4:	d0a01e17 	ldw	r2,-32648(gp)
    26c8:	10001315 	stw	zero,76(r2)
		}
		taskEXIT_CRITICAL();
    26cc:	0001c500 	call	1c50 <vTaskExitCritical>

		return ulReturn;
	}
    26d0:	8005883a 	mov	r2,r16
    26d4:	dfc00217 	ldw	ra,8(sp)
    26d8:	dc400117 	ldw	r17,4(sp)
    26dc:	dc000017 	ldw	r16,0(sp)
    26e0:	dec00304 	addi	sp,sp,12
    26e4:	f800283a 	ret

000026e8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    26e8:	defffb04 	addi	sp,sp,-20
    26ec:	dcc00315 	stw	r19,12(sp)
    26f0:	dc800215 	stw	r18,8(sp)
    26f4:	dc400115 	stw	r17,4(sp)
    26f8:	dc000015 	stw	r16,0(sp)
    26fc:	dfc00415 	stw	ra,16(sp)
    2700:	2025883a 	mov	r18,r4
    2704:	2823883a 	mov	r17,r5
    2708:	3027883a 	mov	r19,r6
    270c:	3821883a 	mov	r16,r7
	TickType_t xTimeToWake;
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    2710:	0001c200 	call	1c20 <vTaskEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->eNotifyState != eNotified )
    2714:	d0a01e17 	ldw	r2,-32648(gp)
    2718:	10c01317 	ldw	r3,76(r2)
    271c:	00800084 	movi	r2,2
    2720:	18801826 	beq	r3,r2,2784 <xTaskNotifyWait+0x9c>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    2724:	d0e01e17 	ldw	r3,-32648(gp)
    2728:	0488303a 	nor	r4,zero,r18
    272c:	18801217 	ldw	r2,72(r3)
    2730:	2088703a 	and	r4,r4,r2
    2734:	19001215 	stw	r4,72(r3)

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
    2738:	d0a01e17 	ldw	r2,-32648(gp)
    273c:	00c00044 	movi	r3,1
    2740:	10c01315 	stw	r3,76(r2)

				if( xTicksToWait > ( TickType_t ) 0 )
    2744:	80000f26 	beq	r16,zero,2784 <xTaskNotifyWait+0x9c>
				{
					/* The task is going to block.  First it must be removed
					from the	ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2748:	d1201e17 	ldw	r4,-32648(gp)
    274c:	21000104 	addi	r4,r4,4
    2750:	00006500 	call	650 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					#if ( INCLUDE_vTaskSuspend == 1 )
					{
						if( xTicksToWait == portMAX_DELAY )
    2754:	00bfffc4 	movi	r2,-1
    2758:	8080061e 	bne	r16,r2,2774 <xTaskNotifyWait+0x8c>
						{
							/* Add the task to the suspended task list instead
							of a delayed task list to ensure the task is not
							woken by a timing event.  It will block
							indefinitely. */
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    275c:	d1601e17 	ldw	r5,-32648(gp)
    2760:	01000034 	movhi	r4,0
    2764:	211beb04 	addi	r4,r4,28588
    2768:	29400104 	addi	r5,r5,4
    276c:	00005cc0 	call	5cc <vListInsertEnd>
    2770:	00000306 	br	2780 <xTaskNotifyWait+0x98>
						{
							/* Calculate the time at which the task should be
							woken if no notification events occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
    2774:	d1201917 	ldw	r4,-32668(gp)
							prvAddCurrentTaskToDelayedList( xTimeToWake );
    2778:	8109883a 	add	r4,r16,r4
    277c:	00014c80 	call	14c8 <prvAddCurrentTaskToDelayedList>
					
					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    2780:	003b683a 	trap	0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    2784:	0001c500 	call	1c50 <vTaskExitCritical>

		taskENTER_CRITICAL();
    2788:	0001c200 	call	1c20 <vTaskEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();
			
			if( pulNotificationValue != NULL )
    278c:	98000326 	beq	r19,zero,279c <xTaskNotifyWait+0xb4>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    2790:	d0a01e17 	ldw	r2,-32648(gp)
    2794:	10801217 	ldw	r2,72(r2)
    2798:	98800015 	stw	r2,0(r19)

			/* If eNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
    279c:	d0a01e17 	ldw	r2,-32648(gp)
    27a0:	04000044 	movi	r16,1
    27a4:	10801317 	ldw	r2,76(r2)
    27a8:	14000626 	beq	r2,r16,27c4 <xTaskNotifyWait+0xdc>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    27ac:	d0e01e17 	ldw	r3,-32648(gp)
    27b0:	044a303a 	nor	r5,zero,r17
    27b4:	18801217 	ldw	r2,72(r3)
    27b8:	288a703a 	and	r5,r5,r2
    27bc:	19401215 	stw	r5,72(r3)
    27c0:	00000106 	br	27c8 <xTaskNotifyWait+0xe0>
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
    27c4:	0021883a 	mov	r16,zero
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
				xReturn = pdTRUE;
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
    27c8:	d0a01e17 	ldw	r2,-32648(gp)
    27cc:	10001315 	stw	zero,76(r2)
		}
		taskEXIT_CRITICAL();
    27d0:	0001c500 	call	1c50 <vTaskExitCritical>

		return xReturn;
	}
    27d4:	8005883a 	mov	r2,r16
    27d8:	dfc00417 	ldw	ra,16(sp)
    27dc:	dcc00317 	ldw	r19,12(sp)
    27e0:	dc800217 	ldw	r18,8(sp)
    27e4:	dc400117 	ldw	r17,4(sp)
    27e8:	dc000017 	ldw	r16,0(sp)
    27ec:	dec00504 	addi	sp,sp,20
    27f0:	f800283a 	ret

000027f4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
    27f4:	defffb04 	addi	sp,sp,-20
    27f8:	dcc00315 	stw	r19,12(sp)
    27fc:	3827883a 	mov	r19,r7
    2800:	dc800215 	stw	r18,8(sp)
    2804:	dc400115 	stw	r17,4(sp)
    2808:	dc000015 	stw	r16,0(sp)
    280c:	dfc00415 	stw	ra,16(sp)
    2810:	2021883a 	mov	r16,r4
    2814:	2825883a 	mov	r18,r5
    2818:	3023883a 	mov	r17,r6
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
    281c:	0001c200 	call	1c20 <vTaskEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
    2820:	98000226 	beq	r19,zero,282c <xTaskGenericNotify+0x38>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    2824:	80801217 	ldw	r2,72(r16)
    2828:	98800015 	stw	r2,0(r19)
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
    282c:	80c01317 	ldw	r3,76(r16)

			pxTCB->eNotifyState = eNotified;
    2830:	00800084 	movi	r2,2
    2834:	80801315 	stw	r2,76(r16)

			switch( eAction )
    2838:	88800b26 	beq	r17,r2,2868 <xTaskGenericNotify+0x74>
    283c:	14400536 	bltu	r2,r17,2854 <xTaskGenericNotify+0x60>
    2840:	00800044 	movi	r2,1
    2844:	88800e1e 	bne	r17,r2,2880 <xTaskGenericNotify+0x8c>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    2848:	81401217 	ldw	r5,72(r16)
    284c:	9164b03a 	or	r18,r18,r5
    2850:	00000a06 	br	287c <xTaskGenericNotify+0x88>

			eOriginalNotifyState = pxTCB->eNotifyState;

			pxTCB->eNotifyState = eNotified;

			switch( eAction )
    2854:	010000c4 	movi	r4,3
    2858:	89000826 	beq	r17,r4,287c <xTaskGenericNotify+0x88>
    285c:	01000104 	movi	r4,4
    2860:	89000526 	beq	r17,r4,2878 <xTaskGenericNotify+0x84>
    2864:	00000606 	br	2880 <xTaskGenericNotify+0x8c>
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    2868:	80801217 	ldw	r2,72(r16)
    286c:	10800044 	addi	r2,r2,1
    2870:	80801215 	stw	r2,72(r16)
					break;
    2874:	00000206 	br	2880 <xTaskGenericNotify+0x8c>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
    2878:	18801826 	beq	r3,r2,28dc <xTaskGenericNotify+0xe8>
					{
						pxTCB->ulNotifiedValue = ulValue;
    287c:	84801215 	stw	r18,72(r16)

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
    2880:	00800044 	movi	r2,1
    2884:	1880131e 	bne	r3,r2,28d4 <xTaskGenericNotify+0xe0>
			{
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    2888:	84400104 	addi	r17,r16,4
    288c:	8809883a 	mov	r4,r17
    2890:	00006500 	call	650 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    2894:	81000b17 	ldw	r4,44(r16)
    2898:	d0a01817 	ldw	r2,-32672(gp)
    289c:	1100012e 	bgeu	r2,r4,28a4 <xTaskGenericNotify+0xb0>
    28a0:	d1201815 	stw	r4,-32672(gp)
    28a4:	01400504 	movi	r5,20
    28a8:	0002c080 	call	2c08 <__mulsi3>
    28ac:	01000034 	movhi	r4,0
    28b0:	211c0404 	addi	r4,r4,28688
    28b4:	2089883a 	add	r4,r4,r2
    28b8:	880b883a 	mov	r5,r17
    28bc:	00005cc0 	call	5cc <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    28c0:	d0e01e17 	ldw	r3,-32648(gp)
    28c4:	80800b17 	ldw	r2,44(r16)
    28c8:	18c00b17 	ldw	r3,44(r3)
    28cc:	1880012e 	bgeu	r3,r2,28d4 <xTaskGenericNotify+0xe0>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
    28d0:	003b683a 	trap	0
    28d4:	04000044 	movi	r16,1
    28d8:	00000106 	br	28e0 <xTaskGenericNotify+0xec>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    28dc:	0021883a 	mov	r16,zero
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    28e0:	0001c500 	call	1c50 <vTaskExitCritical>

		return xReturn;
	}
    28e4:	8005883a 	mov	r2,r16
    28e8:	dfc00417 	ldw	ra,16(sp)
    28ec:	dcc00317 	ldw	r19,12(sp)
    28f0:	dc800217 	ldw	r18,8(sp)
    28f4:	dc400117 	ldw	r17,4(sp)
    28f8:	dc000017 	ldw	r16,0(sp)
    28fc:	dec00504 	addi	sp,sp,20
    2900:	f800283a 	ret

00002904 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
    2904:	defffc04 	addi	sp,sp,-16
    2908:	dc400115 	stw	r17,4(sp)
    290c:	dfc00315 	stw	ra,12(sp)
    2910:	dc800215 	stw	r18,8(sp)
    2914:	dc000015 	stw	r16,0(sp)
    2918:	dc400417 	ldw	r17,16(sp)

		pxTCB = ( TCB_t * ) xTaskToNotify;

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( pulPreviousNotificationValue != NULL )
    291c:	38000226 	beq	r7,zero,2928 <xTaskGenericNotifyFromISR+0x24>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    2920:	20801217 	ldw	r2,72(r4)
    2924:	38800015 	stw	r2,0(r7)
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
    2928:	20c01317 	ldw	r3,76(r4)
			pxTCB->eNotifyState = eNotified;
    292c:	00800084 	movi	r2,2
    2930:	20801315 	stw	r2,76(r4)

			switch( eAction )
    2934:	30800b26 	beq	r6,r2,2964 <xTaskGenericNotifyFromISR+0x60>
    2938:	11800536 	bltu	r2,r6,2950 <xTaskGenericNotifyFromISR+0x4c>
    293c:	00800044 	movi	r2,1
    2940:	30800e1e 	bne	r6,r2,297c <xTaskGenericNotifyFromISR+0x78>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    2944:	20801217 	ldw	r2,72(r4)
    2948:	288ab03a 	or	r5,r5,r2
    294c:	00000a06 	br	2978 <xTaskGenericNotifyFromISR+0x74>
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
			pxTCB->eNotifyState = eNotified;

			switch( eAction )
    2950:	01c000c4 	movi	r7,3
    2954:	31c00826 	beq	r6,r7,2978 <xTaskGenericNotifyFromISR+0x74>
    2958:	01c00104 	movi	r7,4
    295c:	31c00526 	beq	r6,r7,2974 <xTaskGenericNotifyFromISR+0x70>
    2960:	00000606 	br	297c <xTaskGenericNotifyFromISR+0x78>
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    2964:	20801217 	ldw	r2,72(r4)
    2968:	10800044 	addi	r2,r2,1
    296c:	20801215 	stw	r2,72(r4)
					break;
    2970:	00000206 	br	297c <xTaskGenericNotifyFromISR+0x78>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
    2974:	18802226 	beq	r3,r2,2a00 <xTaskGenericNotifyFromISR+0xfc>
					{
						pxTCB->ulNotifiedValue = ulValue;
    2978:	21401215 	stw	r5,72(r4)

			traceTASK_NOTIFY_FROM_ISR();
			
			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
    297c:	00800044 	movi	r2,1
    2980:	18800226 	beq	r3,r2,298c <xTaskGenericNotifyFromISR+0x88>
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
    2984:	00800044 	movi	r2,1
    2988:	00001e06 	br	2a04 <xTaskGenericNotifyFromISR+0x100>
			if( eOriginalNotifyState == eWaitingNotification )
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    298c:	d0a01117 	ldw	r2,-32700(gp)
    2990:	2021883a 	mov	r16,r4
    2994:	10000e1e 	bne	r2,zero,29d0 <xTaskGenericNotifyFromISR+0xcc>
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    2998:	24800104 	addi	r18,r4,4
    299c:	9009883a 	mov	r4,r18
    29a0:	00006500 	call	650 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    29a4:	81000b17 	ldw	r4,44(r16)
    29a8:	d0a01817 	ldw	r2,-32672(gp)
    29ac:	1100012e 	bgeu	r2,r4,29b4 <xTaskGenericNotifyFromISR+0xb0>
    29b0:	d1201815 	stw	r4,-32672(gp)
    29b4:	01400504 	movi	r5,20
    29b8:	0002c080 	call	2c08 <__mulsi3>
    29bc:	01000034 	movhi	r4,0
    29c0:	211c0404 	addi	r4,r4,28688
    29c4:	2089883a 	add	r4,r4,r2
    29c8:	900b883a 	mov	r5,r18
    29cc:	00000306 	br	29dc <xTaskGenericNotifyFromISR+0xd8>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    29d0:	01000034 	movhi	r4,0
    29d4:	211bf504 	addi	r4,r4,28628
    29d8:	81400604 	addi	r5,r16,24
    29dc:	00005cc0 	call	5cc <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    29e0:	d0e01e17 	ldw	r3,-32648(gp)
    29e4:	80800b17 	ldw	r2,44(r16)
    29e8:	18c00b17 	ldw	r3,44(r3)
    29ec:	18bfe52e 	bgeu	r3,r2,2984 <xTaskGenericNotifyFromISR+0x80>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    29f0:	883fe426 	beq	r17,zero,2984 <xTaskGenericNotifyFromISR+0x80>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    29f4:	00800044 	movi	r2,1
    29f8:	88800015 	stw	r2,0(r17)
    29fc:	00000106 	br	2a04 <xTaskGenericNotifyFromISR+0x100>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    2a00:	0005883a 	mov	r2,zero
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
	}
    2a04:	dfc00317 	ldw	ra,12(sp)
    2a08:	dc800217 	ldw	r18,8(sp)
    2a0c:	dc400117 	ldw	r17,4(sp)
    2a10:	dc000017 	ldw	r16,0(sp)
    2a14:	dec00404 	addi	sp,sp,16
    2a18:	f800283a 	ret

00002a1c <vTaskNotifyGiveFromISR>:
		pxTCB = ( TCB_t * ) xTaskToNotify;

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
			pxTCB->eNotifyState = eNotified;
    2a1c:	00800084 	movi	r2,2

		pxTCB = ( TCB_t * ) xTaskToNotify;

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
    2a20:	20c01317 	ldw	r3,76(r4)
			pxTCB->eNotifyState = eNotified;
    2a24:	20801315 	stw	r2,76(r4)

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
    2a28:	20801217 	ldw	r2,72(r4)
    2a2c:	10800044 	addi	r2,r2,1
    2a30:	20801215 	stw	r2,72(r4)
			
			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
    2a34:	00800044 	movi	r2,1
    2a38:	1880271e 	bne	r3,r2,2ad8 <vTaskNotifyGiveFromISR+0xbc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2a3c:	d0a01117 	ldw	r2,-32700(gp)
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
    2a40:	defffc04 	addi	sp,sp,-16
    2a44:	dc400115 	stw	r17,4(sp)
    2a48:	dc000015 	stw	r16,0(sp)
    2a4c:	dfc00315 	stw	ra,12(sp)
    2a50:	dc800215 	stw	r18,8(sp)
    2a54:	2823883a 	mov	r17,r5
    2a58:	2021883a 	mov	r16,r4
			if( eOriginalNotifyState == eWaitingNotification )
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2a5c:	10000e1e 	bne	r2,zero,2a98 <vTaskNotifyGiveFromISR+0x7c>
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    2a60:	24800104 	addi	r18,r4,4
    2a64:	9009883a 	mov	r4,r18
    2a68:	00006500 	call	650 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    2a6c:	81000b17 	ldw	r4,44(r16)
    2a70:	d0a01817 	ldw	r2,-32672(gp)
    2a74:	1100012e 	bgeu	r2,r4,2a7c <vTaskNotifyGiveFromISR+0x60>
    2a78:	d1201815 	stw	r4,-32672(gp)
    2a7c:	01400504 	movi	r5,20
    2a80:	0002c080 	call	2c08 <__mulsi3>
    2a84:	01000034 	movhi	r4,0
    2a88:	211c0404 	addi	r4,r4,28688
    2a8c:	2089883a 	add	r4,r4,r2
    2a90:	900b883a 	mov	r5,r18
    2a94:	00000306 	br	2aa4 <vTaskNotifyGiveFromISR+0x88>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    2a98:	01000034 	movhi	r4,0
    2a9c:	211bf504 	addi	r4,r4,28628
    2aa0:	81400604 	addi	r5,r16,24
    2aa4:	00005cc0 	call	5cc <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    2aa8:	d0e01e17 	ldw	r3,-32648(gp)
    2aac:	80800b17 	ldw	r2,44(r16)
    2ab0:	18c00b17 	ldw	r3,44(r3)
    2ab4:	1880032e 	bgeu	r3,r2,2ac4 <vTaskNotifyGiveFromISR+0xa8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    2ab8:	88000226 	beq	r17,zero,2ac4 <vTaskNotifyGiveFromISR+0xa8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    2abc:	00800044 	movi	r2,1
    2ac0:	88800015 	stw	r2,0(r17)
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
    2ac4:	dfc00317 	ldw	ra,12(sp)
    2ac8:	dc800217 	ldw	r18,8(sp)
    2acc:	dc400117 	ldw	r17,4(sp)
    2ad0:	dc000017 	ldw	r16,0(sp)
    2ad4:	dec00404 	addi	sp,sp,16
    2ad8:	f800283a 	ret

00002adc <udivmodsi4>:
    2adc:	2900182e 	bgeu	r5,r4,2b40 <udivmodsi4+0x64>
    2ae0:	28001716 	blt	r5,zero,2b40 <udivmodsi4+0x64>
    2ae4:	00800804 	movi	r2,32
    2ae8:	00c00044 	movi	r3,1
    2aec:	00000206 	br	2af8 <udivmodsi4+0x1c>
    2af0:	10001126 	beq	r2,zero,2b38 <udivmodsi4+0x5c>
    2af4:	28000516 	blt	r5,zero,2b0c <udivmodsi4+0x30>
    2af8:	294b883a 	add	r5,r5,r5
    2afc:	10bfffc4 	addi	r2,r2,-1
    2b00:	18c7883a 	add	r3,r3,r3
    2b04:	293ffa36 	bltu	r5,r4,2af0 <udivmodsi4+0x14>
    2b08:	18000b26 	beq	r3,zero,2b38 <udivmodsi4+0x5c>
    2b0c:	0005883a 	mov	r2,zero
    2b10:	21400236 	bltu	r4,r5,2b1c <udivmodsi4+0x40>
    2b14:	2149c83a 	sub	r4,r4,r5
    2b18:	10c4b03a 	or	r2,r2,r3
    2b1c:	1806d07a 	srli	r3,r3,1
    2b20:	280ad07a 	srli	r5,r5,1
    2b24:	183ffa1e 	bne	r3,zero,2b10 <udivmodsi4+0x34>
    2b28:	3000011e 	bne	r6,zero,2b30 <udivmodsi4+0x54>
    2b2c:	f800283a 	ret
    2b30:	2005883a 	mov	r2,r4
    2b34:	f800283a 	ret
    2b38:	0005883a 	mov	r2,zero
    2b3c:	003ffa06 	br	2b28 <udivmodsi4+0x4c>
    2b40:	00c00044 	movi	r3,1
    2b44:	003ff106 	br	2b0c <udivmodsi4+0x30>

00002b48 <__divsi3>:
    2b48:	defffe04 	addi	sp,sp,-8
    2b4c:	dfc00115 	stw	ra,4(sp)
    2b50:	dc000015 	stw	r16,0(sp)
    2b54:	20000b16 	blt	r4,zero,2b84 <__divsi3+0x3c>
    2b58:	0021883a 	mov	r16,zero
    2b5c:	28000c16 	blt	r5,zero,2b90 <__divsi3+0x48>
    2b60:	000d883a 	mov	r6,zero
    2b64:	0002adc0 	call	2adc <udivmodsi4>
    2b68:	0407c83a 	sub	r3,zero,r16
    2b6c:	1884f03a 	xor	r2,r3,r2
    2b70:	1405883a 	add	r2,r2,r16
    2b74:	dfc00117 	ldw	ra,4(sp)
    2b78:	dc000017 	ldw	r16,0(sp)
    2b7c:	dec00204 	addi	sp,sp,8
    2b80:	f800283a 	ret
    2b84:	0109c83a 	sub	r4,zero,r4
    2b88:	04000044 	movi	r16,1
    2b8c:	283ff40e 	bge	r5,zero,2b60 <__divsi3+0x18>
    2b90:	014bc83a 	sub	r5,zero,r5
    2b94:	8400005c 	xori	r16,r16,1
    2b98:	003ff106 	br	2b60 <__divsi3+0x18>

00002b9c <__modsi3>:
    2b9c:	defffd04 	addi	sp,sp,-12
    2ba0:	dfc00215 	stw	ra,8(sp)
    2ba4:	dc400115 	stw	r17,4(sp)
    2ba8:	dc000015 	stw	r16,0(sp)
    2bac:	20000c16 	blt	r4,zero,2be0 <__modsi3+0x44>
    2bb0:	0023883a 	mov	r17,zero
    2bb4:	0021883a 	mov	r16,zero
    2bb8:	28000d16 	blt	r5,zero,2bf0 <__modsi3+0x54>
    2bbc:	01800044 	movi	r6,1
    2bc0:	0002adc0 	call	2adc <udivmodsi4>
    2bc4:	1404f03a 	xor	r2,r2,r16
    2bc8:	8885883a 	add	r2,r17,r2
    2bcc:	dfc00217 	ldw	ra,8(sp)
    2bd0:	dc400117 	ldw	r17,4(sp)
    2bd4:	dc000017 	ldw	r16,0(sp)
    2bd8:	dec00304 	addi	sp,sp,12
    2bdc:	f800283a 	ret
    2be0:	0109c83a 	sub	r4,zero,r4
    2be4:	04400044 	movi	r17,1
    2be8:	043fffc4 	movi	r16,-1
    2bec:	283ff30e 	bge	r5,zero,2bbc <__modsi3+0x20>
    2bf0:	014bc83a 	sub	r5,zero,r5
    2bf4:	003ff106 	br	2bbc <__modsi3+0x20>

00002bf8 <__udivsi3>:
    2bf8:	000d883a 	mov	r6,zero
    2bfc:	0002adc1 	jmpi	2adc <udivmodsi4>

00002c00 <__umodsi3>:
    2c00:	01800044 	movi	r6,1
    2c04:	0002adc1 	jmpi	2adc <udivmodsi4>

00002c08 <__mulsi3>:
    2c08:	0005883a 	mov	r2,zero
    2c0c:	20000726 	beq	r4,zero,2c2c <__mulsi3+0x24>
    2c10:	20c0004c 	andi	r3,r4,1
    2c14:	2008d07a 	srli	r4,r4,1
    2c18:	18000126 	beq	r3,zero,2c20 <__mulsi3+0x18>
    2c1c:	1145883a 	add	r2,r2,r5
    2c20:	294b883a 	add	r5,r5,r5
    2c24:	203ffa1e 	bne	r4,zero,2c10 <__mulsi3+0x8>
    2c28:	f800283a 	ret
    2c2c:	f800283a 	ret

00002c30 <memcpy>:
    2c30:	2005883a 	mov	r2,r4
    2c34:	0007883a 	mov	r3,zero
    2c38:	19800626 	beq	r3,r6,2c54 <memcpy+0x24>
    2c3c:	28c9883a 	add	r4,r5,r3
    2c40:	21c00003 	ldbu	r7,0(r4)
    2c44:	10c9883a 	add	r4,r2,r3
    2c48:	18c00044 	addi	r3,r3,1
    2c4c:	21c00005 	stb	r7,0(r4)
    2c50:	003ff906 	br	2c38 <memcpy+0x8>
    2c54:	f800283a 	ret

00002c58 <memset>:
    2c58:	2005883a 	mov	r2,r4
    2c5c:	2007883a 	mov	r3,r4
    2c60:	218d883a 	add	r6,r4,r6
    2c64:	19800326 	beq	r3,r6,2c74 <memset+0x1c>
    2c68:	19400005 	stb	r5,0(r3)
    2c6c:	18c00044 	addi	r3,r3,1
    2c70:	003ffc06 	br	2c64 <memset+0xc>
    2c74:	f800283a 	ret

00002c78 <srand>:
    2c78:	d0a01f04 	addi	r2,gp,-32644
    2c7c:	11000015 	stw	r4,0(r2)
    2c80:	10000115 	stw	zero,4(r2)
    2c84:	f800283a 	ret

00002c88 <rand>:
    2c88:	defffe04 	addi	sp,sp,-8
    2c8c:	dc000015 	stw	r16,0(sp)
    2c90:	d4202004 	addi	r16,gp,-32640
    2c94:	d1201f17 	ldw	r4,-32644(gp)
    2c98:	81400017 	ldw	r5,0(r16)
    2c9c:	01932574 	movhi	r6,19605
    2ca0:	01d614b4 	movhi	r7,22610
    2ca4:	319fcb44 	addi	r6,r6,32557
    2ca8:	39fd0b44 	addi	r7,r7,-3027
    2cac:	dfc00115 	stw	ra,4(sp)
    2cb0:	0002ce40 	call	2ce4 <__muldi3>
    2cb4:	11000044 	addi	r4,r2,1
    2cb8:	2085803a 	cmpltu	r2,r4,r2
    2cbc:	10c7883a 	add	r3,r2,r3
    2cc0:	00a00034 	movhi	r2,32768
    2cc4:	10bfffc4 	addi	r2,r2,-1
    2cc8:	1884703a 	and	r2,r3,r2
    2ccc:	d1201f15 	stw	r4,-32644(gp)
    2cd0:	80c00015 	stw	r3,0(r16)
    2cd4:	dfc00117 	ldw	ra,4(sp)
    2cd8:	dc000017 	ldw	r16,0(sp)
    2cdc:	dec00204 	addi	sp,sp,8
    2ce0:	f800283a 	ret

00002ce4 <__muldi3>:
    2ce4:	defff604 	addi	sp,sp,-40
    2ce8:	dd800615 	stw	r22,24(sp)
    2cec:	dd400515 	stw	r21,20(sp)
    2cf0:	25bfffcc 	andi	r22,r4,65535
    2cf4:	357fffcc 	andi	r21,r6,65535
    2cf8:	dc400115 	stw	r17,4(sp)
    2cfc:	2022d43a 	srli	r17,r4,16
    2d00:	dcc00315 	stw	r19,12(sp)
    2d04:	dc800215 	stw	r18,8(sp)
    2d08:	2027883a 	mov	r19,r4
    2d0c:	2825883a 	mov	r18,r5
    2d10:	a809883a 	mov	r4,r21
    2d14:	b00b883a 	mov	r5,r22
    2d18:	dfc00915 	stw	ra,36(sp)
    2d1c:	df000815 	stw	fp,32(sp)
    2d20:	ddc00715 	stw	r23,28(sp)
    2d24:	3839883a 	mov	fp,r7
    2d28:	302ed43a 	srli	r23,r6,16
    2d2c:	dd000415 	stw	r20,16(sp)
    2d30:	dc000015 	stw	r16,0(sp)
    2d34:	3029883a 	mov	r20,r6
    2d38:	0002c080 	call	2c08 <__mulsi3>
    2d3c:	a809883a 	mov	r4,r21
    2d40:	880b883a 	mov	r5,r17
    2d44:	1021883a 	mov	r16,r2
    2d48:	0002c080 	call	2c08 <__mulsi3>
    2d4c:	880b883a 	mov	r5,r17
    2d50:	b809883a 	mov	r4,r23
    2d54:	102b883a 	mov	r21,r2
    2d58:	0002c080 	call	2c08 <__mulsi3>
    2d5c:	b809883a 	mov	r4,r23
    2d60:	b00b883a 	mov	r5,r22
    2d64:	1023883a 	mov	r17,r2
    2d68:	0002c080 	call	2c08 <__mulsi3>
    2d6c:	8012d43a 	srli	r9,r16,16
    2d70:	a885883a 	add	r2,r21,r2
    2d74:	1251883a 	add	r8,r2,r9
    2d78:	4540022e 	bgeu	r8,r21,2d84 <__muldi3+0xa0>
    2d7c:	00800074 	movhi	r2,1
    2d80:	88a3883a 	add	r17,r17,r2
    2d84:	4006d43a 	srli	r3,r8,16
    2d88:	4010943a 	slli	r8,r8,16
    2d8c:	9809883a 	mov	r4,r19
    2d90:	e00b883a 	mov	r5,fp
    2d94:	843fffcc 	andi	r16,r16,65535
    2d98:	88e3883a 	add	r17,r17,r3
    2d9c:	4421883a 	add	r16,r8,r16
    2da0:	0002c080 	call	2c08 <__mulsi3>
    2da4:	a009883a 	mov	r4,r20
    2da8:	900b883a 	mov	r5,r18
    2dac:	1027883a 	mov	r19,r2
    2db0:	0002c080 	call	2c08 <__mulsi3>
    2db4:	9885883a 	add	r2,r19,r2
    2db8:	1447883a 	add	r3,r2,r17
    2dbc:	8005883a 	mov	r2,r16
    2dc0:	dfc00917 	ldw	ra,36(sp)
    2dc4:	df000817 	ldw	fp,32(sp)
    2dc8:	ddc00717 	ldw	r23,28(sp)
    2dcc:	dd800617 	ldw	r22,24(sp)
    2dd0:	dd400517 	ldw	r21,20(sp)
    2dd4:	dd000417 	ldw	r20,16(sp)
    2dd8:	dcc00317 	ldw	r19,12(sp)
    2ddc:	dc800217 	ldw	r18,8(sp)
    2de0:	dc400117 	ldw	r17,4(sp)
    2de4:	dc000017 	ldw	r16,0(sp)
    2de8:	dec00a04 	addi	sp,sp,40
    2dec:	f800283a 	ret

00002df0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    2df0:	deffff04 	addi	sp,sp,-4
    2df4:	01000034 	movhi	r4,0
    2df8:	01400034 	movhi	r5,0
    2dfc:	dfc00015 	stw	ra,0(sp)
    2e00:	210d1504 	addi	r4,r4,13396
    2e04:	294d1e04 	addi	r5,r5,13432

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2e08:	2140061e 	bne	r4,r5,2e24 <alt_load+0x34>
    2e0c:	01000034 	movhi	r4,0
    2e10:	01400034 	movhi	r5,0
    2e14:	21000804 	addi	r4,r4,32
    2e18:	29400804 	addi	r5,r5,32
    2e1c:	2140141e 	bne	r4,r5,2e70 <alt_load+0x80>
    2e20:	00000d06 	br	2e58 <alt_load+0x68>
    2e24:	00c00034 	movhi	r3,0
    2e28:	18cd1e04 	addi	r3,r3,13432
    2e2c:	00bfff04 	movi	r2,-4
    2e30:	1907c83a 	sub	r3,r3,r4
    2e34:	1886703a 	and	r3,r3,r2
    2e38:	0005883a 	mov	r2,zero
  {
    while( to != end )
    2e3c:	10fff326 	beq	r2,r3,2e0c <alt_load+0x1c>
    2e40:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    2e44:	39c00017 	ldw	r7,0(r7)
    2e48:	110d883a 	add	r6,r2,r4
    2e4c:	10800104 	addi	r2,r2,4
    2e50:	31c00015 	stw	r7,0(r6)
    2e54:	003ff906 	br	2e3c <alt_load+0x4c>
    2e58:	01000034 	movhi	r4,0
    2e5c:	01400034 	movhi	r5,0
    2e60:	210cec04 	addi	r4,r4,13232
    2e64:	294cec04 	addi	r5,r5,13232

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2e68:	2140121e 	bne	r4,r5,2eb4 <alt_load+0xc4>
    2e6c:	00000d06 	br	2ea4 <alt_load+0xb4>
    2e70:	00c00034 	movhi	r3,0
    2e74:	18c07704 	addi	r3,r3,476
    2e78:	00bfff04 	movi	r2,-4
    2e7c:	1907c83a 	sub	r3,r3,r4
    2e80:	1886703a 	and	r3,r3,r2
    2e84:	0005883a 	mov	r2,zero
  {
    while( to != end )
    2e88:	10fff326 	beq	r2,r3,2e58 <alt_load+0x68>
    2e8c:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    2e90:	39c00017 	ldw	r7,0(r7)
    2e94:	110d883a 	add	r6,r2,r4
    2e98:	10800104 	addi	r2,r2,4
    2e9c:	31c00015 	stw	r7,0(r6)
    2ea0:	003ff906 	br	2e88 <alt_load+0x98>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    2ea4:	00032680 	call	3268 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    2ea8:	dfc00017 	ldw	ra,0(sp)
    2eac:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    2eb0:	00033581 	jmpi	3358 <alt_icache_flush_all>
    2eb4:	00c00034 	movhi	r3,0
    2eb8:	18cd1504 	addi	r3,r3,13396
    2ebc:	00bfff04 	movi	r2,-4
    2ec0:	1907c83a 	sub	r3,r3,r4
    2ec4:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2ec8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    2ecc:	10fff526 	beq	r2,r3,2ea4 <alt_load+0xb4>
    2ed0:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    2ed4:	39c00017 	ldw	r7,0(r7)
    2ed8:	110d883a 	add	r6,r2,r4
    2edc:	10800104 	addi	r2,r2,4
    2ee0:	31c00015 	stw	r7,0(r6)
    2ee4:	003ff906 	br	2ecc <alt_load+0xdc>

00002ee8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2ee8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2eec:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2ef0:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2ef4:	00031000 	call	3100 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    2ef8:	00031200 	call	3120 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    2efc:	d1202417 	ldw	r4,-32624(gp)
    2f00:	d1602317 	ldw	r5,-32628(gp)
    2f04:	d1a02217 	ldw	r6,-32632(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    2f08:	dfc00017 	ldw	ra,0(sp)
    2f0c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    2f10:	00007481 	jmpi	748 <main>

00002f14 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    2f14:	defff204 	addi	sp,sp,-56
    2f18:	dfc00a15 	stw	ra,40(sp)
    2f1c:	df000915 	stw	fp,36(sp)
    2f20:	ddc00815 	stw	r23,32(sp)
    2f24:	dd800715 	stw	r22,28(sp)
    2f28:	dd400615 	stw	r21,24(sp)
    2f2c:	dd000515 	stw	r20,20(sp)
    2f30:	dcc00415 	stw	r19,16(sp)
    2f34:	dc800315 	stw	r18,12(sp)
    2f38:	dc400215 	stw	r17,8(sp)
    2f3c:	dc000115 	stw	r16,4(sp)
    2f40:	d9400b15 	stw	r5,44(sp)
    2f44:	d9800c15 	stw	r6,48(sp)
    2f48:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    2f4c:	04000944 	movi	r16,37
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    2f50:	2005883a 	mov	r2,r4
	va_list args;
	va_start(args, fmt);
    2f54:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
    2f58:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
    2f5c:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    2f60:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    2f64:	11000007 	ldb	r4,0(r2)
    2f68:	20003926 	beq	r4,zero,3050 <alt_printf+0x13c>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    2f6c:	24000226 	beq	r4,r16,2f78 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    2f70:	14400044 	addi	r17,r2,1
    2f74:	00001106 	br	2fbc <alt_printf+0xa8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    2f78:	14400084 	addi	r17,r2,2
    2f7c:	10800047 	ldb	r2,1(r2)
    2f80:	10003326 	beq	r2,zero,3050 <alt_printf+0x13c>
            {
                if (c == '%')
    2f84:	1400021e 	bne	r2,r16,2f90 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    2f88:	8009883a 	mov	r4,r16
    2f8c:	00000b06 	br	2fbc <alt_printf+0xa8>
                } 
                else if (c == 'c')
    2f90:	1480051e 	bne	r2,r18,2fa8 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
    2f94:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    2f98:	ad800104 	addi	r22,r21,4
    2f9c:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
    2fa0:	00030800 	call	3080 <alt_putchar>
    2fa4:	00002806 	br	3048 <alt_printf+0x134>
                }
                else if (c == 'x')
    2fa8:	14c01f1e 	bne	r2,r19,3028 <alt_printf+0x114>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    2fac:	adc00017 	ldw	r23,0(r21)
    2fb0:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    2fb4:	b800031e 	bne	r23,zero,2fc4 <alt_printf+0xb0>
                    {
                        alt_putchar('0');
    2fb8:	01000c04 	movi	r4,48
    2fbc:	00030800 	call	3080 <alt_putchar>
                        continue;
    2fc0:	00002106 	br	3048 <alt_printf+0x134>
    2fc4:	05800704 	movi	r22,28
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    2fc8:	00c003c4 	movi	r3,15
    2fcc:	1d84983a 	sll	r2,r3,r22
    2fd0:	15c4703a 	and	r2,r2,r23
    2fd4:	1000021e 	bne	r2,zero,2fe0 <alt_printf+0xcc>
                        digit_shift -= 4;
    2fd8:	b5bfff04 	addi	r22,r22,-4
    2fdc:	003ffb06 	br	2fcc <alt_printf+0xb8>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    2fe0:	070003c4 	movi	fp,15
                        if (digit <= 9)
    2fe4:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    2fe8:	b0001716 	blt	r22,zero,3048 <alt_printf+0x134>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    2fec:	e584983a 	sll	r2,fp,r22
    2ff0:	15c4703a 	and	r2,r2,r23
    2ff4:	1584d83a 	srl	r2,r2,r22
                        if (digit <= 9)
    2ff8:	18800236 	bltu	r3,r2,3004 <alt_printf+0xf0>
                            c = '0' + digit;
    2ffc:	11000c04 	addi	r4,r2,48
    3000:	00000106 	br	3008 <alt_printf+0xf4>
                        else
                            c = 'a' + digit - 10;
    3004:	110015c4 	addi	r4,r2,87
                        alt_putchar(c);
    3008:	21003fcc 	andi	r4,r4,255
    300c:	2100201c 	xori	r4,r4,128
    3010:	213fe004 	addi	r4,r4,-128
    3014:	d8c00015 	stw	r3,0(sp)
    3018:	00030800 	call	3080 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    301c:	b5bfff04 	addi	r22,r22,-4
    3020:	d8c00017 	ldw	r3,0(sp)
    3024:	003ff006 	br	2fe8 <alt_printf+0xd4>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    3028:	1500071e 	bne	r2,r20,3048 <alt_printf+0x134>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    302c:	ad800017 	ldw	r22,0(r21)
    3030:	ad400104 	addi	r21,r21,4

                    while(*s)
    3034:	b1000007 	ldb	r4,0(r22)
    3038:	20000326 	beq	r4,zero,3048 <alt_printf+0x134>
                      alt_putchar(*s++);
    303c:	b5800044 	addi	r22,r22,1
    3040:	00030800 	call	3080 <alt_putchar>
    3044:	003ffb06 	br	3034 <alt_printf+0x120>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    3048:	8805883a 	mov	r2,r17
    304c:	003fc506 	br	2f64 <alt_printf+0x50>
            {
                break;
            }
        }
    }
}
    3050:	dfc00a17 	ldw	ra,40(sp)
    3054:	df000917 	ldw	fp,36(sp)
    3058:	ddc00817 	ldw	r23,32(sp)
    305c:	dd800717 	ldw	r22,28(sp)
    3060:	dd400617 	ldw	r21,24(sp)
    3064:	dd000517 	ldw	r20,20(sp)
    3068:	dcc00417 	ldw	r19,16(sp)
    306c:	dc800317 	ldw	r18,12(sp)
    3070:	dc400217 	ldw	r17,8(sp)
    3074:	dc000117 	ldw	r16,4(sp)
    3078:	dec00e04 	addi	sp,sp,56
    307c:	f800283a 	ret

00003080 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    3080:	defffd04 	addi	sp,sp,-12
    3084:	dc000115 	stw	r16,4(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    3088:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    308c:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    3090:	01000034 	movhi	r4,0
    3094:	210d1a04 	addi	r4,r4,13416
    3098:	d80b883a 	mov	r5,sp
    309c:	01800044 	movi	r6,1
    30a0:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    30a4:	dfc00215 	stw	ra,8(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    30a8:	00031340 	call	3134 <altera_avalon_jtag_uart_write>
    30ac:	00ffffc4 	movi	r3,-1
    30b0:	10c00126 	beq	r2,r3,30b8 <alt_putchar+0x38>
        return -1;
    }
    return c;
    30b4:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
}
    30b8:	dfc00217 	ldw	ra,8(sp)
    30bc:	dc000117 	ldw	r16,4(sp)
    30c0:	dec00304 	addi	sp,sp,12
    30c4:	f800283a 	ret

000030c8 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    30c8:	defffe04 	addi	sp,sp,-8
    30cc:	dc000015 	stw	r16,0(sp)
    30d0:	dfc00115 	stw	ra,4(sp)
    30d4:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    30d8:	00033940 	call	3394 <strlen>
    30dc:	01000034 	movhi	r4,0
    30e0:	210d1a04 	addi	r4,r4,13416
    30e4:	800b883a 	mov	r5,r16
    30e8:	100d883a 	mov	r6,r2
    30ec:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
    30f0:	dfc00117 	ldw	ra,4(sp)
    30f4:	dc000017 	ldw	r16,0(sp)
    30f8:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    30fc:	00031341 	jmpi	3134 <altera_avalon_jtag_uart_write>

00003100 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    3100:	deffff04 	addi	sp,sp,-4
    3104:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    3108:	000335c0 	call	335c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    310c:	00800044 	movi	r2,1
    3110:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    3114:	dfc00017 	ldw	ra,0(sp)
    3118:	dec00104 	addi	sp,sp,4
    311c:	f800283a 	ret

00003120 <alt_sys_init>:
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
  if (!ret_code)
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
    3120:	01000034 	movhi	r4,0
    3124:	01400034 	movhi	r5,0
    3128:	210d1504 	addi	r4,r4,13396
    312c:	294d1b04 	addi	r5,r5,13420
    3130:	000326c1 	jmpi	326c <alt_dev_llist_insert>

00003134 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    3134:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    3138:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    313c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    3140:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    3144:	2980072e 	bgeu	r5,r6,3164 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    3148:	38c00037 	ldwio	r3,0(r7)
    314c:	18ffffec 	andhi	r3,r3,65535
    3150:	183ffc26 	beq	r3,zero,3144 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    3154:	28c00007 	ldb	r3,0(r5)
    3158:	20c00035 	stwio	r3,0(r4)
    315c:	29400044 	addi	r5,r5,1
    3160:	003ff806 	br	3144 <altera_avalon_jtag_uart_write+0x10>

  return count;
}
    3164:	f800283a 	ret

00003168 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
    3168:	defffe04 	addi	sp,sp,-8
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
    316c:	d1600204 	addi	r5,gp,-32760
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
    3170:	dc000015 	stw	r16,0(sp)
    3174:	dfc00115 	stw	ra,4(sp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
    3178:	00032e40 	call	32e4 <alt_find_dev>
    317c:	1021883a 	mov	r16,r2

  if (NULL == dev)
    3180:	10000a1e 	bne	r2,zero,31ac <altera_avalon_mutex_open+0x44>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    3184:	00800034 	movhi	r2,0
    3188:	108d1d04 	addi	r2,r2,13428
    318c:	10800017 	ldw	r2,0(r2)
    3190:	10000226 	beq	r2,zero,319c <altera_avalon_mutex_open+0x34>
    3194:	103ee83a 	callr	r2
    3198:	00000206 	br	31a4 <altera_avalon_mutex_open+0x3c>
    319c:	00800034 	movhi	r2,0
    31a0:	108d3e04 	addi	r2,r2,13560
  {
    ALT_ERRNO = ENODEV;
    31a4:	00c004c4 	movi	r3,19
    31a8:	10c00015 	stw	r3,0(r2)
  }

  return dev;
}
    31ac:	8005883a 	mov	r2,r16
    31b0:	dfc00117 	ldw	ra,4(sp)
    31b4:	dc000017 	ldw	r16,0(sp)
    31b8:	dec00204 	addi	sp,sp,8
    31bc:	f800283a 	ret

000031c0 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
    31c0:	f800283a 	ret

000031c4 <altera_avalon_mutex_lock>:
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  alt_u32 id, data, check;
  int ret_code = -1;

  NIOS2_READ_CPUID(id);
    31c4:	0005317a 	rdctl	r2,cpuid

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
    31c8:	1004943a 	slli	r2,r2,16

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
    31cc:	20c00317 	ldw	r3,12(r4)
  int ret_code = -1;

  NIOS2_READ_CPUID(id);

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
    31d0:	1144b03a 	or	r2,r2,r5

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
    31d4:	18800035 	stwio	r2,0(r3)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
    31d8:	20c00317 	ldw	r3,12(r4)
    31dc:	18c00037 	ldwio	r3,0(r3)

  if ( check == data)
    31e0:	18bff81e 	bne	r3,r2,31c4 <altera_avalon_mutex_lock>
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
}
    31e4:	f800283a 	ret

000031e8 <altera_avalon_mutex_trylock>:
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  alt_u32 id, data, check;
  int ret_code = -1;

  NIOS2_READ_CPUID(id);
    31e8:	0005317a 	rdctl	r2,cpuid

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
    31ec:	1004943a 	slli	r2,r2,16
    31f0:	114ab03a 	or	r5,r2,r5

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
    31f4:	20800317 	ldw	r2,12(r4)
    31f8:	11400035 	stwio	r5,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
    31fc:	20800317 	ldw	r2,12(r4)
    3200:	10800037 	ldwio	r2,0(r2)

  if ( check == data)
    3204:	1144c03a 	cmpne	r2,r2,r5
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
}
    3208:	0085c83a 	sub	r2,zero,r2
    320c:	f800283a 	ret

00003210 <altera_avalon_mutex_unlock>:
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
  alt_u32 id;
  NIOS2_READ_CPUID(id);
    3210:	0005317a 	rdctl	r2,cpuid

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
    3214:	20c00317 	ldw	r3,12(r4)
    3218:	01400044 	movi	r5,1
    321c:	19400135 	stwio	r5,4(r3)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
    3220:	1004943a 	slli	r2,r2,16
    3224:	20c00317 	ldw	r3,12(r4)
    3228:	18800035 	stwio	r2,0(r3)
    322c:	f800283a 	ret

00003230 <altera_avalon_mutex_is_mine>:
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
  alt_u32 id, data, owner, value;
  int ret_code = 0;

  NIOS2_READ_CPUID(id);
    3230:	0007317a 	rdctl	r3,cpuid

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
    3234:	20800317 	ldw	r2,12(r4)
    3238:	10800037 	ldwio	r2,0(r2)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
    323c:	1008d43a 	srli	r4,r2,16
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
    3240:	20c0031e 	bne	r4,r3,3250 <altera_avalon_mutex_is_mine+0x20>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
    3244:	10bfffcc 	andi	r2,r2,65535
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
    3248:	1004c03a 	cmpne	r2,r2,zero
    324c:	f800283a 	ret
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
  alt_u32 id, data, owner, value;
  int ret_code = 0;
    3250:	0005883a 	mov	r2,zero
      ret_code = 1;
    }
  }

  return ret_code;
}
    3254:	f800283a 	ret

00003258 <altera_avalon_mutex_first_lock>:
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
  alt_u32 data;
  int ret_code = 0;

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
    3258:	20800317 	ldw	r2,12(r4)
    325c:	10800137 	ldwio	r2,4(r2)
  {
    ret_code = 1;
  }

  return ret_code;
}
    3260:	1080004c 	andi	r2,r2,1
    3264:	f800283a 	ret

00003268 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    3268:	f800283a 	ret

0000326c <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    326c:	20000226 	beq	r4,zero,3278 <alt_dev_llist_insert+0xc>
    3270:	20800217 	ldw	r2,8(r4)
    3274:	1000131e 	bne	r2,zero,32c4 <alt_dev_llist_insert+0x58>
    3278:	00800034 	movhi	r2,0
    327c:	108d1d04 	addi	r2,r2,13428
    3280:	10800017 	ldw	r2,0(r2)
    3284:	10000926 	beq	r2,zero,32ac <alt_dev_llist_insert+0x40>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    3288:	deffff04 	addi	sp,sp,-4
    328c:	dfc00015 	stw	ra,0(sp)
    3290:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    3294:	00c00584 	movi	r3,22
    3298:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    329c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    32a0:	dfc00017 	ldw	ra,0(sp)
    32a4:	dec00104 	addi	sp,sp,4
    32a8:	f800283a 	ret
    32ac:	00800034 	movhi	r2,0
    32b0:	108d3e04 	addi	r2,r2,13560
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    32b4:	00c00584 	movi	r3,22
    32b8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    32bc:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    32c0:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
    32c4:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    32c8:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    32cc:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    32d0:	28800017 	ldw	r2,0(r5)
    32d4:	11000115 	stw	r4,4(r2)
  list->next           = entry;
    32d8:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
    32dc:	0005883a 	mov	r2,zero
    32e0:	f800283a 	ret

000032e4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    32e4:	defffb04 	addi	sp,sp,-20
    32e8:	dcc00315 	stw	r19,12(sp)
    32ec:	dc800215 	stw	r18,8(sp)
    32f0:	dc400115 	stw	r17,4(sp)
    32f4:	dc000015 	stw	r16,0(sp)
    32f8:	dfc00415 	stw	ra,16(sp)
    32fc:	2027883a 	mov	r19,r4
    3300:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
    3304:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    3308:	00033940 	call	3394 <strlen>
    330c:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    3310:	84400726 	beq	r16,r17,3330 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    3314:	81000217 	ldw	r4,8(r16)
    3318:	980b883a 	mov	r5,r19
    331c:	900d883a 	mov	r6,r18
    3320:	00033640 	call	3364 <memcmp>
    3324:	10000426 	beq	r2,zero,3338 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    3328:	84000017 	ldw	r16,0(r16)
    332c:	003ff806 	br	3310 <alt_find_dev+0x2c>
  }
  
  /* No match found */
  
  return NULL;
    3330:	0005883a 	mov	r2,zero
    3334:	00000106 	br	333c <alt_find_dev+0x58>
    3338:	8005883a 	mov	r2,r16
}
    333c:	dfc00417 	ldw	ra,16(sp)
    3340:	dcc00317 	ldw	r19,12(sp)
    3344:	dc800217 	ldw	r18,8(sp)
    3348:	dc400117 	ldw	r17,4(sp)
    334c:	dc000017 	ldw	r16,0(sp)
    3350:	dec00504 	addi	sp,sp,20
    3354:	f800283a 	ret

00003358 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    3358:	f800283a 	ret

0000335c <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    335c:	000170fa 	wrctl	ienable,zero
    3360:	f800283a 	ret

00003364 <memcmp>:
    3364:	218d883a 	add	r6,r4,r6
    3368:	21800826 	beq	r4,r6,338c <memcmp+0x28>
    336c:	20800003 	ldbu	r2,0(r4)
    3370:	28c00003 	ldbu	r3,0(r5)
    3374:	10c00226 	beq	r2,r3,3380 <memcmp+0x1c>
    3378:	10c5c83a 	sub	r2,r2,r3
    337c:	f800283a 	ret
    3380:	21000044 	addi	r4,r4,1
    3384:	29400044 	addi	r5,r5,1
    3388:	003ff706 	br	3368 <memcmp+0x4>
    338c:	0005883a 	mov	r2,zero
    3390:	f800283a 	ret

00003394 <strlen>:
    3394:	2005883a 	mov	r2,r4
    3398:	10c00007 	ldb	r3,0(r2)
    339c:	18000226 	beq	r3,zero,33a8 <strlen+0x14>
    33a0:	10800044 	addi	r2,r2,1
    33a4:	003ffc06 	br	3398 <strlen+0x4>
    33a8:	1105c83a 	sub	r2,r2,r4
    33ac:	f800283a 	ret
